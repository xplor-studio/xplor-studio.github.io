[{"body":"","categories":"","description":"Getting the most out of XploR for your development needs","excerpt":"Getting the most out of XploR for your development needs","ref":"/docs/concepts/","tags":"","title":"Concepts"},{"body":"","categories":"","description":"Getting started with XploR","excerpt":"Getting started with XploR","ref":"/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"In embedded or cross-platform development, the compute architecture of the host development system (i.e. hosts) is different than the the target execution platform (i.e. targets). Thus, the target application(s) (i.e. programs) will not be able to run on the host development system.\nThe communication channel between the host and target lets the host software (e.g. XploR Studio) program and control the target hardware behavior and program code.\nBecause of the inherent architural differences between the hosts and targets, XploR Studio is integrated with different embedded compiler toolchains, operating systems, hardware designs, and debug \u0026 monitoring tools, packaged as blueprints and delivered by the IDE to provide a unified experience to create, build, deploy, test and debug designs for developers.\nmainframe Cross-platform development state \"Host Development System\" as hosts note left of hosts : where XploR IDE runs hosts : Linux or Windows on x86 / ia64 state \"Target Execution Platforms\" as targets targets : ARM, RISC-V, or others ISA(s)\\nrunning baremetal or with an\\nembedded OS note right of targets : where target applications run targets -u-\u003e hosts note left on link acknowledgement to host from target end note hosts --\u003e targets note left on link host commands to program or debug target end note Embedded Target In the post-silicon development flow, the embedded target consists of a CPU and associated peripherals (e.g. USB, Ethernet, I2C, …). The CPU implements and execute code defined by an Instruction Set Architecture (ISA, e.g. x86, ARM, RISC-V). JTAG is commonly the communication channel between the host and target for programming and debugging, as shown below:\nmainframe Post-silicon embedded target state \"Host Development System\" as hosts hosts : Linux or Windows on x86 / ia64 state \"Target Platform (ASICs)\" as targets { state CPU : x86 or ARM state Memory : DDR, SRAM, ... state Peripherals : USB, Ethernet, ... } note bottom of targets : CPU, Memory and Peripherals are\\nASIC blocks, not modifable. state JTAG note top of JTAG : JTAG used to program target memory\\nand control / debug programs on CPU. hosts -\u003e JTAG JTAG -\u003e targets Host software Some of the most common software components that run on the host computer.\nIDE XploR Studio has a command line interface as well as a graphical user interface based on the Eclipse IDE. Both are collection of software programs and tools let the developer create programs for the embedded targets.\nThe Integrated Development Environment (IDE) is a unified graphical user interface that makes it easy and convenient for developers to write and debug code. The IDE typically includes a source code editor, a source-level debugger, and a build automation tool.\nThe XploR Studio IDE is a flexible and highly configurable software environment that is fully integrated with blueprints to accelerate pre and post silicon software development.\nAlso see Why do I need an IDE?\nCross toolchain The cross toolchain is the set of tools that compiles program source code, written in C/C++ or assembly language, into executable instructions that run on the target platforms. The cross toolchain consists of compilers, linker, and associated run-time libraries.\nCompiler choices: The GNU compiler (www.gnu.org), and LLVM are two most popular compilers for cross platform development. GNU GCC is compatible with a wider range of existing open source software, CPU architecture, and operating systems.\nLLVM is a more modern compiler that, while continuously evolving, provides faster compilation speed, better diagnostic, and is modularly designed, making it the popular choice for new and emerging ISA and architecture.\nGDB GDB is a GNU project command line debugger that allows developers to debug programs written in various languages. It supports many debugging formats and offers many debugging features, including the ability to step through code, set breakpoints, and examine variables. The XploR Studio IDE provides a graphical interface to GDB, making it easier to view different aspects of the running program (e.g. call-stack, variables, registers, and assembly code) from centralized dash-board.\nTarget software Bootloader Program code and data of an embedded operating system must be loaded into the target platform working memory during the device start-up. This task is achieved by the bootloader, which is a program launched immediately after the target starts.\nNote: The U-Boot bootloader is a popular bootloader available for embedded microarchitecture such as PowerPC and ARM. Recent ISA such as RISC-V takes a more minimalistic approach, such as that supported by BBL (Berkeley Boot Loader) Real-time OS (RTOS) A real-time operating system (RTOS) is an operating system that is designed to provide predictable processing time for critical tasks. An RTOS can respond to an event in a specified time period. This makes it ideal for applications that require high reliability or timing precision.\nRTOS(es) provide real-time task scheduling and basic memory management, along with advanced features such as multi-threading, interrupt handling and power management. Some RTOS(es) such as Zephyr OS are scalable and can be configured to support as many or as few features as needed in order to minimize resource and memory footprint.\nRTOS awareness: The XploR Studio IDE and related blueprints provide support for building and debugging of several popular RTOS(es) including Amazon FreeRTOS, Zephyr OS, and embedded Linux.\n","categories":"","description":"Software develoment for embedded systems","excerpt":"Software develoment for embedded systems","ref":"/docs/concepts/cross-platform/","tags":"","title":"Embedded development"},{"body":"With the advent of open source CPU implementation (e.g. openRISC ), and open ISA (e.g. RISC-V), opportunities exist for developers to innovate on both side of the coin: in both hardware and software (i.e. software-hardware co-design and development)\nTo properly supports software-hardware co-design for pre-silicon development, the embedded target must be able to host different hardware designs consisting of different ISA implementation (and sometimes more than one), HW IP(s) and peripherals, and on-chip topology.\nTarget execution platform(s) are platform devices with circuits that can be manipulated with hardware description language (HDL) to perform specific functions, including those of a microprocessor or a complete system on chip (SoC).\nExamples: FPGA(s) are common target execution platforms used for prototyping and deployment. Emulators and arguably cycle-approximate instruction set simulators, used for verification and early software development, are other examples. In the context of pre-silicon development, programming means:\nThe manipulation of the device circuits with specific HDL (hardware programming, or flashing), or The loading and debugging of executable code and data (software programming, or loading) into the memory of the microprocessor that is executing on the target execution platform. XploR Studio supports both mode of programming support both pre and post silicon software development.\nVirtual JTAG: Many XploR blueprints for execution platforms include builtin virtual JTAG supporting hardware and software programming, thus obviating the needs for costly and less convenient external JTAG device from third-parties.\nmainframe Target execution platform as the embedded target state \"Host Development System\" as hosts hosts : Linux or Windows on x86 / ia64 state \"Pre-silicon target execution platform\" as targets { state JTAG state \"HDL programmable device\" as HAPS { state CPU : x86 or ARM state Memory : DDR, SRAM, ... state Peripherals : USB, Ethernet, ... } JTAG --\u003e HAPS } note bottom of HAPS : CPU, Memory and Peripherals\\nare (or can be) programmed with HDL. state JTAG note top of JTAG : JTAG used for both hardware\\nand software programming hosts -\u003e JTAG ","categories":"","description":"Target platforms for pre-silicon development","excerpt":"Target platforms for pre-silicon development","ref":"/docs/concepts/execution-environment/","tags":"","title":"Execution platforms"},{"body":"Blueprints are packages of hardware and/or software IP(s) that are bounded to specific execution platform(s).\nIP(s) versus blueprints\" The HDL implementations of hardware peripherals, accelerator, or ISA such as ARM or RISC-V are IP(s). Blueprints are combination these IP(s) that has been customized, configured, and built to execute on specific target execution platforms, such as FPGA(s) from AMD or Intel. Blueprints are fully integrated with XploR Studio, and can be installed and used by themselves or in combination with other blueprints.\nBenefits:\nBlueprints provide clear and concise purposes - Blueprints serve as a detailed plan or a design that outlines the necessary steps and materials required to construct or create a design.\nBlueprints act as reference model - Blueprints prototype the functional behavior of the design, and can be used as a reference or golden model to help to ensure that the finished product is consistent with the original design and meets the expectations and requirements of our customers.\nBlueprints enable early software development - Together with XploR Studio IDE, blueprints enable developers to design, test, and debug software in pre-silicon phase in order to identify and address potential issues beforehand.\nBlueprints promote reusability - In many cases, HW and SW IP(s) in blueprints are hardened and reused for in-silicon and post-silicon deployment.\n","categories":"","description":"Recipes to enable your design","excerpt":"Recipes to enable your design","ref":"/docs/concepts/blueprints/","tags":"","title":"Blueprints"},{"body":"","categories":"","description":"Installing XploR Studio","excerpt":"Installing XploR Studio","ref":"/docs/getting-started/installation/","tags":"","title":"Installation"},{"body":"Host System Requirements The supported operating systems for installing the product are:\nWindows 10 Ubuntu Desktop 20.04 Minimum (Windows 10) Processor: 1 gigahertz (GHz) or faster Memory: 8 GB (64-bit) Disk space: 30GB free HD space Display: 19’ Monitor, VGA capable of 1024×768 screen resolution Internet connection: Yes Recommended (Windows 10) Processor: 2 gigahertz (GHz) or faster Memory: 16 gigabytes (GB) Disk space: 50GB free HD space Display: 22’ Monitor, VGA capable of 1920x1080 screen resolution Internet connection: Yes Minimum (Ubuntu 20.04) Processor: 2 GHz dual-core processor Memory: 8 GiB RAM (system memory) Disk space: 30 GB of hard drive space Display: 19’ Monitor, VGA capable of 1024×768 screen resolution Internet connection: Yes Recommended (Ubuntu 20.04) Processor: 2 GHz dual-core processor Memory: 16 GiB RAM (system memory) Disk space: 50 GB of hard drive space Display: 22’ Monitor, VGA capable of 1920x1080 screen resolution Internet connection: Yes ","categories":"","description":"Requirements for XploR IDE","excerpt":"Requirements for XploR IDE","ref":"/docs/getting-started/installation/system-requirements/","tags":"","title":"System requirements"},{"body":"There are two ways to install the IDE:\nUsing the IDE installer. With xip. This section contains instructions on how to install the XploR IDE using the installer on Windows or Linux hosts.\nNote: The installer needs to pull development packages from the internet. Please make sure that your machine has internet connectivity.\nDownload the IDE installer Installer for Linux https://xplor.studio/download/ide/XploRStudio_v1.0.0_linux.run Installer for Windows https://xplor.studio/download/ide/XploRStudio_v1.0.0_win32.exe Start the installer On Windows Run the executable installer by right-clicking on the executable from the desktop or file manager and selecting Open:\nOn Linux Open the terminal and run the installer\n./xplorstudio-linux.run\nSelect the Next button to proceed with the installation.\nOnce Next is selected, you shall be presented with the XploR IDE License Agreement. Review this agreement carefully, then select “I accept the agreement” and Next to continue or Quit to exit.\nOnce Next is selected, you will see the information: Choose a directory name without space characters.\nPlease choose a destination path without spaces. If XploR IDE is installed on a location containing spaces, the application build will fail. This is a known issue and will be fixed in a future release. Select OK to continue.\nOnce OK is selected, the installer presents the installation path. You can choose or enter an alternative. Select Next to continue.\nNote: Please choose a destination path that is not available. If XploR IDE is installed in an available location, the data cannot be completely uninstalled. This is a known issue and will be fixed in a future release.\nThe XploR IDE installer presents a summary of packages to be installed.\nThen select Next to proceed.\nOnce Next is selected, the selected packages will be copied into the installation directory.\nSelect Next to start the installation.\nAfter all the XploR IDE files have been copied, one final dialog is presented below. Select the Finish button to complete the installation of the XploR IDE.\nClick OK to launch XploR IDE.\n","categories":"","description":"Installing XploR using the IDE installer","excerpt":"Installing XploR using the IDE installer","ref":"/docs/getting-started/installation/install/","tags":"","title":"IDE installer"},{"body":"xip (i.e. XploR pip) is a standalone application used for downloading, installing and managing the IDE and blueprints. xip can be downloaded from this link.\nTip: To install the XploR IDE with xip, use:\n% xip install xplor-studio-ide Introduction Developers can use xip to:\nsignup: sign up for a free account from the command line. Alternatively, you can also used this link to sign up for a free account. Change all references to blueprint(s) to xplor.design install: download and install XploR Studio IDE, or blueprints from XploR Design uninstall: uninstall installed blueprints on the host machine. show: show information about installed blueprints. list: list all installed and available blueprints. To get more information:\n$ xip --help _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! usage: xip [-h] [--version] [--xplor-home \u003cpath\u003e] [--init] ... A Blueprint manager CLI optional arguments: -h, --help show this help message and exit Commands: signup Sign up for a free account. install Install a blueprint. uninstall Uninstall a blueprint. show Show the information of a blueprint. list List installed blueprints. General options: --version Show version and exit. --xplor-home \u003cpath\u003e Set the XploR workspace and set $XPLOR_HOME=\u003cpath\u003e if it not exists (Default: /home/ubuntu/.xplor). --init Initialize the credentials file in the Xplor workspace and exit To get more info about subcommands (signup, install, uninstall, show, list):\n$ xip install --help _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! usage: xip install [-h] [--no-deps] [--upgrade] blueprint positional arguments: blueprint The name of the blueprint to install. optional arguments: -h, --help show this help message and exit. --no-deps Install a blueprint without dependencies. --upgrade Upgrade a blueprint to the newest available version. Sign up To access blueprints and blueprint registry, users must sign up for an account here or using the xip signup command:\n$ xip signup _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.060] Setup the workspace [ 0.060] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints [ 0.061] Getting the Registration Flow. https://xplor.soc.one/.ory/kratos/public/self-service/registration?flow=5713986c-5675-4b15-9c27-169c68345bee [ 1.142] Getting email and password. Enter your email: staff@soc.one Enter your password: Re-enter your password: [ 17.868] Signing up. [ 19.770] Sign up successfully. [Notice] Please activate your account now by clicking the link in the activation email to access all our features and services. Note: Please activate your account by clicking the link in the activation email.\nSign in After signing up, users can authenticate with the registry with the following command:\n$ xip --init _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.060] Setup the workspace [ 0.060] The XploR's workspace folder created successfully! /home/dongnh/.xplor/blueprints Cannot find the credentials file in /home/dongnh/.xplor Enter your username: staff@soc.one Enter your password: xip installer will require the username and password previously created in the sign up step for login. If login is successful, users will be asked to save the username and encoded password in a credentials file.\nEnter your username: staff@soc.one Enter your password: Login successully! Would you like to save username and password to the credentials file? [y/n] (This action will create a new credentials file or update the current credentials file): Install Use xip install to install blueprints with or without dependencies.\nTo install the GNU elf toolchain and related dependencies, use:\n% xip install riscv-xplor-elf To install without dependencies, use:\n% xip install riscv-xplor-elf --no-deps To upgrade blueprints to latest version:\n% xip install --upgrade riscv-xplor-elf Show To show information about an installed blueprint:\n$ xip show riscv64-xplor-linux _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.003] Setup the workspace [ 0.004] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints Name: riscv64-xplor-linux Version: 1.0 Summary: RISC-V Embedded Linux 64-bit Toolchain Home-page: http://xplor.design Author: SoC.One Inc. Author-email: info@soc.one License: Free Location: /home/dongnh/.xplor/blueprints Requires: rootfs Required-by: Uninstall To uninstall the installed blueprint:\n$ xip uninstall qemu _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.003] Setup the workspace [ 0.003] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints Found existing installation: qemu 1.0 Uninstalling qemu-1.0: Successfully uninstalled qemu-1.0 List To show all installed blueprints on the local machine:\n$ xip list _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.004] Setup the workspace [ 0.004] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints Package Version ------------------- ------- qemu 1.0 riscv64-xplor-linux 1.0 rootfs 1.0 To show all available blueprints for your account:\n$ xip list --on-registry _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.004] Setup the workspace [ 0.004] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints [ 3.723] Getting data from registry. [ 4.750] Information of all blueprints on Registry: +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ | No | Name | Version | Versions | License | Classifier | Requires | +======+==============================+===============+===============+===========+==================+============================+ | 1 | openocd | 1.0.0 | 1.0.0 | Free | Software | | +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ | 2 | qemu | 1.0.0 | 1.0.0 | Free | Software, | | | | | | | | Platform | | +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ | 3 | riscv-xplor-elf | 1.0.0 | 1.0.0 | Free | Software | | +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ | 4 | riscv32-xplor-linux | 1.0.0 | 1.0.0 | Free | Software | rootfs | +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ | 5 | riscv32-xplord-linux | 1.0.0 | 1.0.0 | Free | Software | rootfs | +------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+ |... By default, the data is displayed in table format. Users can customize their views by adding the --format option. The available options are tabular and JSON.\n$ xip list --on-registry --format json _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.004] Setup the workspace [ 0.004] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints [ 3.662] Getting data from registry. [ 4.618] Information of all blueprints on Registry: { \"openocd-1.0.0\": { \"Metadata-Version\": \"1.1\", \"Name\": \"openocd\", \"Version\": \"1.0.0\", \"Summary\": \"Open On-Chip Debugger\", \"Home-page\": \"http://xplor.design\", \"Author\": \"SoC.One Inc.\", \"Author-email\": \"info@soc.one\", \"License\": \"Free\", \"Description\": \"OpenOCD aims to provide debugging, in-system programming and boundary-scan testing for embedded target devices\", \"Platform\": [ \"Windows\", \"Linux\" ], \"Classifier\": [ \"Software\" ], \"Requires\": [], \"Size\": \"7.68 MB\" } \"qemu-1.0.0\": { ... User can select specific type of blueprints to display with the --filter option.\nBlueprint types for display using --filter include software, hardware, cores, platforms, examples or all (using the none option).\n$ xip list --on-registry --filter examples _ __ __ ___ | |/_/__ / /__ / _ \\ _\u003e \u003c/ _ \\/ / _ \\/ , _/ /_/|_/ .__/_/\\___/_/|_| /_/ Explore your SoC Design! [ 0.004] Setup the workspace [ 0.004] The XploR's workspace folder already exists! /home/dongnh/.xplor/blueprints [ 3.649] Getting data from registry. [ 4.600] Information of examples blueprints on Registry: +------+---------------------------+-----------+------------+-----------+--------------+----------------------------+ | No | Name | Version | Versions | License | Classifier | Requires | +======+===========================+===========+============+===========+==============+============================+ | 1 | baremetal-neorv32-de2115 | 1.0.0 | 1.0.0 | Free | Example | bitstream-de2115-neorv32, | | | | | | | | riscv-xplor-elf | +------+---------------------------+-----------+------------+-----------+--------------+----------------------------+ | 2 | baremetal-vexriscv-agilex | 1.0.0 | 1.0.0 | Free | Example | bitstream-agilex-vexriscv, | | | | | | | | riscv-xplor-elf | +------+---------------------------+-----------+------------+-----------+--------------+----------------------------+ ... ","categories":"","description":"XIP is XploR pip","excerpt":"XIP is XploR pip","ref":"/docs/getting-started/installation/xip/","tags":"","title":"XIP installer"},{"body":"","categories":"","description":"Getting started quickly with XploR","excerpt":"Getting started quickly with XploR","ref":"/docs/getting-started/quick-start/","tags":"","title":"Quick start"},{"body":"This chapter covers the basics of a quick-start project including creating, building, running, and debugging applications. This project referred to in this chapter is called Blinky. This application prints Blink text. Through the debug session, users can examine RTOS objects such as Task and Queue. The application can also be built and run on QEMU emulator.\nTo build, run and debug Blinky applications with QEMU emulator, please install the xplor-studio-freertos blueprint first. Please refer to Guidelines for more information.\nCreate a new project The easiest way to use FreeRTOS is to start with one of the pre-configured demo application projects by selecting File \u003e New \u003e C Project choose RISC-V Blinky project. Select Toolchains: Baremetal XploR Toolchain for RISC-V and enter the Project name. Then click Next.\nIn the next screens, users can specify project options such as Author, copyright notice, project description, compiler, assembler, linker, and run/debug options. Then click the Next button.\nThen click Finish.\nIn some other kinds of projects, the new project wizard may have additional pages for specifying source codes, target, toolchain,… but the workflow is not changed.\nUpdate build settings After the project is created, the user can change build settings or other project settings by right-clicking on the project name in Project Explorer and selecting Properties. Then select C/C++ Build \u003e Settings\nNote: The Floating-point ABI – Single precision (f) is currently not supported in this release (except Embedded projects).\nFor example, on the Target Processor menu, users can change the architecture from 32 bits to 64 bits, and also select floating-point options.\nAnother useful setting is to add hooks before and after the build. For example:\nBuild project Building is simply done by clicking on the build button in the toolbar: Or right-click on the current project \u003e Build Project Messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU emulator XploR Studio offers several ways to run applications:\nSelect the RISC-V Blinky Demo entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.\nIn Run Configuration Dialog box, create a new run configuration by double-clicking on RISC-V Running\nOn the Main tab, choose option QEMU in Virtual Platforms. Click Apply then click Run.\nSelect the Blinky Demo Project entry in the Project Explorer and then click Run As \u003e RISC-V application with QEMU\nRight-click on current project \u003e Run As \u003e RISV-C application with QEMU\nAfter selecting Run As RISC-V application with QEMU, the “Blink” text will be printed continuously in Console view.\nDebug project on QEMU Emulator XploR Studio offers several ways to debug applications:\nSelect the RISC-V Blinky Demo entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.\nIn Debug Configuration Dialog box, create a new debug configuration by double-clicking on RISC-V Debugging\nOn the Debugger tab, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Blinky Demo Project entry in the Project Explorer and then click Debug As/RISC-V application with QEMU\nRight-click on current project \u003e Debug As \u003e RISV-C application with QEMU\nAfter selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOpen main_blinky.c source code file in src/application-specific/blinky_demo \u003e Set more breakpoints in Task and Queue object.\nPress F8 or click on Resume button to go to the next breakpoint\nContinue debugging with press F5 or clicking on Step Into button to step into the line of code and see data change in Register View\nContinue debugging with press F6 or clicking on Step Over button for step over\nPress F7 or click on Step Return (F7) button for step return code\nClick on the Suspend button to pause the debug process.\nUser can open Object Variables, Breakpoints, Task, Queue, and Heap to examine application states:\nVariables\nBreakpoints:\nTask:\nQueue:\nTimer:\nHeap:\nTo stop the debug process, click the Terminate icon in the toolbar or press F2.\n","categories":"","description":"Quick start with FreeRTOS","excerpt":"Quick start with FreeRTOS","ref":"/docs/getting-started/quick-start/freertos/","tags":"","title":"Creating application with FreeRTOS"},{"body":"","categories":"","description":"Frequently asked questions","excerpt":"Frequently asked questions","ref":"/docs/getting-started/faq/","tags":"","title":"FAQ"},{"body":"Failure when installing XploR Studio Issue 01: The dependencies packages are not installed\nSolution: Please make sure your machine has an Internet connection.\nIssue 02: The installer stopped with the error “Java heap space”\nSolution: Please make sure your machine has enough RAM. Please refer to System Requirements for hardware requirements to install XploR Studio.\n","categories":"","description":"Questions with installations","excerpt":"Questions with installations","ref":"/docs/getting-started/faq/faq/","tags":"","title":"Installation Issues"},{"body":"","categories":"","description":"XploR blueprints","excerpt":"XploR blueprints","ref":"/docs/blueprints/","tags":"","title":"Blueprints"},{"body":"Blueprints are packages of hardware and/or software IP(s) that extend XploR Studio with custom features and behaviors for specific execution platform(s).\nThe Blueprint Catalog is a collection of free and paid blueprints from SoC.one, community contributors, and commercial vendors.\nNote: You can peruse the Blueprint Catalog from the XploR Studio Dashboard via the Blueprints menu entry, or with xip.\nmainframe XploR blueprints state \"xplor.design - blueprint registry\" as registry { state \"Free blueprints\" state \"Paid blueprints\" } state \"Contributors\" as contributors { state \"SoC.one\" as socone state \"Open source developers\" as developers state \"Third-parties vendors\" as vendors } socone --\u003e registry : contributes developers -up-\u003e registry : contribute vendors --\u003e registry : contribute state \"XploR Studio\" as IDE state \"Target Platform\" as target IDE : User downloads and installs IDE : blueprints from XploR.design IDE : on the host system. IDE : IDE : XploR studio deploys blueprints IDE : on target platform registry -\u003e IDE : download \u0026\\ninstall IDE --\u003e target Creating and contributing blueprints Developer can create and contribute blueprints to XploR Design blueprint catalog. Once downloaded and installed, contributed blueprints are loaded dynamically XploR Studio.\nThe experience of implementing an XploR Design blueprint is comparable to that of writing a web browser extension. To learn more about XploR blueprint creation, please refer to the developer documentation.\n","categories":"","description":"Introduction to XploR blueprints","excerpt":"Introduction to XploR blueprints","ref":"/docs/blueprints/about/","tags":"","title":"Introduction"},{"body":"After successful installation, the baseline IDE does not contain any resources like toolchains, example programs, and target bitfiles.\nTo use example projects such as Embedded Baremetal, Embedded Linux or LLVM examples, it is necessary to download and install the respective blueprints.\nSelect the icon in the toolbar to show a list of available blueprints:\nNote:\nThere are two instances of blueprints: Stable for normal usage and Development for development. The Current Version and Available Version columns show the current installed version and the newest available version from XploR Design. The Status column indicates whether a blueprint is installed. To install the desired blueprint, check the box in the No. column and select Install. One or more blueprints can be installed at the same time.\nIf a blueprint has multiple available versions, you can select a specific version of that blueprint by simply double-clicking on it. A new dialog will be shown to display all available versions:\nThe Status column shows whether the blueprint is installed locally. User can uninstall a blueprint by checking the box in the No. column and selecting Uninstall. Similar to installing feature, one or more blueprints can be uninstalled at the same time.\n","categories":"","description":"Guidelines for using blueprints","excerpt":"Guidelines for using blueprints","ref":"/docs/blueprints/guideline/","tags":"","title":"Guidelines"},{"body":" WARNING The following guide is preliminary and subjected to changes.\nPrerequisite The following software components on the host computer are required:\npython==3.8.10 setuptools (newest version) Template Download and extract the blueprint template from here.\nNote that blueprint name should be in lowercases. If multiple words are used, they should be separated by underscores _ or -. Avoid using spaces or special characters or mixing _ and - in the package name.\nExamples:\nCorrect name : `blueprint-one`, `blueprint_two` Wrong name : `blueprint_with-wrong_name` Structure of blueprint templates In the example blueprint template, there are 2 folders (blueprint-one/, blueprint-two/) containing blueprint templates and a Makefile that supports building and publishing blueprints.\n./ ├── blueprint-one │ ├── blueprint-one │ │ └── Readme.md │ ├── MANIFEST.in │ └── setup.py ├── blueprint-two │ ├── blueprint-two │ │ ├── linux.x86_64 │ │ │ └── env │ │ └── win32.x86_64 │ │ └── env │ ├── MANIFEST.in │ └── setup.py └── Makefile The standard structure of a blueprint template includes:\nA data folder (blueprint-one/blueprint-one, blueprint-two/blueprint-two)\nMANIFEST.in (used for including non-Python data to package/blueprint)\nsetup.py (used for building a blueprint)\nTwo different data scenarios for blueprint are supported:\nThe data of the blueprint are host-independent, and can be used in both Windows and Linux OS (blueprint-one)\nThe data of the blueprint are host-dependent, requiring a different version for each supported host (blueprint-two)\nLimitation: blueprints that have a mix of both common and specific data for different supported host are not yet supported.\nsetup.py blueprint-one/setup.py\nfrom setuptools import setup package_dir = {'blueprint-one': 'blueprint-one'} setup( name=\"blueprint-one\", version=\"1.0.0\", description=\"The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board\", package_dir=package_dir, packages=['blueprint-one'], include_package_data=True, author=\"SoC.One Inc.\", url=\"http://xplor.design\", author_email=\"info@soc.one\", platforms=[\"Windows\", \"Linux\"], long_description=\"The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board\", license=\"Free\", install_requires=[ # Some dependencies here ], classifiers=[ 'Hardware' ] ) Ref. https://setuptools.pypa.io/en/latest/references/keywords.html\nname - A string specifying the name of the package.\nversion- A string specifying the version number of the package.\ndescription - A string describing the package in a single line.\nlong_description - A string providing a longer description of the package.\nauthor - A string specifying the author of the package.\nauthor_email - A string specifying the email address of the package author.\nURL - A string specifying the URL for the package homepage.\nlicense - A string specifying the license of the package.\nplatforms - A list of strings or comma-separated string. (Used to specify which OS is supported)\npackage_dir - A dictionary that maps package names. (That maps the data folder with the installed blueprint folder)\npackages - A list of strings specifying the packages that setuptools will manipulate. (That is the name of the installed blueprint folder)\ninstall_requires - A string or list of strings specifying what other distributions need to be installed when this one is. (Dependencies concept)\nclassifiers - A list of strings describing the categories for the package. (Classify a blueprint as HW, SW, bitstream,… or something else)\ninclude_package_data - If True, setuptools will automatically include any data files it finds inside your package directories that are specified by your MANIFEST.in file. (Should be set to True to include non-Python data)\nFor (blueprint-two), only some code need to be added to setup.py to specify package_dir for each supported host OS, as follow:\nfrom setuptools import setup import platform if platform.system() == 'Windows': package_dir = {'blueprint-two': 'blueprint-two/win32.x86_64'} else: package_dir = {'blueprint-two': 'blueprint-two/linux.x86_64'} Post-install and Pre-uninstall Note: If there are executable files that need to run after the blueprint is installed, please add post-install.sh/post-install.bat file (host specific) to the data folder.\nIf there are executable files that need to run before the blueprint is uninstalled, please add pre-uninstall.sh/pre-uninstall.bat file (host specific) to the data folder.\nxplor-studio-elf/ ├── MANIFEST.in ├── setup.py └── xplor-studio-elf ├── linux.x86_64 │ ├── post-install.sh │ └── pre-uninstall.sh └── win32.x86_64 ├── post-install.bat └── pre-uninstall.bat Building blueprint % python3 setup.py sdist or % make build\nNote:\nIf you’re reusing the example template, please rename the data folder and update the content of setup.py, MANIFEST.in As an example, with blueprint-one: Rename folder blueprint-one → socone-blueprint Replace string in setup.py, MANIFEST.in : blueprint-one → socone-blueprint ","categories":"","description":"How to package a blueprint","excerpt":"How to package a blueprint","ref":"/docs/blueprints/package/","tags":"","title":"Packaging blueprint"},{"body":"","categories":"","description":"Managed build","excerpt":"Managed build","ref":"/docs/configuration/","tags":"","title":"Build and debug"},{"body":"To configure a project in XploR Studio, right-click on the project and select Properties.\nThe properties for a project include:\nResource: Defined path variables for project. C/C++ Build: Configure project build options including build variables, environment settings, logging, build tools, and more. C/C++ General: Customize workspace settings including code analysis, formatting, indexing, language mappings, etc. Project Natures: Specify which natures should be assigned to the project (an advanced operation, requires a recent backup). Project References: Specify which other projects are referenced by the current project. Run/Debug Settings: Manage launch configurations associated with the current resource. Build Configurations To configure build settings, select C/C++ Build \u003e Settings:\nTool Settings tab allows you to configure options while building applications, such as setting the target architecture, ABI, tuning, code model, and adding optimization options, libraries and warning options in the assembler, compiler, and linker steps. Build Steps tab allows you to add pre-build and post-build commands ","categories":"","description":"Configuring a project with managed build","excerpt":"Configuring a project with managed build","ref":"/docs/configuration/build/","tags":"","title":"Configuring project"},{"body":"Prior to running or debugging the application, you must:\nEstablish a physical connection between the host and target Prepare an execution environment on the target, and Establish a logical debug channel between the host debugger and execution environment Physical target connection For most target platform(s) (FPGAs boards), physical target connection is achieved via one of the following means:\nHost computer and target platform connected via USB Target platform installed as a PCIe device on host computer Host computer connected to target via secure VPN (cloud native) For most cases, a USB cable is used to connect the host system to the target platform\nPreparing execution environment A binary image (bitfile) containing the hardware design of the system-on-chip that runs the embedded program will need to be downloaded and programmed on the FPGAs or hardware-assisted verification systems (HAVS) target.\nFor ASIC target platforms, no additional preparation is needed.\nTo program a bitfile to the specific board, click on the flash icon on the toolbar of XploR Studio IDE.\nThe Programming IP Core dialog appears to make it easier to select IP cores from different vendors:\nThe images show the IP core selected is s10gx_vexriscv.sof, which is the bitfile for Intel Stratix 10 GX FPGA board from VexRiscv vendor and the tool used for programming board is quartus_pgm (Quartus Programmer).\n","categories":"","description":"Target preparation","excerpt":"Target preparation","ref":"/docs/configuration/flash/","tags":"","title":"Preparing target connection"},{"body":"To Run a project on XploR Studio, right-click on the project and select Run As \u003e Run Configurations\nNote: The project used in this documentation is GNU C/C++ Helloworld Embedded Project so there are some differences in other projects.\nDouble-click on RISC-V Running to create a new run configuration. In Main tab, you can select the application path, auto-build option and change run configuration:\n","categories":"","description":"Running the embedded applications","excerpt":"Running the embedded applications","ref":"/docs/configuration/run/","tags":"","title":"Running program"},{"body":"To debug a project on XploR Studio, right-click on the project and select Debug As \u003e Debug Configurations\nNote: The project used in this documentation is GNU C/C++ Helloworld Embedded Project so there are some differences in other projects.\nDouble-click on RISC-V Debugging to create a new debug configuration:\nMain tab: Specify the executable application and configure auto-build option Debugger tab: Specify Platform (Remote Target/QEMU/Hardware/…), GDB setup (GDB commands, GDB options, etc..) and Platform Configuration. ","categories":"","description":"Debugging the embedded applications","excerpt":"Debugging the embedded applications","ref":"/docs/configuration/debug/","tags":"","title":"Debugging program"},{"body":"","categories":"","description":"Example projects available","excerpt":"Example projects available","ref":"/docs/examples/","tags":"","title":"Sample projects"},{"body":"In this release, XploR Studio supports following projects:\nBaremetal projects: GNU C/C++ Helloworld LLVM C/C++ Helloworld FreeRTOS projects: Blinky General Heap Large Heap Generic Timer Embedded Linux projects: Helloworld Kernel Debug Zephyr RTOS projects: Helloworld Synchonization Mutex Semaphore Message Queue ","categories":"","description":"Project examples","excerpt":"Project examples","ref":"/docs/examples/introduction/","tags":"","title":"Sample projects"},{"body":"","categories":"","description":"Embedded projects examples","excerpt":"Embedded projects examples","ref":"/docs/examples/embedded/","tags":"","title":"Baremetal"},{"body":"This chapter covers the basics of C/C++ embedded projects including creating, building, running, and debugging embedded applications. The project referred to in this chapter is called “Hello World.” This application prints “Hello World” text and runs a simple for-loop as a simple demonstration. The application can also be built and run on QEMU emulator.\nNote: To build, run and debug Embedded applications with QEMU emulator, please install the xplor-studio-elf blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select File \u003e New \u003e C Project choose RISC-V Embedded Project \u003e RISC-V Helloworld project and Toolchains: Baremetal XploR Toolchain for RISC-V then click Next.\nIn the next screens, the user can specify project options such as Author, copyright notice, project description, compiler, assembler, linker, and run/debug options. Then click the Next button.\nThen click Next to select Vendor Information. From the list, User can select one platform and one core to run/debug.\nThen click Finish.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"Project HelloWorld example using GNU C/C++ compiler","excerpt":"Project HelloWorld example using GNU C/C++ compiler","ref":"/docs/examples/embedded/riscvhelloworld/","tags":"","title":"GNU C/C++ HelloWorld"},{"body":"This chapter covers the basics of C/C++ embedded RISC-V projects including creating, building, running, and debugging embedded RISC-V applications. The project referred to in this chapter is called “LLVM Hello World.” This application prints “Hello World” text and runs a simple for-loop as a simple demonstration. The application can also be built with LLVM toolchain and run on QEMU emulator.\nNote: To build, run and debug Embedded applications with QEMU emulator, please install the xplor-studio-elf blueprint first. Please refer to Guidelines for more information.\nCreate a new project To create LLVM Hello World Embedded Project, select File \u003e New \u003e C Project choose RISC-V Embedded Project \u003e RISC-V LLVM Sample project and Toolchains: LLVM Baremetal Toolchain for RISC-V.\nAs the image above, there is no option as LLVM Baremetal Toolchain for RISC-V because this XploR Studio does not contain LLVM toolchain.\nTo use this toolchain, please install xplor-clang blueprint (refer to Guidelines for more information).\nAfter installation and restart the IDE, you can see the creating-project widget like:\nPlease refer to Create a new project for more information on other steps.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"Project HelloWorld example using LLVM C/C++ compiler","excerpt":"Project HelloWorld example using LLVM C/C++ compiler","ref":"/docs/examples/embedded/llvmhelloworld/","tags":"","title":"LLVM C/C++ HelloWorld"},{"body":"","categories":"","description":"FreeRTOS projects examples","excerpt":"FreeRTOS projects examples","ref":"/docs/examples/freertos/","tags":"","title":"FreeRTOS"},{"body":"This chapter covers the basics of C/C++ FreeRTOS projects including creating, building, running, and debugging FreeRTOS applications. The project referred to in this chapter is called “Blinky”. This application prints Blink text. Through the debug session, users can examine RTOS objects such as Task and Queue. The application can also be built and run on QEMU emulator.\nNote: To build, run and debug FreeRTOS applications with QEMU emulator, please install the xplor-studio-freertos blueprint first. Please refer to Guidelines for more information.\nCreate a new project Please refer to Create a new project for more information.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"FreeRTOS projects examples","excerpt":"FreeRTOS projects examples","ref":"/docs/examples/freertos/blinky/","tags":"","title":"Blinky"},{"body":"This chapter covers the basics of the FreeRTOS RISC-V Heap sample application including creating, building, running, and debugging steps. This application simply prints Testing Heap on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, … during debug session. This application can also be built and run on QEMU emulator.\nNote: To build, run and debug FreeRTOS applications with QEMU emulator, please install the xplor-studio-freertos blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select File \u003e New \u003e C Project choose FreeRTOS Project \u003e RISC-V Generic Heap and Toolchains: Baremetal XploR Toolchain for RISC-V, enter project name then click Next button.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"FreeRTOS projects examples","excerpt":"FreeRTOS projects examples","ref":"/docs/examples/freertos/genericheap/","tags":"","title":"Generic Heap"},{"body":"This chapter covers the basics of the FreeRTOS RISC-V Large Heap application including creating, building, running, and debugging steps. This application simply prints Testing Heap on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, … during debug session. This application can also be built and run on QEMU emulator.\nNote: To build, run and debug FreeRTOS applications with QEMU emulator, please install the xplor-studio-freertos blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select File \u003e New \u003e C Project choose FreeRTOS Project \u003e RISC-V Large Heap and Toolchains: Baremetal XploR Toolchain for RISC-V, enter project name then click Next button.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"FreeRTOS projects examples","excerpt":"FreeRTOS projects examples","ref":"/docs/examples/freertos/largeheap/","tags":"","title":"Large Heap"},{"body":"This chapter covers the basics of the FreeRTOS RISC-V Generic Timer application including creating, building, running, and debugging steps. This application simply prints Testing Timer on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, … during debug session. This application can also be built and run on QEMU emulator.\nNote: To build, run and debug FreeRTOS applications with QEMU emulator, please install the xplor-studio-freertos blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select File \u003e New \u003e C Project choose FreeRTOS Project \u003e RISC-V Generic Timer and Toolchains: Baremetal XploR Toolchain for RISC-V, enter project name then click Next button.\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nRunning and Debugging project with QEMU emulator The running and debugging step is the same as the quick-start project’s step. Please refer to Running and Debugging project with QEMU emulator for more information.\nBesides, users can see more about Timer objects:\n","categories":"","description":"FreeRTOS projects examples","excerpt":"FreeRTOS projects examples","ref":"/docs/examples/freertos/generictimer/","tags":"","title":"Generic Timer"},{"body":"","categories":"","description":"Embedded Linux projects examples","excerpt":"Embedded Linux projects examples","ref":"/docs/examples/embedded-linux/","tags":"","title":"Embedded Linux"},{"body":"This chapter covers the basics of C/C++ embedded Linux projects, including create/build/run/debug embedded Linux applications. The project referred to by this chapter is called “Hello World.” This application prints “Hello World” text and runs a simple for-loop for simple demonstration. The application can also be built and run on QEMU emulator.\nNote: To build, run and debug Embedded Linux applications with QEMU emulator, please install the xplor-studio-linux blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select File \u003e New \u003e C Project choose RISC-V Embedded Linux Project \u003e Helloworld project and select Embedded Linux XploR Toolchain for RISC-V in the Toolchains box\nAs the image above, there is no option as Embedded Linux XploR Toolchain for RISC-V because this XploR Studio does not contain Embedded Linux toolchain.\nTo use this toolchain, please install Embedded Linux toolchain blueprint first. There are 4 different blueprints:\nRISC-V Embedded Linux toolchain 32-bit: riscv32-xplor-linux RISC-V Embedded Linux toolchain 32-bit (Double): riscv32-xplord-linux RISC-V Embedded Linux toolchain 64-bit: riscv64-xplor-linux RISC-V Embedded Linux toolchain 64-bit (Double): riscv64-xplord-linux Each blueprint can be downloaded separately depending on the purpose.\nPlease refer to Guidelines for more information.\nAfter installation and restarting the IDE, you can see the creating-project widget like:\nOn Ubuntu, LLVM Embedded Linux toolchain is packaged inside the Embedded Linux toolchain that supports Double extension (riscv32-xplord-linux and riscv64-xplord-linux). LLVM Embedded Linux toolchain has not been supported on Windows yet.\nFor using LLVM Embedded Linux toolchain, please make sure that the RISC-V Embedded Linux toolchain (Double) are installed and select LLVM Embedded Linux Toolchain for RISC-V in the Toolchains box:\nUpdate build settings The build setting is the same as the quick-start project’s settings. Please refer to Update build settings for more information.\nPlease make sure that the toolchain used to build is installed, otherwise errors as in the following image will appear:\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nTo run and debug Embedded Linux applications with QEMU emulator, please install the rootfs blueprint and qemu blueprint (if QEMU is not installed). Please refer to Guidelines for more information.\nRunning and Debugging project with QEMU emulator Run project on QEMU emulator XploR Studio offers several ways to debug applications:\nSelect the project entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.\nOn the Run Configuration Dialog, create new run configuration by double clicking on RISC-V Runging:\nOn the Main tab, choose option QEMU in Virtual Platforms. Click Apply then Click Debug.\nSelect the desired project in the Project Explorer window, then click Run As/RISC-V application with QEMU\nRight-click on current project \u003e Run As \u003e RISV-C application with QEMU\nAfter selecting Run As RISC-V application with QEMU, Console view will print as below image:\nDebug project on QEMU Emulator XploR Studio offers several ways to debug applications:\nSelect the project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.\nOn the Debug Configuration Dialog, create new configuration by double clicking on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then Click Debug.\nSelect the desired project in the Project Explorer window, then click Debug As/RISC-V application with QEMU\nRight-click on current project \u003e Debug As \u003e RISV-C application with QEMU\nAfter selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"Embedded Linux hello world projects examples","excerpt":"Embedded Linux hello world projects examples","ref":"/docs/examples/embedded-linux/helloworld/","tags":"","title":"Hello World"},{"body":"This chapter covers the basics of Linux Kernel projects including creating and debugging a static Kernel.\nNote:\nTo build, run and debug Kernel Debugging applications with QEMU emulator, please install the xplor-studio-kernel blueprint first. Please refer to Guidelines for more information. In this release, Debugging Kernel feature is only available on Ubuntu. Create a new project Select “File \u003e New \u003e C/C++ Project”, choose Linux Kernel Project and Next.\nEnter the Project name and select Embedded Linux XploR Toolchain for RISC-V in the Toolchains box, then click Next.\nSelect Kernel Source Path then click Finish.\nUpdate build settings With build settings, users can switch from 32 bits to 64 bits as well as different floating point ABI options (except Single Precision). The kernels are specified via those options.\nPlease refer to the below table to select the correct options for each target.\nPlatform Core Architecture Floating Point QEMU RISC-V emulator RV32 None QEMU RISC-V emulator RV32 RVFD QEMU RISC-V emulator RV64 None QEMU RISC-V emulator RV64 RVFD Build project Warning: The Static Kernel project does not need to be built because the XploR Studio uses a pre-build kernel image for debugging.\nDebugging the kernel with QEMU emulator Note: Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected. Please refer to Section 2: Update build settings\nThere are two ways to debug the kernel:\nOn the Project explorer, right-click on the project name and select Debug as \u003e RISC-V Kernel application with QEMU. Create the new RISC-V Kernel Debugging configurations: Right-click on the project name then select Debug As \u003e Debug Configurations. Double-click on RISC-V Kernel Debugging, then click Debug to start the Kernel debugging session.\nWhen starting kernel debugging, the kernel is suspended in the start_kernel function and the terminal/console pauses at kernel booting.\nTo debug an embedded Linux applications, the kernel should be booted completely.\nNote: To switch arch between 32-bit and 64-bit, users should remove the old Debug Kernel Configuration and create a new one to change the kernel (vmlinux). Or users can replace vmlinux manually at: ~/.xplor/blueprints/rootfs-debug/rv***_debugkernel/vmlinux\n","categories":"","description":"Embedded Linux projects examples","excerpt":"Embedded Linux projects examples","ref":"/docs/examples/embedded-linux/debug-kernel/","tags":"","title":"Kernel debug"},{"body":"","categories":"","description":"Zephyr OS projects examples","excerpt":"Zephyr OS projects examples","ref":"/docs/examples/zephyrrtos/","tags":"","title":"Zephyr OS"},{"body":"This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called “HelloWorld.” This application prints Hello world text and runs a simple for-loop for a simple demonstration. The application can also be built and run on a QEMU emulator.\nNote: To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the xplor-studio-zephyr blueprint first. Please refer to Guidelines for more information.\nCreate a new project The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting “File - New - C/C++ Project”, choose Zephyr application and Next.\nSelect Toolchains: RISC-V Custom Toolchains and enter the Project name Then click Next.\nEnter Author then click Next\nSelect Zephyr Base Path then click Next:\nSelect target board configuration:\nSelect toolchain path then click Next and Finish.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nIf there is any problem related to the CMake, such as:\nPlease make sure that the version of CMake is 3.20 or higher.\nAfter building successfully, you will see the messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU Emulator Right-click on current project \u003e Run As \u003e RISV-C application with QEMU The output of the application is shown in the Console view:\nDebug project on QEMU Emulator The XploR Studio offers several ways to debug applications:\nSelect the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Helloworld project entry in the Project Explorer then clicking Debug As/RISC-V application with QEMU Right-click on current project \u003e Debug As \u003e RISV-C application with QEMU After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"Zephyr OS projects hello world examples","excerpt":"Zephyr OS projects hello world examples","ref":"/docs/examples/zephyrrtos/zephyrhelloworld/","tags":"","title":"Hello World"},{"body":"This chapter covers the basics of the Zephyr RTOS Synchronization sample application including creating, building, running, and debugging steps. A simple application that demonstrates basic sanity of the kernel. Two threads (A and B) take turns printing a greeting message to the console and use sleep requests and semaphores to control the rate at which messages are generated. This application can also be built and run on QEMU emulator.\nNote: To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the xplor-studio-zephyr blueprint first. Please refer to Guidelines for more information.\nCreate a new project Select “File - New - C/C++ Project” choose Zephyr application then Next.\nSelect Toolchains: RISC-V Custom Toolchains and enter the Project name. Then click Next.\nEnter Author then click Next button.\nThen click the Finish button. Select Zephyr Base Path then click Next:\nSelect target board configuration:\nSelect toolchain path then click Next and Finish.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nIf there is any problem related to the CMake, such as:\nPlease make sure that the version of CMake is 3.20 or higher.\nAfter building successfully, you will see the messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU Emulator Right-click on current project \u003e Run As \u003e RISV-C application with QEMU The output of the application is shown in the Console view:\nDebug project on QEMU Emulator The XploR Studio offers several ways to debug applications:\nSelect the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Helloworld project entry in the Project Explorer then clicking Debug As/RISC-V application with QEMU Right-click on current project \u003e Debug As \u003e RISV-C application with QEMU After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\n","categories":"","description":"Zephyr OS projects synchronization examples","excerpt":"Zephyr OS projects synchronization examples","ref":"/docs/examples/zephyrrtos/zephyrsynchronization/","tags":"","title":"Synchronization"},{"body":"This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called Mutex. This application creates two threads that modify a shared resource while using a mutex lock for synchronization. The application can also be built and run on a QEMU emulator.\nNote: To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the xplor-studio-zephyr blueprint first. Please refer to Guidelines for more information.\nCreate a new project The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting “File - New - C/C++ Project”, choose Zephyr application and Next.\nSelect Toolchains: RISC-V Custom Toolchains and enter the Project name Then click Next.\nEnter Author then click Next\nSelect Zephyr Base Path then click Next:\nSelect target board configuration:\nSelect toolchain path then click Next and Finish.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nIf there is any problem related to the CMake, such as:\nPlease make sure that the version of CMake is 3.20 or higher.\nAfter building successfully, you will see the messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU Emulator Right-click on current project \u003e Run As \u003e RISV-C application with QEMU The output of the application is shown in the Console view:\nDebug project on QEMU Emulator The XploR Studio offers several ways to debug applications:\nSelect the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Helloworld project entry in the Project Explorer then clicking Debug As/RISC-V application with QEMU Right-click on current project \u003e Debug As \u003e RISV-C application with QEMU After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\nBesides, users can see more about Mutex object:\n","categories":"","description":"Zephyr OS projects mutex examples","excerpt":"Zephyr OS projects mutex examples","ref":"/docs/examples/zephyrrtos/zephyrmutex/","tags":"","title":"Mutex"},{"body":"This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called Semaphore. This application uses a semaphore to control access to a shared resource and prints a message indicating whether it was successful or not in taking the semaphore. The application can also be built and run on a QEMU emulator.\nNote: To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the xplor-studio-zephyr blueprint first. Please refer to Guidelines for more information.\nCreate a new project The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting “File - New - C/C++ Project”, choose Zephyr application and Next.\nSelect Toolchains: RISC-V Custom Toolchains and enter the Project name Then click Next.\nEnter Author then click Next\nSelect Zephyr Base Path then click Next:\nSelect target board configuration:\nSelect toolchain path then click Next and Finish.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nIf there is any problem related to the CMake, such as:\nPlease make sure that the version of CMake is 3.20 or higher.\nAfter building successfully, you will see the messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU Emulator Right-click on current project \u003e Run As \u003e RISV-C application with QEMU The output of the application is shown in the Console view:\nDebug project on QEMU Emulator The XploR Studio offers several ways to debug applications:\nSelect the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Helloworld project entry in the Project Explorer then clicking Debug As/RISC-V application with QEMU Right-click on current project \u003e Debug As \u003e RISV-C application with QEMU After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\nBesides, users can see more about Semaphore objects:\n","categories":"","description":"Zephyr OS projects semaphore examples","excerpt":"Zephyr OS projects semaphore examples","ref":"/docs/examples/zephyrrtos/zephyrsemaphore/","tags":"","title":"Semaphore"},{"body":"This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called Message Queue. This application uses message queues to allow communication between two threads, where one thread sends integers and characters to the queues and another thread receives the messages and prints them. The application can also be built and run on a QEMU emulator.\nNote: To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the xplor-studio-zephyr blueprint first. Please refer to Guidelines for more information.\nCreate a new project The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting “File - New - C/C++ Project”, choose Zephyr application and Next.\nSelect Toolchains: RISC-V Custom Toolchains and enter the Project name Then click Next.\nEnter Author then click Next\nSelect Zephyr Base Path then click Next:\nSelect target board configuration:\nSelect toolchain path then click Next and Finish.\nBuild project The build step is the same as the quick-start project’s step. Please refer to Build project for more information.\nIf there is any problem related to the CMake, such as:\nPlease make sure that the version of CMake is 3.20 or higher.\nAfter building successfully, you will see the messages in the Console view:\nRunning and Debugging project with QEMU emulator Run project on QEMU Emulator Right-click on current project \u003e Run As \u003e RISV-C application with QEMU The output of the application is shown in the Console view:\nDebug project on QEMU Emulator The XploR Studio offers several ways to debug applications:\nSelect the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information. In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:\nOn tab Debugger, choose option QEMU in Virtual Platforms. Click Apply then click Debug.\nSelect the Helloworld project entry in the Project Explorer then clicking Debug As/RISC-V application with QEMU Right-click on current project \u003e Debug As \u003e RISV-C application with QEMU After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.\nOther functions of debugging (such as Resume, Step Into, Step Over, Step Return, Terminate, …) are the same as the quick-start project’s. Please refer to Running and Debugging project with QEMU emulator for more information.\nBesides, users can see more about Mesage Queue objects:\n","categories":"","description":"Zephyr OS projects message queue examples","excerpt":"Zephyr OS projects message queue examples","ref":"/docs/examples/zephyrrtos/zephyrmsgq/","tags":"","title":"Message Queue"},{"body":"","categories":"","description":"Advance features","excerpt":"Advance features","ref":"/docs/views/","tags":"","title":"Advance features"},{"body":"Console View The Console view displays program output as well as output from the build tools. The Console view is connected to stdin, stdout, and stderr of the compilation process. An example of Console view output:\nThe Console view only represents programs that are running on the host, such as compilers and linkers. Programs running on an external target will display their output in other views, such as a terminal emulator window, depending on the type of target.\nRegister View The register view helps developers examine RISC-V registers values during debug sessions. This is an example of Register view:\nProblems View If any errors or warnings are encountered during the compilation process will be shown on the Problem View\nExecutables View The Executable view lists down all executable output built using XploR Studio, for example:\nTerminal View The Terminal View helps users connect to and interact with the console of different targets:\nUsers can use this Terminal view to open the shell/bash console of the host machine, remote connection, or serial connection to the target platform. For example, with a serial terminal, users can specify additional parameters such as which device to connect, baud rate, and similar.\nPeripheral Registers View In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals’ status such as control register values, and data register values via the Peripheral Registers View. The Peripherals Registers View lists all peripherals available in the device hardware description .SVD file provided by the silicon vendor. To active Peripheral registers view, select Window \u003e Preferences.\nThen select C/C++ \u003e Debug section Click Peripheral Registers Page. On this page:\nArchitecture: Select RISC-V Vendor: Select QEMU Platform: Select Spike or E31mc or E31 The peripheral registers will be listed on the right-hand side of the page:\nUsers can select registers or all registers to check, then click Apply and Close button.\nThe Peripheral register views will show all registers and their status.\nAdding Peripheral files to Peripheral Registers View Create a new folder within the XPLOR_HOME directory.\nInclude the .metadata file in the newly created folder, using the following sample content:\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c?eclipse version=\"3.4\"?\u003e \u003cplugin\u003e \u003cextension point=\"xplor.studio.regview.peripheralData\"\u003e \u003cperipheral architecture=\"RISCV\"\u003e \u003c!-- architecture name --\u003e \u003cvendor name=\"FPGA\"\u003e \u003c!-- vendor name --\u003e \u003cchip id=\"neorv32\" path=\"/path_to_svd_file/neorv32.xml\"\u003e \u003c!-- The file path must exist --\u003e \u003c/chip\u003e \u003c/vendor\u003e \u003c/peripheral\u003e \u003c/extension\u003e \u003c/plugin\u003e Proceed to restart the XploR Studio application. After the restart, navigate to the Peripheral Registers Page to access the newly available Architecture/Vendor/Platform options. Debugger console View The Debugger Console shows gdb debug information. The is an example of Console view output:\nNote: If any of view disappears, users can always restore by clicking *Window \u003e Show View/NAME_OF_VIEW.\n","categories":"","description":"Project views and perspectives","excerpt":"Project views and perspectives","ref":"/docs/views/project-views/","tags":"","title":"Project / Debug views"},{"body":"During the FreeRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Task, Queue, Heap, and Timer. The following sessions describe how XploR Studio helps to check this information.\nNote:\nTo open FreeRTOS Objects View, select Windows \u003e Show View \u003e Others. In Show View wizard, select FreeRTOS Object Views The FreeRTOS object views only contain information when user debugs a FreeRTOS project Depending on the FreeRTOS application, not all FreeRTOS objects will display valid information. For example, if the application does not utilize a Timer object, XploR Studio will not display any useful information on FreeRTOS Timer view. The display of FreeRTOS views is dependent on the xplor-studio-freertos blueprint. Therefore, if you uninstall this blueprint, please close these views to prevent any errors. FreeRTOS Task View The FreeRTOS task view helps developers examine tasks during debug sessions. Each object is identified by its ID, name, address, state, task state, stack usage, event object, runtime, and priority.\nFreeRTOS Queue View The FreeRTOS Queue view helps developers examine queues during debug sessions. Each object is identified by its type, ID, name, address, length, size, and state of TX and RX.\nFreeRTOS Timer View The FreeRTOS Timer view helps developers examine timers during debug sessions. Each object is identified by its ID, name, status, callback functions, and similar.\nFreeRTOS Heap View The FreeRTOS Heap view helps developers examine heaps during debug sessions. Each object is identified by its ID, address, usage information, and similar.\n","categories":"","description":"FreeRTOS views","excerpt":"FreeRTOS views","ref":"/docs/views/freertos/","tags":"","title":"FreeRTOS views"},{"body":"During the ZephyrRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Thread, Mutex, Semaphore, and MessageQueue. The following sessions describe how XploR Studio helps to check this information.\nNote:\nTo open ZephyrRTOS Objects View, select Windows \u003e Show View \u003e Other…. In Show View wizard, select ZephyrRTOS Object Views The ZephyrRTOS object views only contain information when user debugs a ZephyrRTOS project Depending on the ZephyrRTOS application, not all ZephyrRTOS objects will display valid information. For example, if the application does not utilize a Mutex object, XploR Studio will not display any useful information on ZephyrRTOS Mutex view. The display of ZephyrRTOS views is dependent on the xplor-studio-zephyr blueprint. Therefore, if you uninstall this blueprint, please close these views to prevent any errors. ZephyrRTOS Thread View The ZephyrRTOS Thread view helps developers examine threads during debug sessions. Each object is identified by its ID, Name, Handle, Priority, Thread State and Thread Usage.\nZephyrRTOS Mutex View The ZephyrRTOS Mutex view helps developers examine mutexes during debug sessions. Each object is identified by its ID, Handle, Mutex Owner, Owner Priority and Lock Count.\nZephyrRTOS Semaphore View The ZephyrRTOS Timer view helps developers examine semaphores during debug sessions. Each object is identified by its ID, Handle, Semaphore Count and Semaphore Limit.\nZephyrRTOS Heap View The ZephyrRTOS Heap view helps developers examine message queues during debug sessions. Each object is identified by its ID, Handle, Message Size, Max Messages, Read Pointer, Write Pointer, Used Messages and Flags.\n","categories":"","description":"Zephyr OS views","excerpt":"Zephyr OS views","ref":"/docs/views/zephyros/","tags":"","title":"Zephyr OS views"},{"body":"","categories":"","description":"Join us","excerpt":"Join us","ref":"/docs/contributing/","tags":"","title":"Contributing"},{"body":"Docsy, and Docsy-based project websites (including those at the CNCF), have been happily using the Bootstrap CSS framework from Docsy’s inception. In January of this year, Bootstrap 4 (the version used by Docsy for the past few years) reached its end of life. While we, the Docsy steering committee, have been eager to benefit from the Bootstrap 5 improvements, we were concerned about the magnitude of the migration effort, as well as the impact on downstream projects. Because of this, the migration was delayed for as long as possible. In December of 2022, when Bootstrap 4 stopped receiving critical upgrades, we declared Docsy to be in a feature freeze, and focused our maintenance efforts on the Bootstrap 5 migration.\nThis post is about Docsy’s migration journey to Bootstrap 5.21: it highlights the most notable steps, with a special attention given to the most surprising aspects of the migration. Our hope is that this post will be useful to others upgrading to Bootstrap 5, in particular, for downstream Docsy projects — though we plan a separate post specifically for downstream projects.\nTL;DR Eager to dive into the Bootstrap migration of your project? Besides carefully stepping through the Bootstrap migration page, watch out for the following:\nThe media-breakpoint-down() mixin’s breakpoint argument needs to be shifted. Grid .row and .col style changes are breaking. Import ordering of Bootstrap Sass files: import functions first. For details, read on.\nTechnical details If you are well accustomed to upgrading Docsy (and its dependencies) by reading changelogs and systematically stepping through commits, then this section provides a summary of some notable changes. In it, I describe technical aspects of the migration that surprised me, either because they required particular care in fixing, were undocumented, and/or insufficiently explained in the Bootstrap migration page.\nMixin media-breakpoint-down() argument shift The breakpoint argument to the media-breakpoint-down() mixin needs to be bumped up to the next higher breakpoint. Thankfully, a similar change isn’t required of media-breakpoint-up(). This change will be required of Docsy-based projects. If you forget to make this non-obviously breaking layout change, your project’s responsive layouts will likely start misbehaving in apparently strange ways.\nFor details and an example, see:\nSass section of the migration page [BSv5] Adjust media-breakpoint-down() argument · Docsy PR #1367 Grid .row and .col style changes are breaking The main issue addressed in this section is not, at the time of writing, documented in the Bootstrap 5 migration page.\nThere seems to be an assumption, in Bootstrap 5, that the immediate child of a .row should be a .col. I don’t know how strict an assumption this is. While I have searched for an explicit statement of this assumption in the Bootstrap documentation, I haven’t found one yet — if you are aware of such a statement, let us know!\nThis assumption wasn’t apparent nor was it enforced in Bootstrap 4, consequently, some of Docsy’s layouts failed to respect it. In most cases, fixing violations consisted of simply wrapping a .row’s child element in a .col, but the Docsy footer required a couple of iterations to get right.\nMy first footer adjustment reset flex-shrink to its default value (PR #1373), but that turned out to be unnecessary once I better understood how to appropriately handle row margins (PR #1523) — rows have negative margins, as I recently learned, which is something to keep in mind.\nThe following Bootstrap 5 .col style changes influenced Docsy-specific style updates and might impact Docsy-based projects as well:\nposition is reverted to its default value of static from relative flex-shrink default value of 1 is overridden and set to 0 References:\n[BSv5] Row/col formatting breaks Docsy components #1466, in particular [BSv5] Footer fixes: reset flex-shrink, and more· Docsy PR #1373 [BSv5] Footer: drop flex-shrink tweak + other adjustments · Docsy PR #1523 Why are all col classes ‘position: relative’? · Bootstrap v4 issue #25254 Why flex-shrink 0 for all columns? · Bootstrap discussion #37951 Import ordering of Bootstrap Sass files: functions first Projects can import Bootstrap Sass sources all in one go (using bootstrap.scss), or selectively import any one of the 40+ Bootstrap parts, layouts, and components that they need. Regardless of the import strategy chosen, due to a Sass map initialization limitation, Bootstrap-client projects need to perform (emphasis mine):\n… variable customizations … after @import \"functions\", but before \u003e @import \"variables\" and the rest of [the Bootstrap] import stack.\nFor details, see New _maps.scss from the migration page, and Importing from Bootstrap’s Sass customization documentation.\nHaving to maintain a custom list of a few dozen imports (even if it’s relatively stable) feels like a maintenance overhead that we should avoid if we can, so in Docsy’s main.scss, we @import “functions” before Docsy- and project-specific variable overrides, and then we import the full Bootstrap suite of SCSS. This results in _functions.scss being imported twice, but according to the Sass @import documentation:\nIf the same stylesheet is imported more than once, it will be evaluated again each time. If it just defines functions and mixins, this usually isn’t a big deal, but if it contains style rules they’ll be compiled to CSS more than once.\nThe _functions.scss file only contains function definitions, so we should be ok. This seems like a small cost to pay in contrast to the alternative strategy of inlining the 40+ imports from bootstrap.scss.\nReferences:\n[BSv5] Fix SCSS functions import issue … · Docsy PR #1388 New _maps.scss from the migration page Importing from Bootstrap’s Sass customization documentation Systematic and stepwise migration If you’ve glanced at the Bootstrap 5 migration page, you will see that there are a lot of changes to address while migrating. To ensure that we didn’t miss any, we systematically walked through the migration guide, and tracked the status of each change through Docsy issue #470. Each relevant migration page section is represented in the issue’s opening comment: we either noted that a migration-page section is irrelevant for Docsy, or added the section to the tracking issue, and list the PRs containing corresponding Docsy-specific changes. If you’re curious to see how that worked out, see Upgrade to Bootstrap 5.2 · Docsy issue #470.\nFirst Bootstrap 5 release of Docsy A first Bootstrap 5 release of Docsy is planned for the start of June, since most aspects of the migration have been completed. Some updates have been postponed, most notably support for right-to-left (RTL) text. For the complete list of followup items, see BSv5.2 upgrade followup · Docsy issue #1510.\nAs was mentioned earlier, this first release will be in support of Bootstrap 5.2. We plan a separate migration effort to bring Docsy up to Bootstrap 5.3, in particular to benefit from new color modes. You can track our progress through Docsy issue #1528.\nMigrating Docsy-based projects This section contains some preliminary and general guidance for downstream projects. We are planning a separate post to cover more migration details.\nBootstrap migration-page walkthrough Each project uses its own specific set of Bootstrap features, so walking through the Bootstrap 5.2 migration page will be advisable for most projects. Of course, one strategy is just to upgrade and see what breaks or no longer works, but only doing that without a more systematic follow-up would be ill-advised for all but the most trivial projects—consider the challenge in detecting and recovering from a missed change to a ​​media-breakpoint-down() argument, as discussed earlier.\nDocsy-specific changes During the migration effort we seized the opportunity to do some long overdue Docsy house cleaning. For details concerning both breaking and non-breaking Docsy-specific changes, consult the changelog. In particular, one non-breaking but important change to be aware of is: [BSv5] Docsy variables cleanup … PR #1462.\nGive it a try! To get a first and quick impression of the impact of the upgrade on your project, it can be informative to simply upgrade Docsy and see what breaks. This is what the Docsy team did with Bootstrap 5. Only one change actually broke the build of the Docsy User Guide: the rename of the color-yiq() function.\nAfter such a smoke test, we recommend systematically walking through the Bootstrap migration page as described above, and the Docsy changelog. I used this approach for opentelemetry.io, which was the first Docsy-based project to be upgraded with a pre-release of Bootstrap-5-based Docsy. The upgrade went quite smoothly. The main pain point of the OTel website was upgrading to Bootstrap 5 forms; an aspect of the migration that didn’t apply to Docsy since Docsy uses only the most trivial of forms.\nWe’ll have more to share about the OTel migration effort as well as general project-specific migration advice in a followup blog post. In the meantime, I hope that you have found parts of this technical article helpful for your own migration efforts.\nCNCF project websites eager to migrate can send questions to the CNCF #techdocs Slack channel. CNCF and other Docsy-based projects can also start a discussion in the Docsy repository. Happy migrating!\nA big thanks to the Docsy Steering Committee and other reviewers who offered feedback on earlier drafts of this post, as well as to all those who contributed to the migration effort.\nA version of this article originally appeared as the CNCF blog post Migrating Docsy to Bootstrap 5 .\nBootstrap 5.3 reached GA on May 30. There will be a separate migration effort to bring Docsy up to Bootstrap 5.3. ↩︎\n","categories":"","description":"An experience report in migrating Docsy from Bootstrap 4 to 5.2, with insights and instructions.\n","excerpt":"An experience report in migrating Docsy from Bootstrap 4 to 5.2, with …","ref":"/blog/2023/bootstrap-5-migration/","tags":"","title":"Migrating to Bootstrap 5.2"},{"body":"Hello It may seem strange to see a “Hello” post from a project that’s several years old, but as Docsy matures as a community-driven project, we thought it was time to (re)introduce ourselves and talk about what’s new with your favorite (we hope) Hugo documentation theme!\nDiscuss amongst yourselves Our Discussions are really hopping lately! Don’t miss our notice of the upcoming deprecation of the Font-Awesome and Bootstrap git submodules or our announcement of our new governance model!\nMilestones, releases, and roadmaps We are planning our first official release of Docsy soon—check out the milestones for 0.2.0. Got a suggestion for the roadmap? Open an issue.\nComing soon: project metrics Starting next month, we’ll publish project metrics here on this blog.\nIntroducing the PSC Docsy now has a Project Steering Committee! The PSC members are @chalin, @LisaFC, @geriom, and @emckean. If you’re interested in serving on the PSC, open an issue and nominate yourself!\nContribute to the blog! Also coming soon: contribution guidelines. Got an idea for a blog post? Open an issue!\n","categories":"","description":"Welcome to the Docsy blog!","excerpt":"Welcome to the Docsy blog!","ref":"/blog/2022/hello/","tags":"","title":"Hello Docsy!"},{"body":" SOC.ONE SOFTWARE LICENSE TERMS\nXploR Studio Version 1.0.1\nThese license terms are an agreement between you and SoC.one Corp. (or based on where you live, one of its affiliates). They apply to the software named above. The terms also apply to any SoC.one services or updates for the software, except to the extent those have different terms.\nIF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE THE RIGHTS BELOW.\nINSTALLATION AND USE RIGHTS. General. You may use any number of copies of the software to develop and test your applications, including deployment within your internal corporate network. Demo use. The uses permitted above include use of the software in demonstrating your applications.\nThird Party Components. The software may include third party components with separate legal notices or governed by other agreements, as may be described in the ThirdPartyNotices file accompanying the software.\nExtensions. The software gives you the option to download other SoC.one and third party software packages from XploR.zone. Those packages are under their own licenses, and not this agreement. SoC.one does not distribute, license or provide any warranties for any of the third party packages. By accessing or using our XploR.zone, you agree to the terms located here\nDATA. Data Collection. The software may collect information about you and your use of the software, and send that to SoC.one. SoC.one may use this information to provide services and improve our products and services. There may also be some features in the software that may enable you and SoC.one to collect data from users of your applications. If you use these features, you must comply with applicable law, including providing appropriate notices to users of your applications together with SoC.one’s privacy statement. Our privacy statement is located at https://xplor.studio/privacy-policy. You can learn more about data collection and use in the help documentation and our privacy statement. Your use of the software operates as your consent to these practices.\nProcessing of Personal Data. To the extent SoC.one is a processor or subprocessor of personal data in connection with the software, SoC.one makes the commitments in the European Union General Data Protection Regulation Terms of the Online Services Terms to all customers effective May 25, 2018, at https://xplor.studio/legal/gdpr.\nUPDATES. The software may periodically check for updates and download and install them for you. You may obtain updates only from SoC.one or authorized sources. SoC.one may need to update your system to provide you with updates. You agree to receive these automatic updates without any additional notice. Updates may not include or support all existing software features, services, or peripheral devices.\nFEEDBACK. If you give feedback about the software to SoC.one, you give to SoC.one, without charge, the right to use, share and commercialize your feedback in any way and for any purpose. You will not give feedback that is subject to a license that requires SoC.one to license its software or documentation to third parties because we include your feedback in them. These rights survive this agreement.\nSCOPE OF LICENSE. This license applies to the XploR Studio product. XploR Studio is based on Eclipse. Source code for Eclipse is available at https://git.eclipse.org/c/ under the Eclipse license agreement. The software is licensed, not sold. This agreement only gives you some rights to use the software. SoC.one reserves all other rights. Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this agreement. In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways. You may not reverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the software except and solely to the extent required by third party licensing terms governing use of certain open source components that may be included in the software; remove, minimize, block or modify any notices of SoC.one or its suppliers in the software; use the software in any way that is against the law; share, publish, rent or lease the software, or provide the software as a stand-alone offering for others to use.\nSUPPORT SERVICES. Because this software is “as is,” we may not provide support services for it. ENTIRE AGREEMENT. This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for the software and support services.\nEXPORT RESTRICTIONS. You must comply with all domestic and international export laws and regulations that apply to the software, which include restrictions on destinations, end-users, and end use. For further information on export restrictions, see https://www.SoC.one.com/exporting.\nAPPLICABLE LAW. If you acquired the software in the United States, Washington law applies to interpretation of and claims for breach of this agreement, and the laws of the state where you live apply to all other claims. If you acquired the software in any other country, its laws apply.\nCONSUMER RIGHTS; REGIONAL VARIATIONS. This agreement describes certain legal rights. You may have other rights, including consumer rights, under the laws of your state or country. Separate and apart from your relationship with SoC.one, you may also have rights with respect to the party from which you acquired the software. This agreement does not change those other rights if the laws of your state or country do not permit it to do so. For example, if you acquired the software in one of the below regions, or mandatory country law applies, then the following provisions apply to you:\nAustralia. You have statutory guarantees under the Australian Consumer Law and nothing in this agreement is intended to affect those rights.\nCanada. If you acquired this software in Canada, you may stop receiving updates by turning off the automatic update feature, disconnecting your device from the Internet (if and when you re-connect to the Internet, however, the software will resume checking for and installing updates), or uninstalling the software. The product documentation, if any, may also specify how to turn off updates for your specific device or software.\nGermany and Austria. Warranty. The properly licensed software will perform substantially as described in any SoC.one materials that accompany the software. However, SoC.one gives no contractual guarantee in relation to the licensed software. Limitation of Liability. In case of intentional conduct, gross negligence, claims based on the Product Liability Act, as well as, in case of death or personal or physical injury, SoC.one is liable according to the statutory law. Subject to the foregoing clause (ii), SoC.one will only be liable for slight negligence if SoC.one is in breach of such material contractual obligations, the fulfillment of which facilitate the due performance of this agreement, the breach of which would endanger the purpose of this agreement and the compliance with which a party may constantly trust in (so-called “cardinal obligations”). In other cases of slight negligence, SoC.one will not be liable for slight negligence.\nDISCLAIMER OF WARRANTY. The software is licensed “as-is.” You bear the risk of using it. SoC.one gives no express warranties, guarantees or conditions. To the extent permitted under your local laws, SoC.one excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\nLIMITATION ON AND EXCLUSION OF DAMAGES. You can recover from SoC.one and its suppliers only direct damages up to U.S. $0.05. You cannot recover any other damages, including consequential, lost profits, special, indirect or incidental damages.\nThis limitation applies to (a) anything related to the software, services, content (including code) on third party Internet sites, or third party applications; and (b) claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law.\nIt also applies even if SoC.one knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your state or country may not allow the exclusion or limitation of incidental, consequential or other damages.\n(*) This license agreement derives from the Microsoft Software License Terms for Visual Studio Code\n","categories":"","description":"License agreement for the XploR Studio IDE.","excerpt":"License agreement for the XploR Studio IDE.","ref":"/license/","tags":"","title":"License Agreement (*)"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/contributing/join-us/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/debug-and-trace/trace/","tags":"","title":""},{"body":" About XploR Studio XploR Studio is a suite of software tools and related platforms used to create, debug, and optimize complex systems utilzing multiple instruction-set (ISA) domains and interconnected heterogeneous IP(s).\nRead on to find out more, or visit our documentation to get started!\nWhy would I need an IDE ? XploR Studio has both a command line interface (CLI) and a graphical user interface (GUI) that is currently based on the Eclipse IDE. Developers may want to use the XploR Studio GUI instead of command line for various reasons, including:\nComplete Coverage: XploR GUI offers wizards and templates for creating C/C++ standalone and embedded projects, and supports managed build, deployment, and debugging of projects in different languages such as assembly, C, and C++, and for various processor cores.\nIntegration: XploR GUI integrates with software toolchains, embedded OS(es), and reference hardware and system designs, all packaged as blueprints and made available from XploR.design.\nFast \u0026 convenient: Most users don’t want to spend much time looking at documentations (like this site). XploR GUI is an easy and convenient way to explore and experiment with different embedded designs, as well as to prototype and develop code for new platforms based on emerging ISA such as RISC-V.\nIn many cases, developers may still prefer to use XploR CLI primarily because of their familiarity of with the open source tools included with the XploR CLI tools portforlio (such as the GNU compiler toolchain or debugger). For large and complex designs, XploR CLI also makes it easy for the developers to implement scripting and automation that are more taylored toward their workflow and organization preferences.\nHow does XploR Studio help? When working with complex projects, it can be difficult to select the right ISA (Instruction Set Architecture) and implementation for your hardware design, along with compatible software toolchain, runtime environment, and debugging tools for your development needs. Enter XploR Studio!\nstate \"Requirements \u0026 Architecture\" as Requirements state \"End to end close-loop\\ntesting\" as End_To_End_Testing state \"ISA \u0026 CPU Selection\" as CPU_Selection CPU_Selection: (1) Select different ISA(s) and core\\n\\timplementations (e.g. RISC-V)\\n\\tfrom **XploR.design** state \"Evaluation\\nValidation \u0026 Verification\" as ISA_Evaluation ISA_Evaluation: (3) Evaluate selection on supported\\n\\texecution platforms. state \"Prototyping\" as System_Prototyping System_Prototyping: (2) Customize software examples to\\n\\tmodel your design use-cases,\\n\\tbuild, and run models on platforms. state \"SW \u0026 HW Implementation\" as Implementation Implementation : (4) Develop \u0026 debug software.\\n\\tImplement, test, and verify\\n\\thardward and SoC. Requirements --\u003e CPU_Selection state \"Execution Platform - shift left or right as needed\" as HAPS { state Simulator state FPGAs state Emulators state ASICs } ISA_Evaluation --\u003e Simulator ISA_Evaluation --\u003e FPGAs ISA_Evaluation --\u003e Emulators ISA_Evaluation --\u003e ASICs ISA_Evaluation -u-\u003e CPU_Selection : (3.1) select\\nalternative CPU_Selection -up-\u003e End_To_End_Testing System_Prototyping -up-\u003e End_To_End_Testing Implementation -up-\u003e End_To_End_Testing CPU_Selection -\u003e System_Prototyping : evaluate\\nprototype System_Prototyping --\u003e ISA_Evaluation : (3.0) deploy System_Prototyping -\u003e Implementation : golden\\nmodel(s) Implementation --\u003e ISA_Evaluation : (4.0) deploy XploR family of products and cloud services can help you with:\nQualification Choose microprocessor core(s) and associated IP(s) from compatible implementations of different instruction set architectures (e.g. ARM, RISC-V, ...) for your design from XploR.design blueprints (1). Prototyping Utilize and customize software examples from XploR.design to build and prototype planned features for your design. Alternatively, build your own with available blueprints and software runtime environment to determine the degree of software readiness of the chosen core(s) and IP(s) for your solution (2). Exploration Deploy, test, and verify the functionalities of your prototype on various execution platforms (3.0). If necessary, select another platform blueprint and re-evaluate (3.1). Shift left development Accelerate software design with built-in debug and code managing capabilities of XploR Studio (4). Deploy (4.0) and migrate execution environment from simulation to FPGA(s) and emulators to align with the maturity of the hardware and SoC implementation. Verification Utilize cloud FPGA(s) or emulators for verification to ensure that your implementation of your processor core IP meets functional and performance expectations of the gold model(s) from step (2). Design exploration XploR makes it easy to utilize different processor cores and related IP(s) for your prototyping on FPGA(s) or hardware execution platforms. The ability to characterize various ingredients, be it the processor instruction set architecture (e.g. ARM ISA versus RISC-V ISA), or implementations (e.g. one RISC-V core versus another), XploR gives the designer a suitable environment to evaluate the performance and compatibility of said ingredients.\nBuilt-in integration with common tools XploR is fully integrated with many different common embedded hardware and software tools and ingredients, including:\nGNU: compiler, linker, and command line debugger LLVM: compiler and debugger FPGAs: from AMD and Intel EDA HAPS: hardware-assisted execution and prototyping systems from EDA vendors Debugging: with JTAG, and virtual JTAG Runtime: baremetal, Amazon FreeRTOS, Zephyr OS, and embedded Linux Customize your own You can customize your own design based on blueprints from XploR Design and continue to leverage the power of XploR Studio for your own software development as well as for downstream users and customers of your products.\n","categories":"","description":"","excerpt":" About XploR Studio XploR Studio is a suite of software tools and …","ref":"/about/","tags":"","title":"About XploR Studio"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/community/","tags":"","title":"Community"},{"body":" Contribution Guidelines Contributing to XploR can be a rewarding way to learn, teach, and build your hardware and softwar design skills for emerging open source initiatives such as RISC-V.\nWhy do people contribute to XploR?\nImprove software you use You can start by being users of XploR Studio and blueprints, and share your feedback and experience. If the blueprints are open-source, you may want to look at the source to see if you can patch it yourself. If that’s the case, then contributing the patch back is the best way to ensure that your friends (and yourself when you update to the next release) will be able to benefit from it.\nImprove existing skills Whether it’s coding, user interface design, graphic design, writing, or organizing, if you’re looking for practice, there are many things that you can contribute. Contact us at info@soc.one to learn more.\nMeet people with common interests Welcoming communities keep people coming back for years. Many people form lifelong friendships through their participation in discussion, whether it’s about a specific feature / bugs, or suggestions for general improvement.\nMentors and teach Working with others on a shared project means you’ll have to explain how you do things, as well as ask other people for help. The acts of learning and teaching can be a fulfilling activity for everyone involved.\nGrow your reputation (and a career) By definition, all of your blueprint contributions are yours, which means you get free examples to take anywhere as a demonstration of what you can do.\nLearn people skills XploR platforms offer opportunities to practice leadership and management skills, such as resolving conflicts, organizing teams of people, and prioritizing work.\nBe empowered You don’t have to become a lifelong contributor to enjoy participating in open source. Have you ever seen a typo on a website, and wished someone would fix it? You can do just that.\n","categories":"","description":"","excerpt":" Contribution Guidelines Contributing to XploR can be a rewarding way …","ref":"/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"XploR Studio - The easiest way to create and develop code for SoC designs.\nXploR Studio is a flexible, configurable software environment to enhance the embedded development experience. With a comprehensive suite of tools and capabilities, XploR Studio makes it more efficient and effective for developers to discover, configure, develop, debug, and deploy commercial as well as open-source cores and related IPs on a wide range of execution platforms.\nKey Features Some of of the key features of XploR Studio includes:\nFlexibility and configurability: From IoT, consumer and networking devices, to high performance compute hardware and wireless infrastructure, XploR scales to meet your development needs with blueprints and add-ons from SoC.one, third-parties vendors, and open-source developers.\nPlatforms diversity: XploR Studio works with various blueprints consisting of cores and IP(s) from commercial vendors as well as open-source community to let developers choose the best options for their designs.\nAccessibility: Access XploR Studio from either 64-bit Windows or popular Linux distribution hosts.\nBaremetal readiness: For developers of IoT devices, sensors, and other embedded systems (i.e. baremetal), XploR Studio works out of the box with GNU or LLVM toolchains.\nComprehensive runtime coverage: Additional support for popular realtime operating systems such as Amazon FreeRTOS and Zephyr OS, as well as embedded Linux are also included.\nSimulator enabled: XploR Studio seamlessly integrates with simulators QEMU to enable prototyping and early software development ahead of hardware.\nWorks with third-parties tools: XploR Studio and related blueprints are constantly evolving to integrate with additional third-parties debug tools and hardware platforms.\nWhether you’re working on standalone embedded applications, popular RTOSes, or embedded Linux applications, XploR Studio has everything you need leverage open-source and commercial cores, IPs and platforms for your pre and post-silicon development needs.\nReady to get started? Find out how you can use XploR Studio to build, debug, and deploy your first embedded application.\n","categories":"","description":"","excerpt":"XploR Studio - The easiest way to create and develop code for SoC …","ref":"/docs/","tags":"","title":"Welcome to XploR Studio"},{"body":" XploR Studio 2023 Explore, build, and develop your next SoC design XploR Studio IDE works with Windows and most popular Linux distribution hosts (see system requirements). We recommend using xip to download and install XploR as it is the most convenient maintain and upgrade the IDE, as well as to access additional related blueprints.\nInstalling XploR Studio on Linux host # 1) Install xip % curl -L https://raw.githubusercontent.com/xplor-studio/xip/main/get_xip.sh | bash # Alternative, you can also download directly from: # https://github.com/xplor-studio/xip/releases/latest/download/xip # 2) Sign up for an account. Note that you will need to acknowledge your email before the account is activated. % xip signup # 3) Download and install XploR Studio IDE. % xip install xplor-studio-ide # 4) Download and install baremetal GCC blueprint and simulator target. Additional compiler toolchains and runtime options can be downloaded and installed via xip. % xip install xplor-studio-elf Installing XploR Studio on Windows host # 1) Download xip from https://github.com/xplor-studio/xip/releases/latest/download/xip.exe # 2) Add xip to the PATH environment variable # 3) Sign up for an account (from Windows command line). Note that you will need to acknowledge your email before the account is activated. % xip signup # 4) Download and install XploR Studio IDE. % xip install xplor-studio-ide # 5) Download and install baremetal GCC blueprint and simulator target. Additional compiler toolchains and runtime options can be downloaded and installed via xip. % xip install xplor-studio-elf ","categories":"","description":"","excerpt":" XploR Studio 2023 Explore, build, and develop your next SoC design …","ref":"/download/","tags":"","title":"Download"},{"body":" Privacy Policy Scope of this Privacy Statement SoC.one, Inc. and its affiliated companies and subsidiaries (collectively, “SoC.one”) respect your privacy. This Privacy Statement applies to personal data collected by SoC.one through the redhat.com website, and other websites which we operate and on which we post a direct link to this Privacy Statement. For some websites managed by SoC.one affiliates, the affiliate may act as a controller for data collected from the website. This Privacy Statement may not apply to open source project websites sponsored by SoC.one. Such project websites may have their own privacy statements, which we encourage you to review. In certain cases, this Privacy Statement applies to personal data collected by SoC.one when SoC.one makes this Privacy Statement or a link to the Privacy Statement available in a digital communication, paper form or in person (for example when attending an event).\nPlease also note that co-branded websites (websites where SoC.one presents content together with one or more of our business partners) may be governed by additional or different privacy statements. Please refer to the privacy statement on those websites for more information about applicable privacy practices.\nSoC.one’s obligations with respect to personal data that may be held on behalf of customers in connection with cloud services SoC.one provides, such as personal data stored by customers using our OpenShift Online offering, are defined in our agreements with our customers and are not governed by this Privacy Statement.\nAs used in this Privacy Statement, “personal data” means any information that relates to, is capable of being associated with, describes, or could be linked to, an identified or identifiable natural person (‘data subject’). An identifiable natural person is one who can be identified, directly or indirectly, in particular by reference to an identifier such as a name, an identification number, location data, an online identifier or to one or more factors specific to the physical, physiological, genetic, mental, economic, cultural or social identity of that natural person.\nThe Categories of Personal Data We Collect To the extent permitted by applicable law, the categories and types of personal data collected directly from you may include, without limitation:\nContact information, including identifiers: Information used to communicate with you and verify your identity, such as first and last name, title, company name, email address, telephone number, and postal address; Account and commercial information: Information that SoC.one maintains in association with your account, such as your account number, username/user ID, password, payment information, purchase records, information about your use of the product or service, information about your registration or participation in a class, exam, certification, training, webcast or other event, your preferred language and other preferences, credit and billing status and support inquiries; Professional or employment-related information: Information contained in your job inquiries or applications, such as resume, cover letter, age, education, professional history and contact details; Internet or other similar network activity: Information collected when you visit a website, such as IP address, browsing history, information on your interaction with the website, browser type and language, operating system, location, date and time; Location information: Information about your physical location, such as if you provide your postal address or based on your IP address if you visit a website; and Inferences: Information drawn from the personal data collected above, such as what topics you may be interested in based on the areas of the website you visit or what products you may be interested in based on purchase records. SoC.one generally does not collect sensitive personal data, which is data such as your religious or philosophical beliefs, racial or ethnic origin, health or medical information (other than for the purpose of responding to an accommodation request for an event), genetic or biometric data, bank account information (other than for the purpose of processing your order) or other similar sensitive personal data as such term is defined under applicable law. If SoC.one reasonably needs to collect any sensitive personal data from you, SoC.one will obtain your consent for the collection of such personal data as may be required under applicable law. For California consumers, please see the California Supplemental Privacy Statement to review the California required disclosures on sensitive personal information.\nHow we collect personal data (sources of data) SoC.one collects personal data directly from you and from other categories of sources as described in more detail below. The categories of personal data collected directly from you by SoC.one include all of the categories identified above in “The categories of personal data we collect” section. SoC.one collects personal data directly from you when you interact with us through our websites, including, without limitation, when you:\nCreate a user account (individual or corporate); Make online purchases or register products; Request support; Register for or participate in a class, exam, certification, training, webcast or other event; Request information or materials (e.g., whitepapers); Participate in surveys or evaluations; Participate in promotions, contests, or giveaways; Apply for employment; Submit questions or comments; or Submit content or posts on our customer portal pages or other interactive webpages. Personal data we collect online may also be combined with personal data you provide to us through offline channels such as through a call center, during an interview or in conjunction with a SoC.one event you attend.\nWe may also collect information indirectly from you relating to your use of our websites and response to our emails through the use of various technology. The categories of personal data collected in this manner are what we refer to above as Internet or other similar network activity and inferences. Collecting information in this manner allows us to analyze the effectiveness of our websites and our marketing efforts, personalize your experience and improve our interactions with you. For more information about the technology we employ for these purposes, see the “cookies and other technology” section below.\nWe may also supplement the personal data we collect from you with additional personal data we receive from third parties, such as your employer, our customers, and our business partners where you purchase any of our products or services through such business partners. The categories of personal data we receive from this type of third party includes account and commercial information and professional or employment-related information. We do this to help us improve the overall accuracy of the information and its completeness and to help us better tailor our interactions with you.\nFrom time to time, we may collect contact information through other sources, such as list vendors. When we do so, we ask the vendors to confirm that the information was legally acquired by the third party and that we have the right to obtain it from them and use it.\nHow we use (process) your personal data SoC.one may use personal data we collect about you to:\nIdentify and Authenticate You. We use your personal data to verify your identity when you access and use our services and to ensure the security of your personal data. This includes your creation of an account that is associated with your personal data. The personal data that may be collected and processed for this purpose includes: name, title, company name, email address, telephone number, postal address, account number, username/user ID, password, preferred language and preferences. We process this information in order to comply with our contractual obligations to you. In other cases, it is in our legitimate business interests to be able to identify and authenticate you.\nFulfill Your Requests. if you request something from SoC.one, such as a product or service, a call back, a newsletter subscription, or specific marketing or other materials, we use the personal data you provide to respond to your request. We or our representatives may also contact you as part of customer satisfaction surveys or for market research purposes. Where required by applicable law, we will obtain your consent before sending marketing messages. The personal data that may be collected and processed for this purpose includes: name, title, company name, email address, telephone number, postal address, account number, username/user ID, payment information, purchase records, information about your use of the product or service, information about your registration or participation in an event, your preferred language and other preferences, credit and billing status, and support inquiries. We process this information in order to comply with our contractual obligations to you when responding to your requests. In other cases it is in our legitimate business interests to be able to provide customers and prospective customers with information, goods, or services they request.\nProvide You with Information About Our Products, Services and Events. SoC.one may use your personal data to notify you about product and service offerings as well as events that we believe may be of interest to you. SoC.one also may use your personal data to respond directly to your requests for information, including registrations for newsletters or other specific requests. The personal data that may be collected and processed for this purpose includes: name, title, company name, email address, telephone number, postal address, account number, username/user ID, payment information, purchase records, information about your use of the product or service, information about your registration or participation in an event, your language and other preferences, credit and billing status, and support inquiries and location information and inferences. It is in our legitimate business interests to be able to provide customers, prospective customers, and the public with information about our products, services, and events.\nProvide Support and Customer Service. We use your personal data to provide support for products or services you have obtained from us and answer other questions. In the course of providing technical support to you, we may sometimes have incidental access to data that you have provided to us or data that is located on your systems. This data may contain information about you, or your organization’s business, employees, customers, partners, or suppliers. This Privacy Statement does not govern our access to or handling of this information. The conditions regarding the handling and processing of that data is covered by the applicable agreement between you and SoC.one, such as our Enterprise Agreement.\nThe personal data that may be collected and processed for this purpose includes: name, title, company name, email address, telephone number, postal address, account number, username/user ID, payment information, purchase records, information about your use of the product or service, information about your registration or participation in an event, your language and other preferences, credit and billing status, and support inquiries. We process this information in order to comply with our contractual obligations to you.\nProcess Your Job Application. When you apply for a position at SoC.one, we use the personal data you provide for the purpose of assessing your application, considering you for future positions and carrying out human resources functions in accordance with applicable law. SoC.one will disclose the personal data you supply during the application process to internal human resources professionals as well as professionals in our business functions who are participating in the application and interview process.\nThe personal data that may be collected, disclosed, and/or processed for this purpose includes: name, title, company name, email address, telephone number, postal address, your preferred language and other preferences, resume, cover letter, age, education, professional history and contact details. It is in our legitimate business interests to be able to review the qualifications of prospective employees and perform human resources functions with regard to our employees.\nEnhance the Website Experience. When you use our websites and/or respond to our emails, we use the personal data you provide for the purpose of enhancing and customizing your experience on our websites and to deliver content and product and service offerings relevant to your interests, including targeted offers through our website, third-party sites or email (with your consent, where required by applicable law). We may also use this information to help us improve and further develop our websites, products and services.\nThe personal data that may be collected, disclosed and/or processed for this purpose includes: name, title, company name, email address, telephone number, postal address, information about your use of the product or service, information about your registration or participation in an event, your preferred language and other preferences, location information, inferences, information collected when you visit a website, such as IP address, browsing history, information on your interaction with the website, browser type and language, operating system, location, date and time. It is in our legitimate business interests to improve the SoC.one websites, products and services and to enhance our users’ experience with the websites, products and services.\nIf you are in the People’s Republic of China (PRC, for the purpose of this Privacy Statement only, excluding Hong Kong, Macau and Taiwan), the information necessary for entering into or performing a contract with SoC.one may be collected and processed by SoC.one without your express consent or the act of providing the information to SoC.one by you is deemed as consent.\nWe will not use your personal data in a manner that is inconsistent with the purpose of its original collection, unless we have provided you additional notice and you have consented.\nSoC.one will retain your personal data for only as long as is required to fulfill the purposes for which the information is processed or for other valid reasons to retain your personal information (for example to comply with our legal and regulatory obligations, resolve disputes, enforce our agreements and for the establishment, exercise or defense of legal claims).\nHow we disclose your personal data SoC.one discloses personal data for the following business purposes:\nSoC.one may disclose personal data to business partners and service providers in order to support our business operations, such as (but not limited to) fulfilling your orders, following up on requests, providing support and assisting SoC.one with sales, marketing and communication initiatives. These business partners and service providers include distributors, resellers, payment processors, financial service providers and institutions, materials production and shipping companies, postal or government authorities, market intelligence and consulting service providers, and information technology service providers. Business partners and service providers are required by contract to keep the information received on behalf of SoC.one confidential and secure and not use it for any purpose other than the purpose for which it was provided to them.\nThe categories of personal data we may disclose to these third parties include: contact information, including identifiers; account and commercial information; professional or employment-related information; internet or other similar network activity; location information; and inferences.\nSoC.one may disclose personal data as required by law or legal process, such as responding to a duly authorized and lawful request of a police or public authority (including to meet national security or law enforcement requirements), to enforce or protect the rights of SoC.one, when such disclosure is necessary or appropriate to prevent physical harm or financial loss as permitted by applicable law, or in connection with an investigation of suspected or actual illegal activity.\nThe categories of personal data we may disclose to these third parties include: contact information, including identifiers; account and commercial information; professional or employment-related information; internet or other similar network activity; location information; and inferences.\nSoC.one may disclose personal data in the context of a business transaction involving part or all of SoC.one, such as a merger, acquisition, consolidation, or divestiture. Such a transaction may involve the disclosure of personal data to prospective or actual purchasers, or the receipt of it from sellers. It is SoC.one’s practice to seek appropriate protection for information in these types of transactions. SoC.one will inform you of the name and the contact information of the receiver of your personal data. Following such a business transaction, you may contact the entity to which we transferred your personal data with any inquiries concerning the use of that information.\nThe categories of personal data we may disclose to these third parties include: contact information, including identifiers; account and commercial information; professional or employment-related information; internet or other similar network activity; location information; and inferences.\nSoC.one may also disclose personal data to its affiliates and subsidiaries, including its parent company, International Business Machines Corporation (IBM), for the business purposes described above, and transfer personal data to countries where SoC.one and IBM conduct business in accordance with the “Data transfers and Privacy Shield Frameworks” section of this Privacy Statement.\nThe categories of personal data we may disclose to these third parties include: contact information, including identifiers; account and commercial information; professional or employment-related information; internet or other similar network activity; location information; and inferences.\nExcept with respect to SoC.one’s use of certain third party cookies and similar technology which activity may constitute a “sale” under California law, SoC.one does not, and does not have any plans in the future to, “sell” your personal data. For California consumers, please see the California Supplemental Privacy Statement.\nCookies and other technology When you visit our websites we may automatically collect information such as your IP address, browsing history, information on your interaction with the website, browser type and language, operating system, location, date and time (i.e., the category above referred to as Internet or other similar network activity). We may also use cookies to collect information as you navigate our websites. A cookie is a small amount of data that is sent to your browser from a web server and stored on your device. The cookie may be placed by SoC.one or by an authorized third party. We use both session-based and persistent cookies on our websites. Session-based cookies exist during a single session and disappear when you close your browser or turn off your device. Persistent cookies remain on your device even after you close your browser or turn off your device.\nSoC.one categorizes the cookies on our websites into three categories: Required, Functional and Advertising cookies.\nRequired Cookies. Required cookies are necessary to enable the basic features of the website to function. SoC.one uses some cookies that are required for the delivery of services on our websites. Cookies that are required allow us to maintain and improve the safety and security of our websites, authenticate account users, allow you to access your private accounts on our websites, allow you to sign into different portions of our websites with the use of only one login, balance the traffic on our websites, and remember items in your shopping cart. Cookies that are required are not used for marketing purposes.\nFunctional Cookies. Functional cookies allow us to analyze your use of the website to evaluate and improve our performance. SoC.one also uses functional cookies to improve our service to you and personalize your web browsing experience, such as by gaining a better understanding of your interests and requirements regarding our websites, our business or our products and services. Cookies that SoC.one uses to improve our services and your website experience may remember your language and site preferences, invite you to participate in surveys or evaluations, show you when you are logged into our system and allow you to remain logged-in for a period of time, help provide you with support services, remember your login information, and prepopulate forms that you have already completed. SoC.one also uses cookies that collect information about how you use our websites, including which pages you visit, and whether you experience any errors. These cookies use aggregate information to provide statistics on how our websites are used, help us improve our websites by measuring errors, testing different designs on our websites, and helping us measure the traffic on our websites so that we can optimize our content accordingly. These cookies are used to help us improve how our websites work, understand what interests our users, and measure website quality and the effectiveness of our online advertising.\nAdvertising Cookies. Advertising cookies are used to show you ads that are more relevant to you. We may disclose this information to advertisers or use it to better understand your interests. For example, advertising cookies may be used to disclose data to advertisers so that the ads you see are more relevant to you (e.g., targeted ads). In addition, we may use remarketing technology to advertise on other websites you may visit. In doing so, a third party may place or read a unique ad-serving cookie on your device and use technical information about your browser and your activity at a SoC.one website to serve advertisements to you on non-SoC.one websites.\nIf you do not want your information to be stored by cookies, you can manage your cookie preferences by using the options and tools made available to you by either your web browser or SoC.one. You can configure your browser so that it always rejects these cookies or asks you each time whether you want to accept them or not. Your browser documentation includes instructions explaining how to enable, disable or delete cookies at the browser level (usually located within the “Help”, “Tools” or “Edit” facility). If a cookie manager has been implemented by SoC.one on the website you are visiting, the cookie tool will be displayed on the website during your visit (e.g., click the “Cookie Preferences” or similar link at the bottom of the website). You can use the cookie manager to set your cookie preference and to see a list of the cookies used on the SoC.one website. The cookie manager also provides information on the specific cookies used and the classification of the cookie (i.e., Required, Functional or Advertising). Whether you utilize the cookie manager or manage cookies at the individual browser level, please remember that Required cookies will remain and cannot be turned off. Please also understand that choosing to reject cookies may reduce the performance and functionality of our websites.\nSoC.one also uses web beacons alone or in conjunction with cookies to compile information about usage of our websites and interaction with emails from SoC.one (e.g., open rates, click through rates). Web beacons are clear electronic images that can recognize certain types of information on your device, such as cookies, when you viewed a particular website tied to the web beacon, and a description of a website tied to the web beacon. For example, SoC.one may place web beacons in marketing emails that notify SoC.one when you click on a link in the email that directs you to one of our websites. SoC.one uses web beacons to operate and improve our websites and email communications.\nYour rights and choices In accordance with the laws of certain countries, you may have certain rights and choices regarding the personal data we collect and maintain about you, and how we communicate with you.\nWhere the EU General Data Protection Regulation 2016/679 (“GDPR”), the Brazilian General Data Protection Law (“LGPD”), the California Consumer Privacy Act of 2018 (“CCPA”) (as amended by the California Privacy Rights Act of 2020 (“CPRA”)), the Personal Information Protection Law (“PIPL”) of the PRC, the Virginia Consumer Data Protection Act (“VCDPA”) or similar legal requirements apply to the processing of your personal data (collectively, “Data Protection Laws”), especially when you access the website from a country in the European Economic Area (“EEA”), Brazil, the PRC or as a consumer in the states of California or Virginia or in a jurisdiction with similar legal protections, you have the following rights, subject to some limitations, against the respective SoC.one Company responsible for the website you are using:\nThe right to request information about our use of your personal data (e.g., the pieces and categories of personal data we have; the categories of sources, purposes for collection, the third parties to whom we have disclosed personal data, and personal data we have disclosed);\nThe right to review and access your personal data;\nThe right to rectify (correct, update or modify) the personal data we hold about you;\nThe right to erase (e.g., delete), de-identify, anonymize or block your personal data;\nThe right to restrict our use of your personal data;\nThe right to object to our use of, or certain types of disclosures of, your personal data;\nThe right to request the transfer of your personal data we hold about you to a third party;\nThe right to receive your personal data in a usable format and transmit it to a third party (also known as the right of data portability); and\nThe right to lodge a complaint with your local data protection authority.\nIf you would like to exercise any of these rights, you may do so via our Personal Data Request Form. For California consumers, you may also submit requests by calling SoC.one’s U.S. toll free number at 1-800-546-7274. Where the VCDPA applies, and we inform you that we are unable to take action in response to your request to exercise your rights under the VCDPA, you may appeal our decision within a reasonable period of time following our decision. To submit your appeal, please do so via our Personal Data Request Form.\nWhere the applicable Data Protection Laws apply, you also have the right to withdraw any consent you have given to uses of your personal data. If you wish to withdraw consent that you have previously provided to us, you may do so via our Feedback Form. However, the withdrawal of consent will not affect the lawfulness of processing based on consent before its withdrawal.\nWhere the applicable Data Protection Laws do not apply, SoC.one grants you the ability to access, modify, or update some of your personal data online at any time. You may log in and make changes to your information, such as your password, your contact information, your general preferences, and your personalization settings. If necessary, you may also contact us via our Feedback Form and describe the changes you want made to the information you have previously provided. However, note that changing or deleting information necessary for SoC.one to assist with support, services, and purchases may result in a delay or interruption in processing your requests.\nYou will be given an opportunity to tell us whether you would like to receive information, special offers, and promotional materials by email from SoC.one or our business partners when you create a redhat.com account, when you register for a service, when you provide us with your personal data, or when we send you a marketing email. Where required by applicable law, we will obtain adequate consent to provide you with these marketing materials. You also have the ability to opt out of receiving marketing emails from SoC.one at any time without cost by clicking on the relevant link contained in our marketing emails or by contacting us via our Feedback Form. You can also exercise your rights and choices by contacting us as described below under “How to contact us.”\nWhen you exercise your privacy rights, such as those conferred by the applicable Data Protection Laws, you have a right not to receive discriminatory treatment by SoC.one for the exercise of such privacy rights.\nVerification Before responding to a request for information about your personal data, we must verify the request. Verification is important to protect your information and to help confirm that we are responding to a valid request and providing the response to the correct individual. To verify the request we initially ask for at least two (2) or three (3) identifiers, such as name, email address and location. If we have a need to request additional identifiers to reasonably verify your identity, we will contact you and request additional verification. The information we ask to verify your identity may depend on your relationship with us.\nWhen you exercise your privacy rights under the applicable Data Protection Laws, you can designate an authorized agent or representative to make a request on your behalf by providing the authorized agent with written permission to do so and verifying your identity with us as part of the request, or by providing the authorized agent with Power of Attorney pursuant to applicable law (e.g., the California Probate code). We will ask the individual submitting the request to denote that they are an authorized agent or representative. When submitted by an authorized agent or representative, we ask the authorized agent or representative to provide name, email address and a description of the relationship with the individual who is the subject of the request and to certify that the representative has permission to submit the request, and may request proof of the consumer’s written permission.\nSecurity SoC.one intends to protect your personal data. We have implemented appropriate physical, administrative and technical safeguards to help us protect your personal data from unauthorized access, use and disclosure. For example, we encrypt certain personal data such as payment information when we transmit such information over the Internet. We also require that our business partners and service providers protect such information from unauthorized access, use and disclosure.\nSocial media, public forums, and links to other websites SoC.one may provide social media features that enable you to share information with your social networks and interact with SoC.one on various social media websites. Your use of these features may result in the collection or sharing of information about you, depending on the feature. We encourage you to review the privacy policies and settings on the social media websites with which you interact to make sure you understand the information that may be collected, used, and shared by those websites.\nOur websites may make chat rooms, forums, blogs, message boards, and/or news groups available to its users. Remember that your comments and posts become publicly available, and we urge you to exercise discretion when submitting such content.\nOur websites may contain links to other websites. SoC.one does not control and is not responsible for the information collected by websites that can be reached through links from our websites. If you have questions about the data collection procedures of linked websites, please contact the organizations that operate those websites directly.\nChildren’s online privacy SoC.one’s products and services are not directed to children and SoC.one does not knowingly collect online personal data from children under the age of 16. If you are a parent or guardian of a minor under the age of 16 and believe that he or she has disclosed personal data to us, please contact us via our Feedback Form or as described below under “How to contact us.” SoC.one will ensure their personal data is properly processed and disposed of with the consent of their parent or guardian.\nData transfers and Privacy Shield Frameworks SoC.one is a global organization, with legal entities, business processes, and technical systems that operate across borders. SoC.one may transfer your personal data to other SoC.one entities in the United States and elsewhere. The United States and other countries may not have the same data protection laws as the country from which you initially provided the information.\nWhere required by applicable law, we have put in place appropriate safeguards (such as standard contractual clauses approved by the European Commission) in accordance with applicable legal requirements to ensure that your data is adequately protected. When transferring your personal data internationally, SoC.one will protect your personal data as provided in this Privacy Statement and comply with applicable legal requirements as may be in effect from time to time. If you wish to obtain a copy of the relevant safeguards that are in place to protect the international transfer of your personal data, please contact us as described below under “How to contact us.”\nIf you are located in the European Economic Area (“EEA”), the United Kingdom or Switzerland, SoC.one, Inc., and SoC.one Professional Consulting, Inc. have certified to the EU-U.S. and Swiss-U.S. Privacy Shield Frameworks for the transfer of personal data from the EEA, the United Kingdom and Switzerland to the United States, although SoC.one does not rely on such Frameworks as a legal basis for transfers of personal data as described further in our Privacy Shield Privacy Notice. To learn more about the EU-U.S. and Swiss-U.S. Privacy Shield Frameworks and to view our certification, please visit www.privacyshield.gov.\nChanges to this privacy statement SoC.one reserves the right to make corrections, changes or amendments to this Privacy Statement at any time. The revised Privacy Statement will be posted on this website. A notice will be posted on our homepage for 30 days whenever this Privacy Statement is changed in a material way, and the date of last update will be indicated at the top of the Privacy Statement. If you do not refuse the changes in writing within that notice period and you continue to use our websites, we consider that you have read and understand the Privacy Statement as changed, including with respect to personal data provided to us prior to the changes in the Privacy Statement. We encourage you to periodically review this Privacy Statement for any changes or updates. If you would like information related to the previous version of this Privacy Statement and/or a copy of the previous version, please contact us as described below under “How to contact us.”\nHow to contact us We provided this information above in the “Your rights and choices” section, but remember that if you would like to exercise any of your privacy rights, you may do so via our Personal Data Request Form.\nIf you have any questions about SoC.one’s privacy practices or use of your personal data, please feel free to contact us at privacy@soc.one.\n","categories":"","description":"","excerpt":" Privacy Policy Scope of this Privacy Statement SoC.one, Inc. and its …","ref":"/privacy-policy/","tags":"","title":"Privacy Policy"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":" XploR Studio System Development Suite Create, debug, and optimize code for embedded processors in your SoC designs. Learn More Download June 21st 2023 HIEU-BUI: Fix offline search / enable lunr search for site LAP / DONG: Change all references to blueprint(s) registry at registry.soc.one to xplor.design QA: Update this link to include other supported Linux hosts beside Ubuntu. QA: Please check out download link, and the steps described to see if you can successfully run an embedded application. Please note if there’s any documentation or step(s) missing. QA: Check each link for broken link or links that lead to incorrect page. Report them here. Work with blueprints from XploR Design Integrated development A free Eclipse based environment to help you chose the right processor cores and IP(s), and develop software for your designs.\nRead more …\nDebugging Program the embedded target with ICE/JTAG or over ethernet with XploR and use the builtin debugging capabilities to pinpoint hard to find bugs or performance bottlenecks.\nRead more …\nTarget processors Select and deploy common embedded processor core(s) from a growing library of blueprints as starting point for your application.\nRead more …\nHardware platforms Onboard HW/SW designs on off-the-shelf FPGA boards from AMD / Intel, or hardware-assisted execution and verification systems from commercial EDA vendors.\nRead more …\nRTOS and Linux Build applications with embedded Linux, or popular realtime operating systems such as FreeRTOS and Zephyr. Run and debug with full OS awareness.\nRead more …\nCloud native Optionally develop and test code on cloud-native environment for on-demand access to professional EDA prototyping and emulation platforms.\nRead more …\nSee XploR Studio in action! Join the growing number of projects using XploR for their designs and development needs.\nRead more …\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter! Find out about new features and how our users are using XploR Studio\nRead more …\n","categories":"","description":"","excerpt":" XploR Studio System Development Suite Create, debug, and optimize …","ref":"/","tags":"","title":"XploR Studio"}]