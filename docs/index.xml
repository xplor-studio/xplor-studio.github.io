<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio – Welcome to XploR Studio</title><link>/docs/</link><description>Recent content in Welcome to XploR Studio on XploR Studio</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Managed Build</title><link>/docs/configuration/build/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/build/</guid><description>
&lt;p>To configure a project in XploR Studio, right-click on the project and select &lt;strong>Properties&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/configuration/build/1.png" alt="example image">&lt;/p>
&lt;p>The properties for a project include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Resource&lt;/strong>: Defined path variables for project.&lt;/li>
&lt;li>&lt;strong>C/C++ Build&lt;/strong>: Configure project build options including build variables, environment settings, logging, build tools, and more.&lt;/li>
&lt;li>&lt;strong>C/C++ General&lt;/strong>: Customize workspace settings including code analysis, formatting, indexing, language mappings, etc.&lt;/li>
&lt;li>&lt;strong>Project Natures&lt;/strong>: Specify which natures should be assigned to the project (an advanced operation, requires a recent backup).&lt;/li>
&lt;li>&lt;strong>Project References&lt;/strong>: Specify which other projects are referenced by the current project.&lt;/li>
&lt;li>&lt;strong>Run/Debug Settings&lt;/strong>: Manage launch configurations associated with the current resource.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/configuration/build/2.png" alt="example image">&lt;/p>
&lt;h2 id="build-configurations">Build Configurations&lt;/h2>
&lt;p>To configure build settings, select &lt;strong>C/C++ Build &amp;gt; Settings&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/configuration/build/3.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tool Settings&lt;/strong> tab allows you to configure options while building applications, such as setting the target architecture, ABI, tuning, code model, and adding optimization options, libraries and warning options in the assembler, compiler, and linker steps.&lt;/li>
&lt;li>&lt;strong>Build Steps&lt;/strong> tab allows you to add pre-build and post-build commands&lt;/li>
&lt;/ul></description></item><item><title>Docs: Preparing target connection</title><link>/docs/configuration/flash/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/flash/</guid><description>
&lt;p>Prior to running or debugging the application, you must:&lt;/p>
&lt;ol>
&lt;li>Establish a physical connection between the host and target&lt;/li>
&lt;li>Prepare an execution environment on the target, and&lt;/li>
&lt;li>Establish a logical debug channel between the host debugger and execution environment&lt;/li>
&lt;/ol>
&lt;h3 id="physical-target-connection">Physical target connection&lt;/h3>
&lt;p>For most target platform(s) (FPGAs boards), physical target connection is achieved via one of the following means:&lt;/p>
&lt;ul>
&lt;li>Host computer and target platform connected via USB&lt;/li>
&lt;li>Target platform installed as a PCIe device on host computer&lt;/li>
&lt;li>Host computer connected to target via secure VPN (cloud native)&lt;/li>
&lt;/ul>
&lt;p>For most cases, a USB cable is used to connect the host system to the target platform&lt;/p>
&lt;h3 id="preparing-execution-environment">Preparing execution environment&lt;/h3>
&lt;p>A binary image (bitfile) containing the hardware design of the system-on-chip that runs the embedded program will need to be downloaded and programmed on the FPGAs or hardware-assisted verification systems (HAVS) target.&lt;/p>
&lt;p>For ASIC target platforms, no additional preparation is needed.&lt;/p>
&lt;p>To program a bitfile to the specific board, click on the flash icon &lt;img src="/configuration/flash/flashing-icon.png" alt="Image alt" style="display: inline;"> on the toolbar of XploR Studio IDE.&lt;/p>
&lt;p>The &lt;strong>Programming Bitfile&lt;/strong> dialog appears to make it easier to select Bitfiles from different vendors:&lt;/p>
&lt;p>Currently, XploR Studio is supporting 2 different types of programming tools:&lt;/p>
&lt;ul>
&lt;li>Program bitstream file to Intel FPGA Board using Quartus tool. User can download and install Quartus tool from this link &lt;a href="https://www.intel.com/content/www/us/en/collections/products/fpga/software/downloads.html">&lt;strong>Quartus Programmer&lt;/strong>&lt;/a>&lt;/li>
&lt;li>Program bit file to Xilinx FPGA Board using Vivado tool. User can download and install Vivado tool from this link &lt;a href="https://www.xilinx.com/support/download.html">&lt;strong>Vivado Programmer&lt;/strong>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>After installation, please add the paths to these tools to your environment path before using XploR Studio to program bitstream files.&lt;/p>
&lt;p>&lt;img src="/configuration/flash/1.png" alt="example image">&lt;/p>
&lt;p>This image shows the selected Bitfile is &lt;code>de2-115_neorv32.sof&lt;/code>, which is the bitfile for Terrasic DE2-115 FPGA board from Stephan Nolting vendor and the tool used for programming board is &lt;code>quartus_pgm&lt;/code> (Quartus Programmer).&lt;/p>
&lt;p>To program with more bitfiles, install &lt;a href="/docs/features/component-management/component-category/#ip">&lt;span style="color: blue">IP Component&lt;/span>&lt;/a> from different vendors and select the desired bitfile from the list.&lt;/p>
&lt;p>&lt;img src="/configuration/flash/2.png" alt="example image">
Another example shows the selected Bitfile is &lt;code>shakti-secure-iot-no-fpu.bit&lt;/code>, which is the bitfile for Nexys A7 FPGA board from Mingrove Silicon Inc. vendor and the tool used for programming board is &lt;code>vivado&lt;/code> (Vivado Programmer).&lt;/p></description></item><item><title>Docs: Running program</title><link>/docs/configuration/run/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/run/</guid><description>
&lt;p>To Run a project on XploR Studio, right-click on the project and select &lt;strong>Run As &amp;gt; Run Configurations&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The project used in this documentation is &lt;strong>GNU C/C++ Helloworld Embedded Project&lt;/strong> so there are some differences in other projects.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/configuration/run/1.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Running&lt;/strong> to create a new run configuration. In &lt;strong>Main&lt;/strong> tab, you can select the application path, auto-build option and change run configuration:&lt;/p>
&lt;p>&lt;img src="/configuration/run/2.png" alt="example image">&lt;/p></description></item><item><title>Docs: Debugging program</title><link>/docs/configuration/debug/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/debug/</guid><description>
&lt;p>To debug a project on XploR Studio, right-click on the project and select &lt;strong>Debug As &amp;gt; Debug Configurations&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The project used in this documentation is &lt;strong>GNU C/C++ Helloworld Embedded Project&lt;/strong> so there are some differences in other projects.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/configuration/debug/1.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Debugging&lt;/strong> to create a new debug configuration:&lt;/p>
&lt;p>&lt;img src="/configuration/debug/2.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Main&lt;/strong> tab: Specify the executable application and configure auto-build option&lt;/li>
&lt;li>&lt;strong>Debugger&lt;/strong> tab: Specify &lt;em>Platform&lt;/em> (Remote Target/QEMU/Hardware/&amp;hellip;), &lt;em>GDB setup&lt;/em> (GDB commands, GDB options, etc..) and &lt;em>Platform Configuration&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/configuration/debug/3.png" alt="example image">&lt;/p></description></item><item><title>Docs: Embedded development</title><link>/docs/concepts/cross-platform/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/cross-platform/</guid><description>
&lt;p>In embedded or &lt;strong>cross-platform&lt;/strong> development, the compute architecture of the &lt;strong>host development system&lt;/strong> (i.e. &lt;em>hosts&lt;/em>) is different than the the &lt;strong>target execution platform&lt;/strong> (i.e. &lt;em>targets&lt;/em>). Thus, the &lt;strong>target application(s)&lt;/strong> (i.e. &lt;em>programs&lt;/em>) will not be able to run on the host development system.&lt;/p>
&lt;p>The &lt;strong>communication channel&lt;/strong> between the host and target lets the host software (e.g. XploR Studio) program and control the target hardware behavior and program code.&lt;/p>
&lt;p>Because of the inherent architural differences between the hosts and targets, &lt;strong>XploR Studio&lt;/strong> is integrated with different embedded compiler toolchains, operating systems, hardware designs, and debug &amp;amp; monitoring tools, packaged as &lt;strong>components&lt;/strong> and delivered by the IDE to provide a unified experience to create, build, deploy, test and debug designs for developers.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Cross-platform development
state &amp;#34;Host Development System&amp;#34; as hosts
note left of hosts : where XploR IDE runs
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Execution Platforms&amp;#34; as targets
targets : ARM, RISC-V, or others ISA(s)\nrunning baremetal or with an\nembedded OS
note right of targets : where target applications run
targets -u-&amp;gt; hosts
note left on link
acknowledgement to
host from target
end note
hosts --&amp;gt; targets
note left on link
host commands to
program or debug target
end note
&lt;/code>&lt;/pre>&lt;h2 id="embedded-target">Embedded Target&lt;/h2>
&lt;p>In the post-silicon development flow, the &lt;strong>embedded target&lt;/strong> consists of a CPU and associated peripherals (e.g. USB, Ethernet, I2C, &amp;hellip;). The CPU implements and execute code defined by an Instruction Set Architecture (ISA, e.g. x86, ARM, RISC-V). &lt;strong>JTAG&lt;/strong> is commonly the communication channel between the host and target for programming and debugging, as shown below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Post-silicon embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Platform (ASICs)&amp;#34; as targets {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
note bottom of targets : CPU, Memory and Peripherals are\nASIC blocks, not modifable.
state JTAG
note top of JTAG : JTAG used to program target memory\nand control / debug programs on CPU.
hosts -&amp;gt; JTAG
JTAG -&amp;gt; targets
&lt;/code>&lt;/pre>&lt;h2 id="host-software">Host software&lt;/h2>
&lt;p>Some of the most common software components that run on the &lt;em>host computer&lt;/em>.&lt;/p>
&lt;h3 id="ide">IDE&lt;/h3>
&lt;p>XploR Studio has a command line interface as well as a graphical user interface based on the Eclipse IDE. Both are collection of software programs and tools let the developer create programs for the embedded targets.&lt;/p>
&lt;p>The Integrated Development Environment (IDE) is a unified graphical user interface that makes it easy and convenient for developers to write and debug code. The IDE typically includes a source code editor, a source-level debugger, and a build automation tool.&lt;/p>
&lt;p>The XploR Studio IDE is a flexible and highly configurable software environment that is fully integrated with components to accelerate pre and post silicon software development.&lt;/p>
&lt;p>&lt;em>Also see &lt;a href="/about">Why do I need an IDE?&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="cross-toolchain">Cross toolchain&lt;/h3>
&lt;p>The cross toolchain is the set of tools that compiles program source code, written in C/C++ or assembly language, into executable instructions that run on the target platforms. The cross toolchain consists of compilers, linker, and associated run-time libraries.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Compiler choices:&lt;/strong>
&lt;em>The &lt;b>GNU&lt;/b> compiler (&lt;a href="https://www.gnu.org">www.gnu.org&lt;/a>), and &lt;b>LLVM&lt;/b> are two most popular compilers for cross platform development. GNU GCC is compatible with a wider range of existing open source software, CPU architecture, and operating systems.&lt;/p>
&lt;p>LLVM is a more modern compiler that, while continuously evolving, provides faster compilation speed, better diagnostic, and is modularly designed, making it the popular choice for new and emerging ISA and architecture.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="gdb">GDB&lt;/h3>
&lt;p>GDB is a GNU project command line debugger that allows developers to debug programs written in various languages. It supports many debugging formats and offers many debugging features, including the ability to step through code, set breakpoints, and examine variables. The XploR Studio IDE provides a graphical interface to GDB, making it easier to view different aspects of the running program (e.g. call-stack, variables, registers, and assembly code) from centralized dash-board.&lt;/p>
&lt;h2 id="target-software">Target software&lt;/h2>
&lt;h3 id="bootloader">Bootloader&lt;/h3>
&lt;p>Program code and data of an embedded operating system must be loaded into the target platform working memory during the device start-up. This task is achieved by the &lt;strong>bootloader&lt;/strong>, which is a program launched immediately after the target starts.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
&lt;em>The &lt;b>U-Boot&lt;/b> bootloader is a popular bootloader available for embedded microarchitecture such as PowerPC and ARM. Recent ISA such as RISC-V takes a more minimalistic approach, such as that supported by &lt;b>BBL&lt;/b> (Berkeley Boot Loader)
&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="real-time-os-rtos">Real-time OS (RTOS)&lt;/h3>
&lt;p>A real-time operating system (RTOS) is an operating system that is designed to provide predictable processing time for critical tasks. An RTOS can respond to an event in a specified time period. This makes it ideal for applications that require high reliability or timing precision.&lt;/p>
&lt;p>RTOS(es) provide real-time task scheduling and basic memory management, along with advanced features such as multi-threading, interrupt handling and power management. Some RTOS(es) such as Zephyr OS are scalable and can be configured to support as many or as few features as needed in order to minimize resource and memory footprint.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>RTOS awareness:&lt;/strong>
&lt;em>The XploR Studio IDE and related components provide support for building and debugging of several popular RTOS(es) including &lt;b>Amazon FreeRTOS&lt;/b>, &lt;b>Zephyr OS&lt;/b>, and &lt;b>embedded Linux&lt;/b>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: System requirements</title><link>/docs/installation/system-requirements/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/installation/system-requirements/</guid><description>
&lt;h2 id="host-system-requirements">Host System Requirements&lt;/h2>
&lt;p>The supported operating systems for installing the product are:&lt;/p>
&lt;ul>
&lt;li>Windows 10&lt;/li>
&lt;li>Ubuntu Desktop 20.04&lt;/li>
&lt;/ul>
&lt;h3 id="minimum-windows-10">Minimum (Windows 10)&lt;/h3>
&lt;ul>
&lt;li>Processor: 1 gigahertz (GHz) or faster&lt;/li>
&lt;li>Memory: 8 GB (64-bit)&lt;/li>
&lt;li>Disk space: 30GB free HD space&lt;/li>
&lt;li>Display: 19&amp;rsquo; Monitor, VGA capable of 1024×768 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="recommended-windows-10">Recommended (Windows 10)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 gigahertz (GHz) or faster&lt;/li>
&lt;li>Memory: 16 gigabytes (GB)&lt;/li>
&lt;li>Disk space: 50GB free HD space&lt;/li>
&lt;li>Display: 22&amp;rsquo; Monitor, VGA capable of 1920x1080 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="minimum-ubuntu-2004">Minimum (Ubuntu 20.04)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 GHz dual-core processor&lt;/li>
&lt;li>Memory: 8 GiB RAM (system memory)&lt;/li>
&lt;li>Disk space: 30 GB of hard drive space&lt;/li>
&lt;li>Display: 19&amp;rsquo; Monitor, VGA capable of 1024×768 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="recommended-ubuntu-2004">Recommended (Ubuntu 20.04)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 GHz dual-core processor&lt;/li>
&lt;li>Memory: 16 GiB RAM (system memory)&lt;/li>
&lt;li>Disk space: 50 GB of hard drive space&lt;/li>
&lt;li>Display: 22&amp;rsquo; Monitor, VGA capable of 1920x1080 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;!-- ## Hardware Debug Requirements
The hardware requirements, hardware connections as well as driver installation on a host machine are documented in &lt;a href="../hardware-environment">**Hardware and Environment Setup**&lt;/a>. If you are going to develop and debug RISC-V applications on Intel FPGA platforms, please refer to this document for more details. --></description></item><item><title>Docs: Execution platforms</title><link>/docs/concepts/execution-environment/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/execution-environment/</guid><description>
&lt;p>With the advent of open source CPU implementation (e.g. &lt;a href="https://openrisc.io/">openRISC&lt;/a> ), and open ISA (e.g. &lt;a href="http://www.riscv.org">RISC-V&lt;/a>), opportunities exist for developers to innovate on both side of the coin: in both hardware and software (i.e. &lt;strong>software-hardware co-design and development&lt;/strong>)&lt;/p>
&lt;p>To properly supports software-hardware co-design for pre-silicon development, the embedded target must be able to host different hardware designs consisting of different ISA implementation (and sometimes more than one), HW IP(s) and peripherals, and on-chip topology.&lt;/p>
&lt;p>&lt;strong>Target execution platform(s)&lt;/strong> are platform devices with circuits that can be manipulated with hardware description language (HDL) to perform specific functions, including those of a microprocessor or a complete system on chip (SoC).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Examples:&lt;/strong>
&lt;em>&lt;b>FPGA(s)&lt;/b> are common target execution platforms used for prototyping and deployment. &lt;b>Emulators&lt;/b> and arguably cycle-approximate &lt;b>instruction set simulators&lt;/b>, used for verification and early software development, are other examples. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>In the context of pre-silicon development, &lt;em>programming&lt;/em> means:&lt;/p>
&lt;ul>
&lt;li>The manipulation of the device circuits with specific HDL (&lt;em>hardware programming&lt;/em>, or &lt;em>flashing&lt;/em>), or&lt;/li>
&lt;li>The loading and debugging of executable code and data (&lt;em>software programming&lt;/em>, or &lt;em>loading&lt;/em>) into the memory of the microprocessor that is executing on the target execution platform.&lt;/li>
&lt;/ul>
&lt;p>XploR Studio supports both mode of programming support both pre and post silicon software development.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Virtual JTAG:&lt;/strong>
&lt;em>Many &lt;b>XploR components&lt;/b> for execution platforms include builtin &lt;b>virtual JTAG&lt;/b> supporting hardware and software programming, thus obviating the needs for costly and less convenient external JTAG device from third-parties.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Target execution platform as the embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Pre-silicon target execution platform&amp;#34; as targets {
state JTAG
state &amp;#34;HDL programmable device&amp;#34; as HAPS {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
JTAG --&amp;gt; HAPS
}
note bottom of HAPS : CPU, Memory and Peripherals\nare (or can be) programmed with HDL.
state JTAG
note top of JTAG : JTAG used for both hardware\nand software programming
hosts -&amp;gt; JTAG
&lt;/code>&lt;/pre></description></item><item><title>Docs: XIP installer</title><link>/docs/installation/xip-install/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/installation/xip-install/</guid><description>
&lt;p>&lt;strong>XIP&lt;/strong> (i.e. XploR pip) is a standalone application used for downloading, installing and managing the IDE and components. This section contains instructions on how to install XIP on Windows or Linux hosts.&lt;/p>
&lt;h3 id="window">Window&lt;/h3>
&lt;ol>
&lt;li>Go to the website &lt;a href="https://github.com/xplor-studio/xip/releases">https://github.com/xplor-studio/xip/releases&lt;/a> and download the xip.exe file&lt;/li>
&lt;li>Add xip to the PATH environment variable&lt;/li>
&lt;li>Sign up for an account (from Windows command line). Note that you will need to acknowledge your email before the account is activated.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ xip signup
&lt;/code>&lt;/pre>&lt;h3 id="linux">Linux&lt;/h3>
&lt;ol>
&lt;li>Open terminal and type the following command:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ curl -L https://raw.githubusercontent.com/xplor-studio/xip/main/get_xip.sh | bash
&lt;/code>&lt;/pre>&lt;p>Alternative, you can also download directly from: &lt;a href="https://github.com/xplor-studio/xip/releases">https://github.com/xplor-studio/xip/releases&lt;/a>&lt;/p>
&lt;ol start="2">
&lt;li>Sign up for an account (from terminal)&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>$ xip signup
&lt;/code>&lt;/pre>&lt;p>💡For more information and examples, see the &lt;a href="/docs/xplor-platform/xip/">XIP&lt;/a> reference.&lt;/p></description></item><item><title>Docs: XploR Components</title><link>/docs/concepts/component/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/component/</guid><description>
&lt;p>Components are packages of hardware and/or software IP(s) that are bounded to specific &lt;a href="/docs/concepts/execution-environment/">&lt;em>execution platform(s)&lt;/em>&lt;/a>.&lt;/p>
&lt;!-- The [Component Catalog](https://xplor.design/) is a collection of free and paid components from SoC.one, community contributors, and commercial vendors.
> **Note:**
> You can peruse the [Component Catalog](https://xplor.design/) from the XploR Studio Dashboard via the `components` menu entry, or with **xip**. -->
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe XploR components
state &amp;#34;xplor.design - component registry&amp;#34; as registry {
state &amp;#34;Free components&amp;#34;
state &amp;#34;Paid components&amp;#34;
}
state &amp;#34;Contributors&amp;#34; as contributors {
state &amp;#34;SoC.one&amp;#34; as socone
state &amp;#34;Open source developers&amp;#34; as developers
state &amp;#34;Third-parties vendors&amp;#34; as vendors
}
socone --&amp;gt; registry : contributes
developers -up-&amp;gt; registry : contribute
vendors --&amp;gt; registry : contribute
state &amp;#34;XploR Studio&amp;#34; as IDE
state &amp;#34;Target Platform&amp;#34; as target
IDE : User downloads and installs
IDE : components from XploR.design
IDE : on the host system.
IDE :
IDE : XploR studio deploys components
IDE : on target platform
registry -&amp;gt; IDE : download &amp;amp;\ninstall
IDE --&amp;gt; target
&lt;/code>&lt;/pre>&lt;p>Components are fully integrated with XploR Studio, and can be installed and used by themselves or in combination with other components.&lt;/p>
&lt;h3 id="creating-and-contributing-components">Creating and contributing components&lt;/h3>
&lt;p>Developer can create and contribute components to XploR Design component catalog. Once downloaded and installed, contributed components are loaded dynamically XploR Studio.&lt;/p>
&lt;p>The experience of implementing an XploR Design component is comparable to that of writing a web browser extension. To learn more about XploR component creation, please refer to the &lt;a href="/docs/xplor-platform/components">&lt;span style="color: blue">Packaging components&lt;/span>&lt;/a> documentation.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>IP(s) versus components&amp;quot;&lt;/strong>
&lt;em> The HDL implementations of hardware peripherals, accelerator, or ISA such as ARM or RISC-V are &lt;b>IP(s)&lt;/b>. &lt;b>components&lt;/b> are combination these IP(s) that has been customized, configured, and built to execute on specific target execution platforms, such as FPGA(s) from AMD or Intel. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="benefits">Benefits&lt;/h3>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Components provide clear and concise purposes&lt;/strong> - components serve as a detailed plan or a design that outlines the necessary steps and materials required to construct or create a design.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Components act as reference model&lt;/strong> - components prototype the functional behavior of the design, and can be used as a reference or golden model to help to ensure that the finished product is consistent with the original design and meets the expectations and requirements of our customers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Components enable early software development&lt;/strong> - Together with XploR Studio IDE, components enable developers to design, test, and debug software in pre-silicon phase in order to identify and address potential issues beforehand.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Components promote reusability&lt;/strong> - In many cases, HW and SW IP(s) in components are hardened and reused for in-silicon and post-silicon deployment.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Docs: Creating application with FreeRTOS</title><link>/docs/quick-start/freertos/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/quick-start/freertos/</guid><description>
&lt;p>This chapter covers the basics of a quick-start project including creating, building, running, and debugging applications. This project referred to in this chapter is called &lt;strong>Blinky&lt;/strong>. This application prints &lt;em>Blink&lt;/em> text. Through the debug session, users can examine RTOS objects such as Task and Queue. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;p>To build, run and debug &lt;strong>Blinky&lt;/strong> applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos-debug-plugin&lt;/strong> and &lt;strong>freertos-virt-qemu-blinky-example&lt;/strong> components first. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component Management&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>First, open XploR Studio IDE by the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>xip ide start
&lt;/code>&lt;/pre>&lt;p>The easiest way to use FreeRTOS is to start with one of the pre-configured demo application projects by selecting &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>Blinky&lt;/strong> project.
Then click Next.&lt;/p>
&lt;p>&lt;img src="/quickstart/1.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/quickstart/3.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> For more project examples, please install &lt;code>Example Projects components&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>After the project is created, the user can change build settings or other project settings by right-clicking on the project name in &lt;strong>Project Explorer&lt;/strong> and selecting &lt;strong>Properties&lt;/strong>.
Then select &lt;strong>C/C++ Build &amp;gt; Settings&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/4.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The Floating-point ABI – Single precision (f) is currently not supported in this release (except Embedded projects).&lt;/p>
&lt;/blockquote>
&lt;p>For example, on the Target Processor menu, users can change the architecture from 32 bits to 64 bits, and also select floating-point options.&lt;/p>
&lt;p>&lt;img src="/quickstart/5.png" alt="example image">&lt;/p>
&lt;p>Another useful setting is to add hooks before and after the build. For example:&lt;/p>
&lt;p>&lt;img src="/quickstart/6.png" alt="example image">&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;ul>
&lt;li>Building is simply done by clicking on the build button in the toolbar:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/quickstart/7.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Or right-click on the current project &amp;gt; Build Project&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/quickstart/8.png" alt="example image">&lt;/p>
&lt;p>Messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/quickstart/9.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU emulator&lt;/h3>
&lt;p>XploR Studio offers several ways to run applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the BlinkyDemo entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.&lt;/p>
&lt;p>&lt;img src="/quickstart/10.png" alt="example image">&lt;/p>
&lt;p>In Run Configuration Dialog box, create a new run configuration by double-clicking on RISC-V Running&lt;/p>
&lt;p>&lt;img src="/quickstart/10-1.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Main&lt;/strong> tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Run&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/quickstart/10-2.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the Blinky Demo Project entry in the Project Explorer and then click &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISC-V application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/10-3.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/10-4.png" alt="example image">&lt;/p>
&lt;p>After selecting &lt;strong>Run As RISC-V application with QEMU&lt;/strong>, the &amp;ldquo;Blink&amp;rdquo; text will be printed continuously in Console view.&lt;/p>
&lt;p>&lt;img src="/quickstart/10-5.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the BlinkyDemo entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.&lt;/p>
&lt;p>&lt;img src="/quickstart/11.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog box, create a new debug configuration by double-clicking on RISC-V Debugging&lt;/p>
&lt;p>&lt;img src="/quickstart/12.png" alt="example image">&lt;/p>
&lt;p>On the Debugger tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/quickstart/13.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the Blinky Demo Project entry in the Project Explorer and then click &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/14.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Debug As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/quickstart/15.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/quickstart/16.png" alt="example image">&lt;/p>
&lt;p>Open &lt;strong>main_blinky.c&lt;/strong> source code file in &lt;strong>src/application-specific/blinky_demo&lt;/strong> &amp;gt; Set more breakpoints in Task and Queue object.&lt;/p>
&lt;p>&lt;img src="/quickstart/17.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Press F8 or click on &lt;strong>Resume&lt;/strong> button to go to the next breakpoint&lt;/p>
&lt;p>&lt;img src="/quickstart/17.1.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Continue debugging with press F5 or clicking on Step Into button to step into the line of code&lt;/p>
&lt;p>&lt;img src="/quickstart/18.1.png" alt="example image">&lt;/p>
&lt;p>and see data change in Register View&lt;/p>
&lt;p>&lt;img src="/quickstart/register-view.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Continue debugging with press F6 or clicking on Step Over button for step over&lt;/p>
&lt;p>&lt;img src="/quickstart/18.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press F7 or click on Step Return (F7) button for step return code&lt;/p>
&lt;p>&lt;img src="/quickstart/19.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on the Suspend button to pause the debug process.&lt;/p>
&lt;p>&lt;img src="/quickstart/20.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>User can open Object Variables, Breakpoints, Task, Queue, and Heap to examine application states:&lt;/p>
&lt;p>&lt;strong>Variables&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/21.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Breakpoints:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/22.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Task:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/23.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Queue:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/24.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Timer:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/22.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Heap:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/quickstart/25.png" alt="example image">&lt;/p>
&lt;p>To stop the debug process, click the Terminate icon in the toolbar or press F2.&lt;/p>
&lt;p>&lt;img src="/quickstart/26.png" alt="example image">&lt;/p>
&lt;!-- ## &lt;a id="blinky-debug-de2">5 Running and Debugging project with Intel FPGA DE2-115 platform&lt;/a>
### Hardware and driver preparations
Please refer to the &lt;a href="../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
### Programming Bitfile
To program a RISC-V Bitfile to the board, click on Flash icon on the toolbar
![example image](/quickstart/27.png)
- In the **Categories**, there are 2 types:
- "***Free IP For Starter Boards***" includes free Bitfile files like Neorv32, Rocket64 or OpenHW group
- "***Commercial Grade IP for Professional Boards***" includes commercial Bitfile files like Andes, Codasip. To download these Bitfile files, user need to register an account and download from [https://pathfinder.intel.com/registration/](https://pathfinder.intel.com/registration/)
- In the **Bitfile**, select **stratix10_rocket64.sof** or **Custom Bitfile** if users use their own RISC-V Bitfile. In this case, we select "***de2-115_neorv32***" for the neorv32 - DE2-115 project.
- Select JTAG cable (if the user has multiple boards connected to the development machine).
- Click **Finish** to flash Neorv 32-bit RISC-V core to DE2-115 board.
To view the console output printed from the RISC-V core, there are 2 ways depending on the Bitfile:
- **Physical UART** &lt;span style="color:red">*(for Open-V-MCU, Neorv32)*:&lt;/style>
Open the Terminal view and select `COM` port (on Windows) or `/dev/ttyUSBx` port (on Linux) with the following connection settings.
![example image](/images_xplorstudio/28.png)
The output message on the serial terminal will look like this:
```
&lt;&lt; NEORV32 Bootloader >>
BLDV: Oct 27 2021
HWV: 0x01060300
CLK: 0x02faf080
MISA: 0x40801104
CPU: 0x00000483
SOC: 0x0007400d
IMEM: 0x00040000 bytes @0x00000000
DMEM: 0x00020000 bytes @0x80000000
Autoboot in 8s. Press key to abort.
Loading...
[ERR 0x00000005 0xffff0d58 0xffffffa8]
ERROR_1
```
It is safe to ignore messages like `ERROR_1` above.
- **vJTAG-UART** &lt;span style="color:red">*(for Rocket Chip, Andes, Codasip)*:&lt;/style>
Open Terminal view and choose Local Terminal. Type `jtagconfig -d` to detect the index of the USB-Blaster II cable (Linux OS: The user should use the command `source path/to/__PROJECT_SHORTNAME__/bin/environment-setup.sh` first to set the environment of the __PROJECT_SHORTNAME__.
![example image](/images_xplorstudio/28.1.png)
Then, type `nios2-terminal -c $index -d 1 -i 0`. In this case, the index is number 2, so the command is `nios2-terminal -c 2 -d 1 -i 0`.
!!!warning "Note"
Examples with 3 Bitfiles (Rocket Chip, Andes, Codasip) on the Intel Stratix 10 GX board will not print the output on Terminal view on this release (version 1.1).
### Run project on Intel FPGA DE2-115 platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 5.2](#52-programming-ip-core) for how to program the bitstream.
To run the application on hardware without debugging, select project in the Project Explorer, click **Run as > RISC-V application on Hardware**.
On the Terminal view, the "Blinky" message will be printed continuously.
Please refer to [section 6.3](#63-run-project-on-intel-fpga-stratix-10-gx-platform) for how to run the application by creating a new *Run Configuration*.
!!!info
Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.
![example image](/images_xplorstudio/29.png)
### Debug project on Intel FPGA DE2-115 platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 5.2](#52-programming-ip-core) for how to program the bitstream.
To debug the application on hardware, select project in the Project Explorer, click **Debug as > RISC-V application on Hardware**
![example image](/images_xplorstudio/30.png)
Please refer to [section 6.4](#64-debug-project-on-intel-fpga-stratix-10-gx-platform) for how to debug the application by creating a new *Debug Configuration*.
!!!info
Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.
If users cannot debug normally, that means the RISC-V core may be locked from a previous debug session. To restart with a new debug session, please press `KEY0` on the DE2-115 board to reset the core and continue.
The application stops at the first line, and users can set breakpoints and continue to debug.
![example image](/images_xplorstudio/31.png)
To view the RTOS objects, press the **Suspend** button.
![example image](/images_xplorstudio/32.png)
Task objects:
![example image](/images_xplorstudio/33.png)
Queue objects:
![example image](/images_xplorstudio/34.png)
Heap objects:
![example image](/images_xplorstudio/35.png)
To view Registers, switch to the Register view:
![example image](/images_xplorstudio/36.png)
To view gdb console message, switch to the Debug console view
![example image](/images_xplorstudio/37.png)
In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals' status such as control register values, and data register values via **Peripheral Registers view**.
To active Peripheral Registers view, select **Window > Preferences**
![example image](/images_xplorstudio/38.png)
Then go to the **C/C++ > Debug section**
Click the Peripheral **Registers Page**. On this page:
- Architecture: Select RISC-V
- Vendor: Select FPGA
- Platform: Select Neorv32
The peripheral registers will be listed on the right-hand side of the page:
![example image](/images_xplorstudio/39.png)
Users can select specific registers or all registers via the checkbox, then click **Apply and Close** button
![example image](/images_xplorstudio/40.png)
The Peripheral Register views will show all registers as well as their information.
To view any register status, double-click on the register name on Peripheral View:
![example image](/images_xplorstudio/41.png)
To view the program output, switch to the Terminal view.
![example image](/images_xplorstudio/42.png)
## &lt;a id="blinky-debug-stratix">6 Running and Debugging project with Intel FPGA Stratix 10 GX platform&lt;/a>
### Hardware and driver preparations
For more information, please refer to &lt;a href="../../hardware-environment/">Hardware and Environment Setup&lt;/a> and [Running and Debugging project with Intel FPGA DE2-115 platform](#5-running-and-debugging-project-with-intel-fpga-de2-115-platform).
### Programming Bitfile
To program a RISC-V Bitfile to the board, click on the Flash icon on the toolbar:
![example image](/images_xplorstudio/43.png)
- In **Vendor**, select: Neorv32
- In **Product**, select
- **neorv32 - Stratix10gx (sof)**.
- **Custom Bitfile** if users use their own RISC-V Bitfile.
- Select the JTAG cable (if users have multiple boards connected to the development machine)
- Click "Finish" to flash the NEOR32 RISC-V core.
### Run project on Intel FPGA Stratix 10 GX platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 6.2](#62-programming-ip-core) for how to program the bitstream.
To run the application on hardware without debugging, select the project in the Project Explorer, and click **Run as > Run Configurations**. Then create a new RISC-V Running configuration with the following information.
- Platform: **FPGA** > **Intel Stratix 10 GX Board** > **Neorv32**
- Configuration: Uncheck Virtual Jtag and select the external JTAG
![example image](/images_xplorstudio/45.png)
![example image](/images_xplorstudio/29.png)
### Debug project on Intel FPGA Stratix 10 GX platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 6.2](#62-programming-ip-core) for how to program the bitstream.
To debug the application on hardware, select project in the Project Explorer, click **Debug as > Debug RISC-V application on hardware**. Then create a new RISC-V Running configuration with the following information.
- Platform: **FPGA** > **Intel Stratix 10 GX Board** > **Neorv32**
- Configuration: Uncheck `Virtual Jtag` and select the external JTAG
![example image](/images_xplorstudio/47.png)
![example image](/images_xplorstudio/48.png)
For the OpenOCD configuration of each Bitfile on the Intel Stratix 10 GX board, please refer to the below table:
| Bitfiles | Type of JTAG | Supported JTAG |
|:-----------:|:-------------:|:-----------------------------------------------------------:|
| Neorv32 | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Rocket Chip | Virtual JTAG | N/A |
| Open-V-MCU | Virtual JTAG | N/A |
| Andes | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Codasip | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
*Note: This is an example of creating, building, running, and debugging a typical project. For specific projects, which are supported in this release, please refer to &lt;a href="../../examples/">**Examples and Demos**&lt;/a> section.*
## Debug project with custom openocd
Create a new debug configuration on **Debug Configurations** dialog by double-clicking on **RISC-V Debugging**:
![example image](/images_xplorstudio/50.png)
On the tab **Debugger**, select option **Intel FPGA Board in FPGA.**
![example image](/images_xplorstudio/51.png)
On the **OpenOCD Options**, we use the openocd binary of Quartus and the default openocd configuration file.
![example image](/images_xplorstudio/52.png)
Users can browse the custom openocd binary and the custom openocd configuration file.
![example image](/images_xplorstudio/53.png)
Click **Apply** then click **Debug** to start debugging with the custom openocd binary. --></description></item><item><title>Docs: Using XIP</title><link>/docs/installation/ide-install/ide-xip/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/installation/ide-install/ide-xip/</guid><description>
&lt;p>We recommend using xip to download and install XploR as it is the most convenient maintain and upgrade the IDE, as well as to access additional related components.&lt;/p>
&lt;p>Download and install XploR Studio IDE by the following command:&lt;/p>
&lt;div class="td-card-group card-group p-0 mb-4">
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Linux&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xip install xplor-studio-ide-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Windows&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xip install xplor-studio-ide-win64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>📝&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;p>Please restart your terminal/PC and then check XPLORSTUDIO_HOME if exists before installing other XploR Studio components.&lt;/p></description></item><item><title>Docs: Using IDE installer</title><link>/docs/installation/ide-install/ide-installer/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/installation/ide-install/ide-installer/</guid><description>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The installer needs to pull development packages from the internet. Please make sure that your machine has internet connectivity.&lt;/p>
&lt;/blockquote>
&lt;h2 id="download-the-ide-installer">Download the IDE installer&lt;/h2>
&lt;!-- https://xplor.studio/release -->
&lt;p>The XploR IDE installer is available for Linux and Windows. The installer can be downloaded from the links: &lt;a href="https://xplor.studio/release/">https://xplor.studio/release/&lt;/a>&lt;/p>
&lt;p>There are 2 suffixes corresponding to the operating system:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>XploR-Studio-{VERSION}_linux.run&lt;/strong> for Linux&lt;/li>
&lt;li>&lt;strong>XploR-Studio-{VERSION}_win32.exe&lt;/strong> for Windows&lt;/li>
&lt;/ul>
&lt;h2 id="start-the-installer">Start the installer&lt;/h2>
&lt;h3 id="on-windows">On Windows&lt;/h3>
&lt;p>Run the executable installer by right-clicking on the executable &lt;strong>XploR-Studio-{VERSION}_win32.exe&lt;/strong> from the desktop or file manager and selecting &lt;strong>Open&lt;/strong>.&lt;/p>
&lt;h3 id="on-linux">On Linux&lt;/h3>
&lt;p>Open the terminal and run the installer&lt;/p>
&lt;p>&lt;code>./XploR-Studio-{VERSION}_linux.run&lt;/code>&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/2.png" alt="example image">&lt;/p>
&lt;p>Select the &lt;strong>Next&lt;/strong> button to proceed with the installation.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/3.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, you shall be presented with the &lt;strong>XploR IDE License Agreement&lt;/strong>. Review this agreement carefully, then select &amp;ldquo;&lt;em>I accept the agreement&lt;/em>&amp;rdquo; and &lt;strong>Next&lt;/strong> to continue or &lt;strong>Quit&lt;/strong> to exit.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/4.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, you will see the information: &lt;em>Choose a directory name without space characters&lt;/em>.&lt;/p>
&lt;p>Please choose a destination path without spaces. If XploR IDE is installed on a location containing spaces, the application build will fail. This is a known issue and will be fixed in a future release. Select &lt;strong>OK&lt;/strong> to continue.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/5.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>OK&lt;/strong> is selected, the installer presents the installation path. You can choose or enter an alternative. Select &lt;strong>Next&lt;/strong> to continue.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
Please choose a destination path that is not available. If XploR IDE is installed in an available location, the data cannot be completely uninstalled. This is a known issue and will be fixed in a future release.&lt;/p>
&lt;/blockquote>
&lt;p>The XploR IDE installer presents a summary of packages to be installed.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/6.png" alt="example image">&lt;/p>
&lt;p>Then select &lt;strong>Next&lt;/strong> to proceed.&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, the selected packages will be copied into the installation directory.&lt;/p>
&lt;!-- Please select the **Zephyr Component** option if you want to install this feature. Installation requires about 4 GB of storage space. Zephyr also requires the **CMake** version to be 3.20 or higher. -->
&lt;p>&lt;img src="/images_installation/IDE_Installer/7.png" alt="example image">&lt;/p>
&lt;p>Select &lt;strong>Next&lt;/strong> to start the installation.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/8.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/9.png" alt="example image">&lt;/p>
&lt;p>After all the XploR IDE files have been copied, one final dialog is presented below. Select the &lt;strong>Finish&lt;/strong> button to complete the installation of the XploR IDE.&lt;/p>
&lt;p>&lt;img src="/images_installation/IDE_Installer/10.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>OK&lt;/strong> to launch XploR IDE.&lt;/p></description></item><item><title>Docs: Installation Issues</title><link>/docs/faq/faq/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/faq/faq/</guid><description>
&lt;h2 id="failure-when-installing-xplor-studio">Failure when installing XploR Studio&lt;/h2>
&lt;p>&lt;strong>Issue 01: The dependencies packages are not installed&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/faq/1.png" alt="example image">&lt;/p>
&lt;p>Solution: Please make sure your machine has an Internet connection.&lt;/p>
&lt;p>&lt;strong>Issue 02: The installer stopped with the error &amp;ldquo;Java heap space&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>Solution: Please make sure your machine has enough RAM.
Please refer to &lt;a href="/docs/installation/system-requirements/">&lt;span style="color: blue">&lt;strong>System Requirements&lt;/strong>&lt;/span>&lt;/a> for hardware requirements to install XploR Studio.&lt;/p>
&lt;h2 id="cannot-program-fpga-device">Cannot program FPGA device&lt;/h2>
&lt;p>Issue: Sometimes, the board cannot be flashed with messages like:&lt;/p>
&lt;pre tabindex="0">&lt;code>*************** Intel FPGA board flash start ***************
Error (23025): Short option -c takes an argument. Refer to --help for legal arguments.
Usage:
------
quartus_pgm [-h | --help[=&amp;lt;option|topic&amp;gt;] | -v]
quartus_pgm -c &amp;lt;cable name&amp;gt; filname.cdf --- If you want to use cdf file
quartus_pgm -c &amp;lt;cable name&amp;gt; -m &amp;lt;programming mode&amp;gt; -o &amp;lt;value&amp;gt; [-o &amp;lt;value&amp;gt;...] --- If you want to use individual programming file(s)
quartus_pgm -l --- to display the list of available hardware
quartus_pgm -c &amp;lt;cable name&amp;gt; -a --- to display the list of devices connected to the cable.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Solution&lt;/strong>: Clean up the previous jtag server instance
Please open &lt;strong>Terminal view&lt;/strong>, and select &lt;strong>Local Terminal&lt;/strong>&lt;/p>
&lt;center>
![example image](images/3.png)
&lt;/center>
&lt;p>Then run the following commands in the terminal to see if the board is online:&lt;/p>
&lt;pre tabindex="0">&lt;code>killall jtagd
jtagd --user-start
jtagconfig
&lt;/code>&lt;/pre>&lt;center>
![example image](images/4.png)
&lt;/center>
!!!info "Note"
Please use the built-in terminal of the IDE. Otherwise, you may see the message "jtagd not found"
&lt;h2 id="3-could-not-bind-gdb-to-socket-on-port-3333-address-already-in-use">3 Could not bind gdb to socket on port 3333: Address already in use&lt;/h2>
&lt;center>
![example image](images/5.png)
&lt;/center>
&lt;p>The previous debug session is still running on port 3333.
Solution: Right-click on Console View and select &lt;strong>Terminate/Disconnect All&lt;/strong>&lt;/p>
&lt;center>
![example image](images/6.png)
&lt;/center>
&lt;h2 id="error-fatal-hart-0-failed-to-halt-during-examine">Error: Fatal: Hart 0 failed to halt during examine()&lt;/h2>
&lt;center>
![example image](images/7.png)
&lt;/center>
&lt;p>Explanation: The RISC-V core for the previous debug session was not cleaned up.
Solution: Reset the RISC-V core by pressing the reset button on the FPGA board. On DE2-115, &lt;strong>its button KEY0&lt;/strong>&lt;/p>
&lt;h2 id="failed-to-open-port-devttyusb0-with-selected-settings">Failed to open port /dev/ttyUSB0 with selected settings.&lt;/h2>
&lt;center>
![example image](images/8.png)
&lt;/center>
&lt;p>Explanation: User does not have permission to access ttyUSB0 device
Workaround: sudo chmod 666 /dev/ttyUSB0&lt;/p>
&lt;h2 id="eth_local_ip-command-not-found">&lt;code>eth_local_ip&lt;/code> Command not found&lt;/h2>
&lt;center>
![example image](images/9.png)
&lt;/center>
&lt;p>Explanation: The ethernet module on DE2-115 is not activated since the flashed SOF file is not corresponding to the Ethernet jumper settings on the board.
Solution: Please make sure the exact SOF file is flashed. Please refer to &lt;a href="../hardware-environment">&lt;strong>Hardware and Environment&lt;/strong>&lt;/a> for more information.&lt;/p>
&lt;h2 id="tftp-is-not-working">TFTP is not working&lt;/h2>
&lt;p>When the board is booting, the Linux image is not downloaded from TFTP Server. The issue could be&lt;/p>
&lt;ul>
&lt;li>No permission on the tftpboot directory. Try running &lt;strong>chmod -R 777 /path/to/boot.bin&lt;/strong>&lt;/li>
&lt;li>Firewall: Update firewall rule to allow TFTP service such as &lt;strong>sudo ufw allow tftp&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Component Management</title><link>/docs/features/component-management/component-management/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/component-management/component-management/</guid><description>
&lt;p>This section covers how to install, uninstall, upgrade components in IDE and command line&lt;/p>
&lt;h3 id="in-xplor-studio-ide">In XploR Studio IDE&lt;/h3>
&lt;h4 id="install">Install&lt;/h4>
&lt;p>After successful &lt;a href="/docs/installation/ide-install/">installation&lt;/a>, the baseline IDE does not contain any resources like plugins, toolchains, example projects, and target bitfiles. So, users need to install the desired resources to start working with XploR Studio.&lt;/p>
&lt;p>To install component(s) in XploR Studio, follow these steps:&lt;/p>
&lt;ul>
&lt;li>Select the icon &lt;img src="/features/1.png" alt="Image alt" style="display: inline;"> in the toolbar to show a list of available components:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/features/component-management.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>On the left side of the window, there is a filter box. User can choose to show type of components by selecting the corresponding checkbox.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To install the desired component, check the box in the &lt;em>No.&lt;/em> column and select &lt;strong>Install&lt;/strong>. One or more components can be installed at the same time.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
If you do not wish to install the dependencies of specific components, please select the checkbox labeled &lt;strong>Don&amp;rsquo;t install component&amp;rsquo;s dependencies&lt;/strong> below the components list.
&lt;/div>
&lt;h4 id="uninstall">Uninstall&lt;/h4>
&lt;p>The &lt;em>Status&lt;/em> column shows whether the component is installed locally. User can uninstall a component by checking the box in the &lt;em>No.&lt;/em> column and selecting &lt;strong>Uninstall&lt;/strong>. Similar to installing feature, one or more components can be uninstalled at the same time.&lt;/p>
&lt;h4 id="upgrade">Upgrade&lt;/h4>
&lt;p>If a component has multiple available versions, you can select a specific version of that component by simply double-clicking on it. A new dialog will be shown to display all available versions:&lt;/p>
&lt;p>&lt;img src="/features/select-version.png" alt="example image">&lt;/p>
&lt;h3 id="in-command-line">In command line&lt;/h3>
&lt;h4 id="install-1">Install&lt;/h4>
&lt;p>To install the component with command line, use xip:&lt;/p>
&lt;pre tabindex="0">&lt;code>xip install [component-name]
&lt;/code>&lt;/pre>&lt;h4 id="uninstall-1">Uninstall&lt;/h4>
&lt;p>To uninstall the component with command line, use xip:&lt;/p>
&lt;pre tabindex="0">&lt;code>xip uninstall [component-name]
&lt;/code>&lt;/pre>&lt;h4 id="upgrade-1">Upgrade&lt;/h4>
&lt;p>To upgrade the component with command line, use xip:&lt;/p>
&lt;pre tabindex="0">&lt;code>xip install --upgrade [component-name]
&lt;/code>&lt;/pre>&lt;p>Or install component with specific version:&lt;/p>
&lt;pre tabindex="0">&lt;code>xip install [component-name]==[version]
&lt;/code>&lt;/pre></description></item><item><title>Docs: Component Category</title><link>/docs/features/component-management/component-category/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/component-management/component-category/</guid><description>
&lt;p>Xplor component category has 4 types: &lt;strong>Software&lt;/strong>, &lt;strong>IP&lt;/strong>, &lt;strong>Executive Platform&lt;/strong>, and &lt;strong>Component&lt;/strong>. Each type has its own characteristics and usage.&lt;/p>
&lt;h2 id="software">Software&lt;/h2>
&lt;p>A component of type &lt;strong>Software&lt;/strong> is a software package that can be installed on a host machine or target machine. It can be a toolchain, a library, an application, or a plugin. A software component can be installed on the host machine and used by XploR Studio IDE.&lt;/p>
&lt;p>The hierarchy of a software component is as follows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Host&lt;/strong>: A software component that can be installed on the host machine.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IDE&lt;/strong>: A component related to the IDE.
&lt;ul>
&lt;li>&lt;strong>XploR Studio&lt;/strong>: A component related to the XploR Studio IDE.
&lt;ul>
&lt;li>&lt;strong>Plugin&lt;/strong>: A plugin for XploR Studio IDE. With this type of component, users can extend the functionality of XploR Studio IDE.&lt;/li>
&lt;li>&lt;strong>Example Project&lt;/strong>: An example project for XploR Studio IDE. With this type of component, users can create a new project with a pre-configured project structure.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Debug&lt;/strong>: A component related to the debug process.&lt;/li>
&lt;li>&lt;strong>Libraries&lt;/strong>: A component related to libraries.&lt;/li>
&lt;li>&lt;strong>Cross Toolchain&lt;/strong>: A component related to cross toolchain.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Target&lt;/strong>: A software component that can be installed on the target machine.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>OS&lt;/strong>: A component related to the operating system.&lt;/li>
&lt;li>&lt;strong>RootFS&lt;/strong>: A component related to the root file system. That can be booted on QEMU or flashed to the target machine.
&lt;ul>
&lt;li>&lt;strong>Native Toolchain&lt;/strong>: A component related to the native toolchain on the target machine.&lt;/li>
&lt;li>&lt;strong>Libraries&lt;/strong>: A component related to libraries on the target machine.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="ip">IP&lt;/h2>
&lt;p>A component of type &lt;strong>IP&lt;/strong> is a design IP that can be used in a hardware design. It can be a peripheral, a bus, or a processor. An IP component can be used in a hardware design and synthesized to a bitfile.&lt;/p>
&lt;p>The hierarchy of an IP component is as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Core&lt;/strong>: A component related to the core.
&lt;ul>
&lt;li>&lt;strong>32-bit&lt;/strong>: A component related to the 32-bit core.
&lt;ul>
&lt;li>&lt;strong>RISC-V&lt;/strong>: A component related to the RISC-V core.&lt;/li>
&lt;li>&lt;strong>ARM&lt;/strong>: A component related to the ARM core.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>64-bit&lt;/strong>: A component related to the 64-bit core.
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Peripheral&lt;/strong>: A component related to the peripheral.
&lt;ul>
&lt;li>&lt;strong>UART&lt;/strong>: A component related to the UART peripheral.&lt;/li>
&lt;li>&lt;strong>SPI&lt;/strong>: A component related to the SPI peripheral.&lt;/li>
&lt;li>&lt;strong>I2C&lt;/strong>: A component related to the I2C peripheral.&lt;/li>
&lt;li>&lt;strong>Ethernet&lt;/strong>: A component related to the Ethernet peripheral.&lt;/li>
&lt;li>&lt;strong>USB&lt;/strong>: A component related to the USB peripheral.&lt;/li>
&lt;li>&lt;strong>SDIO&lt;/strong>: A component related to the SDIO peripheral.&lt;/li>
&lt;li>&lt;strong>PCIe&lt;/strong>: A component related to the PCIe peripheral.&lt;/li>
&lt;li>&lt;strong>I2S&lt;/strong>: A component related to the I2S peripheral.&lt;/li>
&lt;li>&lt;strong>DMA&lt;/strong>: A component related to the DMA peripheral.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Accelerator&lt;/strong>: A component related to the accelerator.
&lt;ul>
&lt;li>&lt;strong>DSP&lt;/strong>: A component related to the DSP accelerator.&lt;/li>
&lt;li>&lt;strong>Vector&lt;/strong>: A component related to the Vector accelerator.&lt;/li>
&lt;li>&lt;strong>Neural Network&lt;/strong>: A component related to the Neural Network accelerator.&lt;/li>
&lt;li>&lt;strong>FPU&lt;/strong>: A component related to the FPU accelerator.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="executive-platform">Executive Platform&lt;/h2>
&lt;p>A component of type &lt;strong>Executive Platform&lt;/strong> is a platform that can be used to run an application. It can be a board, a emulator, or a simulator.&lt;/p>
&lt;p>The hierarchy of an Executive Platform component is as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Simulator&lt;/strong>: A component related to the simulator.&lt;/li>
&lt;li>&lt;strong>ISA Simulator&lt;/strong>: A component related to the ISA simulator.
&lt;ul>
&lt;li>&lt;strong>QEMU&lt;/strong>: A component related to the QEMU ISA simulator.&lt;/li>
&lt;li>&lt;strong>Spike&lt;/strong>: A component related to the Spike ISA simulator.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>RTL Simulator&lt;/strong>: A component related to the RTL simulator.
&lt;ul>
&lt;li>&lt;strong>Verilator&lt;/strong>: A component related to the Verilator RTL simulator.&lt;/li>
&lt;li>&lt;strong>VCS&lt;/strong>: A component related to the VCS RTL simulator.&lt;/li>
&lt;li>&lt;strong>Questasim&lt;/strong>: A component related to the Questasim RTL simulator.&lt;/li>
&lt;li>&lt;strong>Modelsim&lt;/strong>: A component related to the Modelsim RTL simulator.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Emulator&lt;/strong>: A component related to the emulator.
&lt;ul>
&lt;li>&lt;strong>Veloce&lt;/strong>: A component related to the Veloce emulator.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Prototying Hardware&lt;/strong>: A component related to the prototyping hardware.
&lt;ul>
&lt;li>&lt;strong>FPGA&lt;/strong>: A component related to the FPGA prototyping hardware.&lt;/li>
&lt;li>&lt;strong>Pro FPGA&lt;/strong>: A component related to the professional FPGA prototyping hardware.&lt;/li>
&lt;li>&lt;strong>Primo&lt;/strong>: A component related to the ASIC prototyping hardware.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="component">Component&lt;/h2>
&lt;p>A &lt;strong>Component&lt;/strong> can be a project, a platform, or a toolchain. A component can be used for running end-to-end a lab/experiment.&lt;/p>
&lt;p>The hierarchy of a Component is as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Profile&lt;/strong>: A component related to the profile.
&lt;ul>
&lt;li>&lt;strong>Baremetal&lt;/strong>: A component related to the baremetal profile.&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>: A component related to the Linux profile.&lt;/li>
&lt;li>&lt;strong>Embedded&lt;/strong>: A component related to the embedded profile.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Reference Design&lt;/strong>: A component related to the reference design.
&lt;ul>
&lt;li>&lt;strong>System&lt;/strong>: A component related to the system reference design.&lt;/li>
&lt;li>&lt;strong>Connected System&lt;/strong>: A component related to the connected system reference design.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Project / Debug views</title><link>/docs/features/project-views/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/project-views/</guid><description>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> XploR Studio IDE is based on Eclipse IDE. Therefore, the views and perspectives of XploR Studio IDE are similar to Eclipse IDE. For more information about Eclipse IDE, please refer to &lt;a href="https://help.eclipse.org/latest/nav/0_2">Eclipse Platform User Guide&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="console-view">Console View&lt;/h2>
&lt;p>The Console view displays program output as well as output from the build tools. The Console view is connected to stdin, stdout, and stderr of the compilation process.
An example of Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/9.png" alt="example image">&lt;/p>
&lt;p>The Console view only represents programs that are running on the host, such as compilers and linkers. Programs running on an external target will display their output in other views, such as a terminal emulator window, depending on the type of target.&lt;/p>
&lt;h2 id="register-view">Register View&lt;/h2>
&lt;p>The Register view displays the contents of the CPU registers. The Register view is connected to the GDB server. An example of Register view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/10.png" alt="example image">&lt;/p>
&lt;h2 id="problems-view">Problems View&lt;/h2>
&lt;p>The Problems view displays problems detected by the build tools. The Problems view is connected to the build tools. An example of Problems view output:&lt;/p>
&lt;p>&lt;img src="/images_views/11.png" alt="example image">&lt;/p>
&lt;h2 id="executables-view">Executables View&lt;/h2>
&lt;p>The Executables view displays the executables that are part of the current project. The Executables view is connected to the build tools. An example of Executables view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/12.png" alt="example image">&lt;/p>
&lt;h2 id="terminal-view">Terminal View&lt;/h2>
&lt;p>The Terminal view displays a terminal emulator window. The Terminal view is connected to the host machine. An example of Terminal view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/13.png" alt="example image">&lt;/p>
&lt;p>Users can use this Terminal view to open the shell/bash console of the host machine, remote connection, or serial connection to the target platform. For example, with a serial terminal, users can specify additional parameters such as which device to connect, baud rate, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/14.png" alt="example image">&lt;/p>
&lt;h2 id="peripheral-registers-view">Peripheral Registers View&lt;/h2>
&lt;p>In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals&amp;rsquo; status such as control register values, and data register values via the Peripheral Registers View.
The Peripherals Registers View lists all peripherals available in the device hardware description .SVD file provided by the silicon vendor.
To active Peripheral registers view, select &lt;strong>Window &amp;gt; Preferences&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/15.png" alt="example image">&lt;/p>
&lt;p>Then select &lt;strong>C/C++ &amp;gt; Debug section&lt;/strong>
Click &lt;strong>Peripheral Registers Page&lt;/strong>. On this page:&lt;/p>
&lt;ul>
&lt;li>Architecture: Select RISC-V&lt;/li>
&lt;li>Vendor: Select QEMU&lt;/li>
&lt;li>Platform: Select Spike or E31mc or E31&lt;/li>
&lt;/ul>
&lt;p>The peripheral registers will be listed on the right-hand side of the page:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/16.png" alt="example image">&lt;/p>
&lt;p>Users can select registers or all registers to check, then click &lt;strong>Apply and Close&lt;/strong> button.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/17.png" alt="example image">&lt;/p>
&lt;p>The Peripheral register views will show all registers and their status.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/18.png" alt="example image">&lt;/p>
&lt;h4 id="adding-peripheral-files-to-peripheral-registers-view">Adding Peripheral files to Peripheral Registers View&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Create a new folder within the XPLOR_HOME directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Include the .metadata file in the newly created folder, using the following sample content:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;?eclipse version=&amp;#34;3.4&amp;#34;?&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;extension
point=&amp;#34;xplor.studio.regview.peripheralData&amp;#34;&amp;gt;
&amp;lt;peripheral
architecture=&amp;#34;RISCV&amp;#34;&amp;gt; &amp;lt;!-- architecture name --&amp;gt;
&amp;lt;vendor
name=&amp;#34;FPGA&amp;#34;&amp;gt; &amp;lt;!-- vendor name --&amp;gt;
&amp;lt;chip
id=&amp;#34;neorv32&amp;#34;
path=&amp;#34;/path_to_svd_file/neorv32.xml&amp;#34;&amp;gt; &amp;lt;!-- The file path must exist --&amp;gt;
&amp;lt;/chip&amp;gt;
&amp;lt;/vendor&amp;gt;
&amp;lt;/peripheral&amp;gt;
&amp;lt;/extension&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Proceed to restart the XploR Studio application.
After the restart, navigate to the &lt;strong>Peripheral Registers Page&lt;/strong> to access the newly available Architecture/Vendor/Platform options.&lt;/li>
&lt;/ul>
&lt;h2 id="debugger-console-view">Debugger Console View&lt;/h2>
&lt;p>The Debugger Console view displays the output from the GDB server. This view is useful for debugging the GDB server itself. The Debugger Console view is connected to stdin, stdout, and stderr of the GDB server process. An example of Debugger Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/24.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
If any of view disappears, users can always restore by clicking *&lt;strong>Window &amp;gt; Show View/NAME_OF_VIEW&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_views/basic/25.png" alt="example image">&lt;/p></description></item><item><title>Docs: GNU C/C++ Helloworld</title><link>/docs/examples/baremetal/gnu_helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/baremetal/gnu_helloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded projects including creating, building, running, and debugging baremetal applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>baremetal-virt-qemu-helloworld-example&lt;/strong>: Hello World C Baremetal Project for running on QEMU&lt;/li>
&lt;li>&lt;strong>baremetal-virt-qemu-helloworld-cpp-example&lt;/strong>: Hello World C++ Baremetal Project for running on QEMU&lt;/li>
&lt;li>&lt;strong>xplor-studio-baremetal-debug-plugin&lt;/strong>: ELF XploR Studio Plugin using for creating baremetal examples&lt;/li>
&lt;li>&lt;strong>rv-xplor-elf-linux64/rv-xplor-elf-win64&lt;/strong>: XploR Embedded Toolchain for RISC-V (supported both 32 and 64-bit)&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>To build, run and debug GNU Helloworld applications, please make sure that all above components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; Hello World&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/baremetal/gnu/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2></description></item><item><title>Docs: LLVM Helloworld</title><link>/docs/examples/baremetal/llvm_helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/baremetal/llvm_helloworld/</guid><description>
&lt;p>This chapter covers the basics of C embedded projects including creating, building, running, and debugging baremetal applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>baremetal-virt-qemu-helloworld-llvm-example&lt;/strong>: Hello World Baremetal (LLVM) Project for running on QEMU&lt;/li>
&lt;li>&lt;strong>xplor-studio-baremetal-debug-plugin&lt;/strong>: ELF XploR Studio Plugin using for creating baremetal examples&lt;/li>
&lt;li>&lt;strong>rv-xplor-clang-linux64/rv-xplor-clang-win64&lt;/strong>: XploR Embedded LLVM toolchain for RISC-V (support both 32 and 64-bit)&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>To build, run and debug LLVM Helloworld applications, please make sure that all above components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V Hello World with LLVM&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/baremetal/llvm/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2></description></item><item><title>Docs: Litex C Helloworld</title><link>/docs/examples/baremetal/litex_helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/baremetal/litex_helloworld/</guid><description>
&lt;p>This chapter covers the basics of Litex C embedded projects including creating, building, running, and debugging baremetal applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on hardware.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug GNU Helloworld applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-baremetal-debug-plugin&lt;/strong>: ELF XploR Studio Plugin using for creating baremetal examples&lt;/li>
&lt;li>&lt;strong>rv-xplor-elf-linux64/rv-xplor-elf-win64&lt;/strong>: XploR Embedded Toolchain for RISC-V (supported both 32 and 64-bit)&lt;/li>
&lt;li>&lt;strong>xplor-studio-hardware-target&lt;/strong>: XploR Studio Plugin using for debugging applications on Hardware&lt;/li>
&lt;li>&lt;strong>openocd-linux64/openocd-win64&lt;/strong>: OpenOCD binary to provide debugging, in-system programming and boundary-scan testing for embedded target devices&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging RISC-V applications on real hardware.
Depending on Bitfiles or FPGA Board, XploR Studio has many example components for specific cases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>baremetal-corevmcu-s10gx-helloworld-example&lt;/strong>: Hello World Baremetal Project for CORE-V-MCU run on Intel Stratix 10 GX board
&lt;ul>
&lt;li>Requires: &lt;strong>s10gx-corevmcu-bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>baremetal-neorv32-de2115-helloworld-example&lt;/strong>: Hello World Project for NEORV32 (Litex) run on Terrasic DE2-115 board
&lt;ul>
&lt;li>Requires: &lt;strong>de2115-neorv32-bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>baremetal-vexriscv-agilex-helloworld-example&lt;/strong>: Hello World Project for VexRiscv (LiteX) run on Intel Agilex board
&lt;ul>
&lt;li>Requires: &lt;strong>agilex-vexriscv-bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>baremetal-vexriscv-c10gx-helloworld-example&lt;/strong>: Hello World Project for VexRiscv (LiteX) run on Intel Cyclone 10 GX board
&lt;ul>
&lt;li>Requires: &lt;strong>c10gx-vexriscv-bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>baremetal-vexriscv-s10gx-helloworld-example&lt;/strong>: Hello World Project for VexRiscv (LiteX) run on Intel Stratix 10 GX board
&lt;ul>
&lt;li>Requires: &lt;strong>s10gx-vexriscv-bit&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Moreover, it is necessary to install &lt;a href="https://www.intel.com/content/www/us/en/collections/products/fpga/software/downloads.html">&lt;strong>Quartus Programmer&lt;/strong>&lt;/a> for programming Bitfile. After installation, please add Quartus to your environment path before starting XploR Studio.&lt;/p>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;h3 id="create-project">Create project&lt;/h3>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong>, please choose the suitable project (after clicking on a project, XploR Studio will show the description of that project):&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/baremetal/litex/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps (&lt;em>Update build settings&lt;/em>, &lt;em>Build project&lt;/em>) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h3 id="flash-bitfile">Flash Bitfile&lt;/h3>
&lt;p>To program a RISC-V Bitfile to the board, click on Flash icon &lt;img src="/examples/baremetal/litex/5.png" alt="Image alt" style="display: inline;"> on the toolbar&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/6.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>Bitfile&lt;/strong>, select &lt;strong>de2115-neorv32.sof&lt;/strong> or &lt;strong>Custom Bitfile&lt;/strong> if users use their own RISC-V Bitfile. In this case, we select &lt;em>&lt;strong>de2-115_neorv32&lt;/strong>&lt;/em> for the neorv32 - DE2-115 project.&lt;/li>
&lt;li>Select JTAG cable (if the user has multiple boards connected to the development machine).&lt;/li>
&lt;li>Click &lt;strong>Finish&lt;/strong> to flash NEORV 32-bit RISC-V core to DE2-115 board.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/baremetal/litex/7.png" alt="example image">&lt;/p>
&lt;p>To view the console output printed from the RISC-V core (for &lt;strong>NEORV32 core&lt;/strong>), open the Terminal view, select &lt;strong>Serial Terminal&lt;/strong> and select &lt;code>COM&lt;/code> port (on Windows) or &lt;code>/dev/ttyUSBx&lt;/code> port (on Linux) with the following connection settings.&lt;/p>
&lt;p>The output message on the serial terminal will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>
_ _ _ ____ ____
| | | |_ _ __| |_ __ __ _/ ___| ___ / ___|
| |_| | | | |/ _` | &amp;#39;__/ _` \___ \ / _ \| |
| _ | |_| | (_| | | | (_| |___) | (_) | |___
|_| |_|\__, |\__,_|_| \__,_|____/ \___/ \____|
|___/
Maximize your SoC design!
(c) Copyright 2020-2023 SoC.One
(c) Copyright 2012-2023 Enjoy-Digital
(c) Copyright 2007-2015 M-Labs
BIOS CRC passed (42b17cce)
HydraCore git sha1: --------
--=============== SoC ==================--
CPU: NEORV32 @ 50MHz
BUS: WISHBONE 32-bit @ 4GiB
CSR: 32-bit data
ROM: 64.0KiB
SRAM: 64.0KiB
SDRAM: 128.0MiB 32-bit @ 50MT/s (CL-2 CWL-2)
MAIN-RAM: 128.0MiB
--========== Initialization ============--
Ethernet init...
Initializing SDRAM @0x40000000...
Switching SDRAM to software control.
Switching SDRAM to hardware control.
Memtest at 0x40000000 (2.0MiB)...
Write: 0x40000000-0x40200000 2.0MiB
Read: 0x40000000-0x40200000 2.0MiB
Memtest OK
Memspeed at 0x40000000 (Sequential, 2.0MiB)...
Write speed: 14.4MiB/s
Read speed: 11.7MiB/s
--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Booting from boot.bin...
Copying boot.bin to 0x40000000...
Network boot failed.
No boot medium found
--============= Console ================--
litex&amp;gt;
&lt;/code>&lt;/pre>&lt;p>To view the console output printed from the RISC-V core (for &lt;strong>VexRISCV core&lt;/strong>), open the Terminal view, select &lt;strong>Local Terminal&lt;/strong> and run:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ jtagconfig -d
1) USB-BlasterII [1-8]
(JTAG Server Version 23.2.0 Build 94 06/14/2023 SC Pro Edition)
031820DD 10M08SA(.|ES)/10M08S(C|L) (IR=10)
Design hash BBCCCB3AC441E26FCFFA
+ Node 1C106E00 JTAG Avalon #0
+ Node 30286E00 Parallel Flash Loader #0
02E120DD 10CX220Y (IR=10)
Design hash C19BBD971B8FE87E0FB0
+ Node 08986E00 Nios V #0
+ Node 0C006E00 JTAG UART #0
Captured DR after reset = (0063041BB02E120DD) [65]
Captured IR after reset = (0AAD55) [21]
Captured Bypass after reset = (2) [3]
Captured Bypass chain = (0) [3]
JTAG clock speed auto-adjustment is enabled. To disable, set JtagClockAutoAdjust parameter to 0
JTAG clock speed 24 MHz
&lt;/code>&lt;/pre>&lt;p>So the index of cable is 1, then run &lt;code>nios2-terminal -c 1 -d 2 -i 0&lt;/code> and the output will be like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>nios2-terminal: connected to hardware target using JTAG UART on cable
nios2-terminal: &amp;#34;USB-BlasterII [1-8]&amp;#34;, device 2, instance 0
nios2-terminal: (Use the IDE stop button or Ctrl-C to terminate)
_ _ _ ____ ____
| | | |_ _ __| |_ __ __ _/ ___| ___ / ___|
| |_| | | | |/ _` | &amp;#39;__/ _` \___ \ / _ \| |
| _ | |_| | (_| | | | (_| |___) | (_) | |___
|_| |_|\__, |\__,_|_| \__,_|____/ \___/ \____|
|___/
Maximize your SoC design!
(c) Copyright 2020-2023 SoC.One
(c) Copyright 2012-2023 Enjoy-Digital
(c) Copyright 2007-2015 M-Labs
BIOS CRC passed (ac8aa09b)
HydraCore git sha1: --------
--=============== SoC ==================--
CPU: VexRiscv_VjtagDebug @ 100MHz
BUS: WISHBONE 32-bit @ 4GiB
CSR: 32-bit data
ROM: 64.0KiB
SRAM: 64.0KiB
L2: 8.0KiB
MAIN-RAM: 1.0GiB
--========== Initialization ============--
Ethernet init...
Memtest at 0x40000000 (2.0MiB)...
Write: 0x40000000-0x40200000 2.0MiB
Read: 0x40000000-0x40200000 2.0MiB
Memtest OK
Memspeed at 0x40000000 (Sequential, 2.0MiB)...
Write speed: 31.2MiB/s
Read speed: 23.0MiB/s
--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Booting from boot.bin...
Copying boot.bin to 0x40000000...
Network boot failed.
No boot medium found
--============= Console ================--
litex&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Now the board is ready to run or debug applications.&lt;/p>
&lt;h3 id="run-project-on-hardware-platform">Run project on hardware platform&lt;/h3>
&lt;blockquote>
&lt;p>It is recommended to program the bitstream to board before starting running project. Please refer to &lt;a href="/docs/examples/baremetal/litex_helloworld#flash-ip-core">previous section&lt;/a> for how to program the bitstream.&lt;/p>
&lt;/blockquote>
&lt;p>To run the application on hardware without debugging, select project in the Project Explorer, click &lt;strong>Run as &amp;gt; Run configurations&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/8.png" alt="example image">&lt;/p>
&lt;p>Then create a new &lt;strong>RISC-V Running&lt;/strong> configuration with the following information.&lt;/p>
&lt;ul>
&lt;li>Platform: Choose hardware platform, for example: &lt;strong>FPGA&lt;/strong> &amp;gt; &lt;strong>Terrasic Board&lt;/strong> &amp;gt; &lt;strong>Neorv32&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/baremetal/litex/9.png" alt="example image">&lt;/p>
&lt;p>On the Terminal view, the message will be printed.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/10.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-hardware-platform">Debug project on hardware platform&lt;/h3>
&lt;blockquote>
&lt;p>It is recommended to program the bitstream to board before starting debugging project. Please refer to &lt;a href="/docs/examples/baremetal/litex_helloworld#flash-ip-core">previous section&lt;/a> for how to program the bitstream.&lt;/p>
&lt;/blockquote>
&lt;p>To debug the application on hardware, select project in the Project Explorer, click &lt;strong>Debug as &amp;gt; Debug Confihurations&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/11.png" alt="example image">&lt;/p>
&lt;p>Then create a new RISC-V Running configuration with the following information.&lt;/p>
&lt;p>On tab &lt;strong>Debugger&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Platform: Choose hardware platform, for example: &lt;strong>FPGA&lt;/strong> &amp;gt; &lt;strong>Terrasic DE2-115 Board&lt;/strong> &amp;gt; &lt;strong>Neorv32&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/baremetal/litex/12.png" alt="example image">&lt;/p>
&lt;p>After selecting &lt;strong>Apply&lt;/strong> and &lt;strong>Debug&lt;/strong>, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/13.png" alt="example image">&lt;/p>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;h3 id="debug-project-with-custom-openocd">Debug project with custom OpenOCD&lt;/h3>
&lt;p>Create a new debug configuration on &lt;strong>Debug Configurations&lt;/strong> dialog by double-clicking on &lt;strong>RISC-V Debugging&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/11.png" alt="example image">&lt;/p>
&lt;p>On the tab &lt;strong>Debugger&lt;/strong>, select option &lt;strong>Terrasic DE2-115 Board&lt;/strong> in &lt;strong>FPGA&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/12.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>OpenOCD Options&lt;/strong>, we use the openocd binary of Quartus and the default openocd configuration file.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/21.png" alt="example image">&lt;/p>
&lt;p>Users can browse the custom openocd binary and the custom openocd configuration file.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/22.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong> to start debugging with the custom openocd binary.&lt;/p>
&lt;h3 id="for-fpga-cyclone-10-gx">For FPGA Cyclone 10 GX&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>In &lt;a href="/docs/examples/baremetal/litex_helloworld#flash-ip-core">&lt;span style="color: blue">Programming Bitfile&lt;/span>&lt;/a> step, please choose the JTAG Cable has postfix is &lt;code>02E120DD&lt;/code>. If not, it will show error like belows:&lt;/p>
&lt;pre tabindex="0">&lt;code>*************** Intel FPGA board flash start ***************
Info (19848): Regular SEU info =&amp;gt; 105 sector(s), 8 thread(s), 10000000 interval time in microsecond(s)
Info (19848): IO hash is 375D44051CBCD1FB1F349EB0B5ACD027F92657328775E3F463232CDB69BE6348
Info (19848): Keyed hash is B670402376FE190A33DBF30EBAD19B18AACC03926BD9F0F5A709DA7A30CF88C2
Info (19848): Design hash is 77B1BDFD03B8C8A53D651348C5A9BFFF51434DB77B1C5336286B597E40C3EA22
Info (19848): IO hash is 375D44051CBCD1FB1F349EB0B5ACD027F92657328775E3F463232CDB69BE6348
Info (19848): Keyed hash is CFA76139E3B99B431DB2D40867858F9DF93B0E80F91C3D1907853B7A1B913025
Info: *******************************************************************
Info: Running Quartus Prime Programmer
Info: Version 23.2.0 Build 94 06/14/2023 SC Pro Edition
Info: Copyright (C) 2023 Intel Corporation. All rights reserved.
Info: Your use of Intel Corporation&amp;#39;s design tools, logic functions
Info: and other software and tools, and any partner logic
Info: functions, and any output files from any of the foregoing
Info: (including device programming or simulation files), and any
Info: associated documentation or information are expressly subject
Info: to the terms and conditions of the Intel Program License
Info: Subscription Agreement, the Intel Quartus Prime License Agreement,
Info: the Intel FPGA IP License Agreement, or other applicable license
Info: agreement, including, without limitation, that your use is for
Info: the sole purpose of programming logic devices manufactured by
Info: Intel and sold by Intel or its authorized distributors. Please
Info: refer to the applicable agreement for further details, at
Info: https://fpgasoftware.intel.com/eula.
Info: Processing started: Fri Sep 15 15:56:03 2023
Info: System process ID: 13773
Info: Command: quartus_pgm -c 1 -m JTAG -o p;/home/ubuntu/.xplor//components/bitstream-s10gx-corevmcu/s10gx_corevmcu.sof@1
Info (213045): Using programming cable &amp;#34;USB-BlasterII [1-8]&amp;#34;
Info (213011): Using programming file /home/ubuntu/.xplor/components/bitstream-s10gx-corevmcu/s10gx_corevmcu.sof with checksum 0x46CB0DC5 for device 1SG280LU2F50@1
Info (209060): Started Programmer operation at Fri Sep 15 15:56:09 2023
Info (18942): Configuring device index 1
Error (18939): Unexpected error in JTAG server: Chain in use - check
Error (209012): Operation failed
Info (209061): Ended Programmer operation at Fri Sep 15 15:56:09 2023
Error: Quartus Prime Programmer was unsuccessful. 2 errors, 0 warnings
Error: Peak virtual memory: 2326 megabytes
Error: Processing ended: Fri Sep 15 15:56:09 2023
Error: Elapsed time: 00:00:06
Error: System process ID: 13773
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>In the &lt;a href="/docs/examples/baremetal/litex_helloworld/#run-project-on-hardware-platform">&lt;span style="color: blue">Run project&lt;/span>&lt;/a> step, in &lt;strong>Main&lt;/strong> &amp;gt; &lt;strong>Configuration&lt;/strong> &amp;gt; &lt;strong>Default Configuration&lt;/strong>, please choose &lt;code>FPGA USB-Blaster II (vjtag, vexriscv-c10gx)&lt;/code>.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/23.png" alt="example image">&lt;/p>
&lt;p>If not, the debug session will be terminated immediately because of wrong OpenOCD configuration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In the &lt;a href="/docs/examples/baremetal/litex_helloworld/#debug-project-on-hardware-platform">&lt;span style="color: blue">Debug project&lt;/span>&lt;/a> step, in &lt;strong>Debugger&lt;/strong> &amp;gt; &lt;strong>OpenOCD Options&lt;/strong> &amp;gt; &lt;strong>Default Configuration&lt;/strong>, please choose &lt;code>FPGA USB-Blaster II (vjtag, vexriscv-c10gx)&lt;/code>.&lt;/p>
&lt;p>&lt;img src="/examples/baremetal/litex/24.png" alt="example image">&lt;/p>
&lt;p>If not, the debug session will be terminated immediately because of wrong OpenOCD configuration.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="common-errors">Common errors&lt;/h2></description></item><item><title>Docs: GNU C/C++ Helloworld</title><link>/docs/examples/linux/linux-helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/linux/linux-helloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded Linux projects, including create/build/run/debug embedded Linux applications. The project referred to by this chapter is called “Hello World.” This application prints “Hello World” text and runs a simple for-loop for simple demonstration. The application can also be built and run both on QEMU emulator and FPGA DE2-115 board.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug Embedded Linux applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;h3 id="for-debugging-with-qemu-emulator">For debugging with QEMU emulator&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-linux-debug-plugin&lt;/strong>: XploR Studio Linux Plugin using for kernel debugging&lt;/li>
&lt;li>&lt;strong>rv-linux-rootfs&lt;/strong>: RISC-V RootFS can be booted by QEMU and can run/debug RISC-V Embedded Linux applications&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging Embedded Linux applications.
Depending on variation of toolchain, XploR Studio has 4 different Linux toolchain components:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rv32imac-xplor-linux-linux64/rv32imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (no Float)&lt;/li>
&lt;li>&lt;strong>rv32gc-xplor-linux-linux64/rv32gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (Double)&lt;/li>
&lt;li>&lt;strong>rv64imac-xplor-linux-linux64/rv64imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (no Float)&lt;/li>
&lt;li>&lt;strong>rv64gc-xplor-linux-linux64/rv64gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (Double)&lt;/li>
&lt;/ul>
&lt;p>Each toolchain can be downloaded separately.&lt;/p>
&lt;h3 id="for-debugging-with-fpga-de2-115-board">For debugging with FPGA DE2-115 board&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-linux-debug-plugin&lt;/strong>: XploR Studio Linux Plugin using for kernel debugging&lt;/li>
&lt;li>&lt;strong>rv32-linux-rootfs-vexriscv&lt;/strong>: The Linux images of the VexRISCV RISC-V Processor on Terrasic DE2-115 board&lt;/li>
&lt;li>&lt;strong>xplor-studio-hardware-target&lt;/strong>: OpenOCD XploR Studio Plugin using for debugging applications on Hardware&lt;/li>
&lt;li>&lt;strong>openocd-linux64/openocd-win64&lt;/strong>: OpenOCD binary to provide debugging, in-system programming and boundary-scan testing for embedded target devices&lt;/li>
&lt;li>&lt;strong>rv32imac-xplor-linux-linux64/rv32imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (no Float)&lt;/li>
&lt;/ul>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Linux Project &amp;gt; Hello World&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/linux/gnu/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps (building, running and debugging with QEMU emulator) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="working-flow-for-debugging-with-fpga-de2-115-board">Working flow for debugging with FPGA DE2-115 board&lt;/h2>
&lt;h3 id="programming-bitfile">Programming Bitfile&lt;/h3>
&lt;p>To program a RISC-V Bitfile to the board, click on Flash icon &lt;img src="/examples/baremetal/litex/5.png" alt="Image alt" style="display: inline;"> on the toolbar&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/13.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>Bitfile&lt;/strong>, select &lt;strong>de2115-vexriscv32.sof&lt;/strong> or &lt;strong>Custom Bitfile&lt;/strong> if users use their own RISC-V Bitfile. In this case, we select &lt;em>&lt;strong>de2-115_vexrisc32&lt;/strong>&lt;/em> for the vexriscv - DE2-115 project.&lt;/li>
&lt;li>Select JTAG cable (if the user has multiple boards connected to the development machine).&lt;/li>
&lt;li>Click &lt;strong>Finish&lt;/strong> to flash Vexriscv 32-bit RISC-V core to DE2-115 board.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/linux/gnu/14.png" alt="example image">&lt;/p>
&lt;p>To view the console output printed from the RISC-V core, open the Terminal view and select &lt;code>COM&lt;/code> port (on Windows) or &lt;code>/dev/ttyUSBx&lt;/code> port (on Linux) with the following connection settings.&lt;/p>
&lt;p>The output message on the serial terminal will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>
_ _ _ ____ ____
| | | |_ _ __| |_ __ __ _/ ___| ___ / ___|
| |_| | | | |/ _` | &amp;#39;__/ _` \___ \ / _ \| |
| _ | |_| | (_| | | | (_| |___) | (_) | |___
|_| |_|\__, |\__,_|_| \__,_|____/ \___/ \____|
|___/
Maximize your SoC design!
(c) Copyright 2020-2023 SoC.One
(c) Copyright 2012-2023 Enjoy-Digital
(c) Copyright 2007-2015 M-Labs
BIOS CRC passed (42b17cce)
HydraCore git sha1: --------
--=============== SoC ==================--
CPU: NEORV32 @ 50MHz
BUS: WISHBONE 32-bit @ 4GiB
CSR: 32-bit data
ROM: 64.0KiB
SRAM: 64.0KiB
SDRAM: 128.0MiB 32-bit @ 50MT/s (CL-2 CWL-2)
MAIN-RAM: 128.0MiB
--========== Initialization ============--
Ethernet init...
Initializing SDRAM @0x40000000...
Switching SDRAM to software control.
Switching SDRAM to hardware control.
Memtest at 0x40000000 (2.0MiB)...
Write: 0x40000000-0x40200000 2.0MiB
Read: 0x40000000-0x40200000 2.0MiB
Memtest OK
Memspeed at 0x40000000 (Sequential, 2.0MiB)...
Write speed: 14.4MiB/s
Read speed: 11.7MiB/s
--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Booting from boot.bin...
Copying boot.bin to 0x40000000...
Network boot failed.
No boot medium found
--============= Console ================--
litex&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on the DE2-115 board.&lt;/li>
&lt;li>There are two built-in SoC SOFs on XploR Studio to flash DE2-115 for embedded Linux applications:&lt;/li>
&lt;li>One for MII network mode where speed is 10 Mbps&lt;/li>
&lt;li>One for RGMII network mode where speed is 1000Mps&lt;/li>
&lt;li>Development PC IP address: 192.168.1.100&lt;/li>
&lt;li>The TFTP server is running the development PC and serving Linux image&lt;/li>
&lt;/ul>
&lt;h3 id="booting-linux-to-de2-115-board">Booting Linux to DE2-115 board&lt;/h3>
&lt;p>In Serial Terminal, if you see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> Booting from network...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Local IP: 192.168.1.50
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Remote IP: 192.168.1.100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.json...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.bin...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Copying boot.bin to 0x40000000...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Network boot failed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> No boot medium found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That means the Linux kernel cannot be booted correctly. So, please do the follow steps in &lt;a href="/docs/examples/linux/linux-helloworld#notes">here&lt;/a>.&lt;/p>
&lt;p>If output as follows, that means Linux be booted properly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> Starting Dropbear SSH server: Waiting &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kernel randomness to be initialised...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 14.144009&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> random: crng init &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Generating &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> bit rsa key, this may take a &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Public key portion is:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCMeX37iv5Hw5MadvVwd+UIVeSIx1QecoV8OiPOt65obbokDxvaol0PsfCHBi0h23zxhhzUHizKDAu9fJ7gQVLWfHjcGKA4x4XuY8O3TasjnzpAntjXgWcBOpw3zpM46skOl65zfJqq6AIH14IzCqs+VDUE2dKjv+4mRbiX3A5Ovw&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> root@de2-115-vexriscv32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Fingerprint: sha1!! 5a:9f:05:35:11:2c:e2:e1:b8:71:a4:8e:f5:a3:8a:1d:76:b6:f2:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropbear.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Rvdn 1.0 de2-115-vexriscv32 /dev/console
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> de2-115-vexriscv32 login:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Login and setup connection to debug
- Login by typing &lt;code>root&lt;/code> without password
- Run &lt;code>ifconfig eth0 192.168.1.50 netmask 255.255.255.0&lt;/code>
``` sh
Rvdn 1.0 de2-115-vexriscv32 /dev/console&lt;/p>
&lt;pre>&lt;code> de2-115-vexriscv32 login: root
login[58]: root login on 'console'
root@de2-115-vexriscv32:~# ifconfig eth0 192.168.1.50 netmask 255.255.255.0
```
&lt;/code>&lt;/pre>
&lt;h3 id="debug-application">Debug application&lt;/h3>
&lt;p>Currently, &lt;strong>rv32imac-xplor-linux-linux64/rv32imac-xplor-linux-win64&lt;/strong> is the only toolchain supported. Please change the project settings to use the correct toolchain&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Right click on the project then select properties.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In project settings, select&lt;/p>
&lt;ul>
&lt;li>Architecture: RV32 (-march=rv32i*)&lt;/li>
&lt;li>Floating point: None&lt;/li>
&lt;li>Integer ABI: ILP32 (-mabi=ilp32*)&lt;/li>
&lt;li>Floating point ABI: None&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/linux/gnu/43.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Apply and Close&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>There are some differences when debugging Linux applications, it is necessary to update some config as follows:&lt;/p>
&lt;p>On the Debugger tab, select Remote Application by default.&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/46.png" alt="example image">&lt;/p>
&lt;p>On the Configuration, select &amp;ldquo;&lt;strong>Advanced Configuration&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/47.png" alt="example image">&lt;/p>
&lt;p>Click the &lt;strong>New&lt;/strong> button to create a new connection configuration, then select &lt;strong>SSH&lt;/strong> as connection type:&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/48.png" alt="example image">&lt;/p>
&lt;p>On the &amp;ldquo;New Connection&amp;rdquo; dialog.&lt;/p>
&lt;ul>
&lt;li>Connection name: The name of connection&lt;/li>
&lt;li>Host: 192.168.1.50. This is the default IP address of Linux run on board. If you use a different subnet when booting Linux, please update this IP too.&lt;/li>
&lt;li>User: root&lt;/li>
&lt;li>Use password-based authentication: No password&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/linux/gnu/49.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Finish&lt;/strong> to create the connection configuration.&lt;/p>
&lt;p>In the Connections dropdown, select the newly created connection name and set the destination file path to copy the application to the board.&lt;/p>
&lt;p>On the Remote Absolute File Path for C/C++ Application, enter the path of the elf file that is copied to Linux (ex: /tmp/riscv.elf).&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/50.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Debug&lt;/strong> to start debugging.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-intel-fpga-de2-115-platform-on-windows-10">Running and Debugging project with Intel FPGA DE2-115 platform on Windows 10&lt;/h2>
&lt;h3 id="hardware-and-driver-preparations">Hardware and driver preparations&lt;/h3>
&lt;p>Please refer to the &lt;a href="/docs/hardware-environment/hardware#driver-installation">Hardware and Environment Setup&lt;/a> document for more details.&lt;/p>
&lt;h4 id="login-and-setup-connection-from-board-to-host">Login and setup connection from board to host&lt;/h4>
&lt;p>After booting Linux successfully,&lt;/p>
&lt;pre>&lt;code>``` sh
Starting Dropbear SSH server: Waiting for kernel randomness to be initialised...
[ 14.144009] random: crng init done
Generating 1024 bit rsa key, this may take a while...
Public key portion is:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCMeX37iv5Hw5MadvVwd+UIVeSIx1QecoV8OiPOt65obbokDxvaol0PsfCHBi0h23zxhhzUHizKDAu9fJ7gQVLWfHjcGKA4x4XuY8O3TasjnzpAntjXgWcBOpw3zpM46skOl65zfJqq6AIH14IzCqs+VDUE2dKjv+4mRbiX3A5Ovw== root@de2-115-vexriscv32
Fingerprint: sha1!! 5a:9f:05:35:11:2c:e2:e1:b8:71:a4:8e:f5:a3:8a:1d:76:b6:f2:ff
dropbear.
Rvdn 1.0 de2-115-vexriscv32 /dev/console
de2-115-vexriscv32 login:
```
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>Login by typing &lt;code>root&lt;/code> without password&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>ifconfig eth0 192.168.1.50 netmask 255.255.255.0&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> Rvdn 1.0 de2-115-vexriscv32 /dev/console
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> de2-115-vexriscv32 login: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> login&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>58&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: root login on &lt;span style="color:#4e9a06">&amp;#39;console&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root@de2-115-vexriscv32:~# ifconfig eth0 192.168.1.50 netmask 255.255.255.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>Now board is ready for debugging application.&lt;/p>
&lt;h3 id="debug-application-1">Debug application&lt;/h3>
&lt;p>Create debug configurations and debug are same to Linux.&lt;/p>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;h3 id="setup-environment-on-ubuntu">Setup environment on Ubuntu&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Install &lt;strong>rv32-linux-rootfs-vexriscv&lt;/strong> component&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start/Restart TFTP server (Linux)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> docker rm -f tftpboot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$HOME&lt;/span>/.xplor/components/rootfs-vexriscv-de2115/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker run -itd --name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>tftpboot --net&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PWD&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/var/tftpboot pghalliday/tftp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Configure IP address for DE2-115 board:&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/24.png" alt="example image">&lt;/p>
&lt;p>The DE2-115 board has 2 configurations for ethernet: &lt;strong>RGMII mode&lt;/strong> and &lt;strong>MII mode&lt;/strong>. Depending on the speed of link (1000Mbps or not), please choose a suitable mode for the board to run/debug applications.&lt;/p>
&lt;p>&lt;strong>RGMII mode:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Network interface on the host PC connects to &lt;strong>ETHERNET0&lt;/strong> of DE2-115. &lt;strong>The connection could be directly or via router/switches&lt;/strong>.&lt;/li>
&lt;li>On the board, set Jumper JP1 to pins 1 and 2. It’s default mode (RGMII mode).&lt;/li>
&lt;li>Default IP addresses:
&lt;ul>
&lt;li>DE2-115 board: 192.168.1.50&lt;/li>
&lt;li>TFTP server: 192.168.1.100&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. If users want to use a different subnet, please update the IP of the board.&lt;/p>
&lt;p>To update the IP of the board, after programming FPGA bitstream, open the &lt;code>/dev/ttyUSB*&lt;/code> or &lt;code>COM*&lt;/code> port console to the board and set the IP as:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Command&lt;/th>
&lt;th style="text-align:left">Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">eth_local_ip&lt;/td>
&lt;td style="text-align:left">Set the IP address of the board&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">eth_remote_ip&lt;/td>
&lt;td style="text-align:left">Set the expected IP of the TFTP Server to download kernel/rootfs for network booting&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">netboot&lt;/td>
&lt;td style="text-align:left">Start booting Linux from the network&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="/examples/linux/gnu/25.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>MII mode&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Network interface on the host PC connects to &lt;strong>port 0&lt;/strong> of DE2-115.&lt;/li>
&lt;li>Connection speed is 10 Mpbs.&lt;/li>
&lt;li>On the board, set Jumper JP1 to pins 2 and 3 (to config Ethernet port 0 to run on MII mode).&lt;/li>
&lt;li>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. The network speed and IP can be set with the following command:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Assume that the network interface is enxf8e43b5dd64a
NIC=enxf8e43b5dd64a
sudo ethtool -s $NIC speed 10 duplex full autoneg off
# Double check
ethtool $NIC
# IP needs to be fixed as 192.168.1.100
# Make sure that IPv4 method is manual
sudo ifconfig $NIC 192.168.1.100
&lt;/code>&lt;/pre>&lt;p>&lt;img src="/examples/linux/gnu/27.png" alt="example image">&lt;/p>
&lt;p>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. If users want to use a different subnet, please update the IP of the board.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Netboot/Reboot Linux
Then setup IP address (if needed) and run &lt;code>netboot&lt;/code> in Litex console or re-program Bitfile.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="setup-environment-on-windows-1011">Setup environment on Windows 10/11&lt;/h3>
&lt;h4 id="setup-solartftp-server-on-windows-10">Setup SolarTFTP server on Windows 10&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Administrator permission&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SolarWinds TFTP Server&lt;/strong>: To set up a TFTP server, users will have to download the TFTP Server utility such as SolarWinds can be downloaded from &lt;a href="https://www.solarwinds.com/free-tools/free-tftp-server">https://www.solarwinds.com/free-tools/free-tftp-server&lt;/a>. Once the .zip file is downloaded, extract it and go through the straightforward installation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Firewall setup&lt;/strong>: To allow remote access to the TFTP server, users need to open the firewall for TFTP service.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Start the TFTP Server&lt;/strong>&lt;/p>
&lt;p>Run the &lt;strong>SolarWinds TFTP Server&lt;/strong> utility by going to the &lt;strong>Start Menu&lt;/strong> and searching for &lt;strong>TFTP Server&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/28.png" alt="example image">&lt;/p>
&lt;p>Once it loads up, copy all the file in &lt;strong>rootfs-vexriscv-de2115/&lt;/strong> folder to &lt;strong>C:\TFTP-Root&lt;/strong> folder.&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/59.1.png" alt="example image">&lt;/p>
&lt;h4 id="update-ip-of-tftp-server">Update IP of TFTP server&lt;/h4>
&lt;p>Go to *&lt;strong>Network and Internet settings&lt;/strong> by click on &lt;img src="/examples/linux/gnu/60.png" alt="Image alt" style="display: inline;">&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/61.png" alt="example image">&lt;/p>
&lt;p>As image, there are 2 networks:&lt;/p>
&lt;pre>&lt;code>- The `Ethernet 3` for connecting to Internet
- The `Ethernet` for connecting to DE2-115 Board
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/examples/linux/gnu/62.png" alt="example image">&lt;/p>
&lt;p>Click on &lt;strong>Properties&lt;/strong> on &lt;code>Ethernet&lt;/code>:&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/64.png" alt="example image">&lt;/p>
&lt;p>Now we need to setup IP manually bt click on &lt;strong>Edit&lt;/strong> button, choose &lt;strong>Manual&lt;/strong> , type as image and &lt;strong>Save&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/65.png" alt="example image">&lt;/p>
&lt;p>After that, restart the SolarTFTP server and programming Bitfile again.&lt;/p>
&lt;p>&lt;img src="/examples/linux/gnu/66.png" alt="example image">&lt;/p>
&lt;p>If Serial Terminal stills show &lt;em>Network boot failed&lt;/em>, please try to turn off your Windows Firewall and reprogram Bitfile.&lt;/p>
&lt;h2 id="common-errors">Common errors&lt;/h2></description></item><item><title>Docs: LLVM C/C++ Helloworld</title><link>/docs/examples/linux/llvm-helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/linux/llvm-helloworld/</guid><description>
&lt;p>This chapter covers the basics of LLVM C/C++ embedded Linux projects, including create/build/run/debug embedded Linux applications. The project referred to by this chapter is called “Hello World.” This application prints “Hello World” text and runs a simple for-loop for simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug LLVM Embedded Linux applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-linux-debug-plugin&lt;/strong>: Kernel XploR Studio Plugin using for kernel debugging&lt;/li>
&lt;li>&lt;strong>rv-linux-rootfs&lt;/strong>: RISC-V RootFS can be booted by QEMU and can run/debug RISC-V Embedded Linux applications&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging LLVM Embedded Linux applications.
Depending on variation of toolchain, XploR Studio has 2 different Linux toolchain components:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rv32gc-xplor-linux-linux64/rv32gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (Double)&lt;/li>
&lt;li>&lt;strong>rv64gc-xplor-linux-linux64/rv64gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (Double)&lt;/li>
&lt;/ul>
&lt;p>Each toolchain can be downloaded separately.&lt;/p>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Linux Project &amp;gt; Hello World (with LLVM)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/linux/llvm/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps (building, running and debugging with QEMU emulator) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ul>
&lt;li>On Ubuntu, LLVM Embedded Linux toolchain is packaged inside the Embedded Linux toolchain that supports Double extension (&lt;strong>riscv32-xplord-linux&lt;/strong> and &lt;strong>riscv64-xplord-linux&lt;/strong>).&lt;/li>
&lt;li>LLVM Embedded Linux toolchain has not been supported on Windows yet.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Kernel Debug examples</title><link>/docs/examples/linux/kernel-debug/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/linux/kernel-debug/</guid><description>
&lt;p>This chapter covers the basics of Linux Kernel projects including creating and debugging a &lt;strong>static Kernel&lt;/strong>.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug Linux static kernel, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-kernel-debug-plugin&lt;/strong>: Kernel XploR Studio Plugin using for kernel debugging&lt;/li>
&lt;li>&lt;strong>rv-linux-rootfs-debug&lt;/strong>: RISC-V RootFS for running/debugging Kernel and Embedded Linux applications&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging static kernel.
Depending on variation of toolchain, XploR Studio has 4 different Linux toolchain components:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rv32imac-xplor-linux-linux64/rv32imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (no Float)&lt;/li>
&lt;li>&lt;strong>rv32gc-xplor-linux-linux64/rv32gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 32-bit (Double)&lt;/li>
&lt;li>&lt;strong>rv64imac-xplor-linux-linux64/rv64imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (no Float)&lt;/li>
&lt;li>&lt;strong>rv64gc-xplor-linux-linux64/rv64gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (Double)&lt;/li>
&lt;/ul>
&lt;p>Each toolchain can be downloaded separately.&lt;/p>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;h3 id="create-a-new-project">Create a new project&lt;/h3>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C/C++ Project&lt;/strong>, choose &lt;strong>Linux Kernel Project&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/1.png" alt="example image">&lt;/p>
&lt;p>Enter the &lt;em>Project name&lt;/em> and select &lt;strong>Embedded Linux XploR Toolchain for RISC-V&lt;/strong> in the Toolchains box, then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/2.png" alt="example image">&lt;/p>
&lt;p>Select &lt;em>Kernel Source Path&lt;/em> then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/3.png" alt="example image">&lt;/p>
&lt;h3 id="update-build-settings">Update build settings&lt;/h3>
&lt;p>With build settings, users can switch from 32 bits to 64 bits as well as different floating point ABI options (except Single Precision). The kernels are specified via those options.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/4.png" alt="example image">&lt;/p>
&lt;p>Please refer to the below table to select the correct options for each target.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Platform&lt;/th>
&lt;th style="text-align:center">Core&lt;/th>
&lt;th style="text-align:center">Architecture&lt;/th>
&lt;th style="text-align:center">Floating Point&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="build-project">Build project&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Warning:&lt;/strong>
&lt;strong>The Static Kernel project does not need to be built because the XploR Studio uses a pre-build kernel image for debugging.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/examples/linux/debug-kernel/5.png" alt="example image">&lt;/p>
&lt;h3 id="running-the-kernel-with-qemu-emulator">Running the kernel with QEMU emulator&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
XploR Studio does not support to the run Static Kernel project!&lt;/p>
&lt;/blockquote>
&lt;h3 id="debugging-the-kernel-with-qemu-emulator">Debugging the kernel with QEMU emulator&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to &lt;a href="#update-build-settings">Section 2: Update build settings&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>There are two ways to debug the kernel:&lt;/p>
&lt;ul>
&lt;li>On the Project explorer, right-click on the project name and select &lt;strong>Debug as &amp;gt; RISC-V Kernel application with QEMU.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/linux/debug-kernel/6.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Create the new &lt;strong>RISC-V Kernel Debugging&lt;/strong> configurations: Right-click on the project name then select &lt;strong>Debug As &amp;gt; Debug Configurations.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/linux/debug-kernel/7.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Kernel Debugging&lt;/strong>, then click &lt;strong>Debug&lt;/strong> to start the Kernel debugging session.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/8.png" alt="example image">&lt;/p>
&lt;p>When starting kernel debugging, the kernel is suspended in the start_kernel function and the terminal/console pauses at kernel booting.&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/9.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>To debug an &lt;a href="/docs/examples/linux/linux-helloworld">&lt;span style="color: blue">embedded Linux applications&lt;/span>&lt;/a>, the kernel should be booted completely.&lt;/strong>&lt;/p>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;p>To switch arch between 32-bit and 64-bit, users should remove the old Debug Kernel Configuration and create a new one to change the kernel (vmlinux).&lt;/p>
&lt;p>Or users can replace vmlinux manually at: &lt;code>~/.xplor/components/rv-linux-rootfs-debug/rv***_debugkernel/vmlinux&lt;/code>&lt;/p>
&lt;p>Sometimes unable to debug Kernel for the first time with information such as follows:&lt;/p>
&lt;p>&lt;img src="/examples/linux/debug-kernel/9-1.png" alt="example image">&lt;/p></description></item><item><title>Docs: FreeRTOS Examples</title><link>/docs/examples/rtos/freertos/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/rtos/freertos/</guid><description>
&lt;p>This chapter covers the basics of C/C++ FreeRTOS projects including creating, building, running, and debugging FreeRTOS applications. Through the debug session, users can examine RTOS objects such as Task, Heap, Timer and Queue. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug C/C++ FreeRTOS applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-freertos-debug-plugin&lt;/strong>: FreeRTOS XploR Studio Plugin using for creating FreeRTOS examples and supporting RTOS views&lt;/li>
&lt;li>&lt;strong>rv-xplor-elf-linux64/rv-xplor-elf-win64&lt;/strong>: XploR Embedded Toolchain for RISC-V (supported both 32 and 64-bit)&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging FreeRTOS projects.&lt;/p>
&lt;p>Depending on applications, XploR Studio has many example components for specific cases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>freertos-virt-qemu-blinky-example&lt;/strong>: Blinky FreeRTOS Project for XploR Studio
&lt;ul>
&lt;li>This application prints &lt;strong>Blink&lt;/strong> text&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>freertos-virt-qemu-heap-example&lt;/strong>: Generic Heap FreeRTOS Project for XploR Studio
&lt;ul>
&lt;li>This application simply prints &lt;strong>Testing Heap&lt;/strong> on the console screen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>freertos-virt-qemu-timer-example&lt;/strong>: Timer FreeRTOS Project for XploR Studio
&lt;ul>
&lt;li>This application simply prints &lt;strong>Testing Timer&lt;/strong> on the console screen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ul>
&lt;li>To open FreeRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Others&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>FreeRTOS Object Views&lt;/strong>&lt;/li>
&lt;li>The FreeRTOS object views only contain information when user debugs a FreeRTOS project&lt;/li>
&lt;li>Depending on the FreeRTOS application, &lt;strong>not all FreeRTOS objects will display valid information&lt;/strong>. For example, if the application does not utilize a Timer object, XploR Studio will not display any useful information on FreeRTOS Timer view.&lt;/li>
&lt;li>The display of FreeRTOS views is dependent on the &lt;strong>xplor-studio-freertos&lt;/strong> component. Therefore, if you uninstall this component, please close these views to prevent any errors.&lt;/li>
&lt;/ul>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;h3 id="create-project">Create project&lt;/h3>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong>, please choose the suitable project (after clicking on a project, XploR Studio will show the description of that project):&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/rtos/freertos/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps (&lt;em>Update build settings&lt;/em>, &lt;em>Build project&lt;/em>) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="freertos-views">FreeRTOS views&lt;/h2>
&lt;p>During the FreeRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Task, Queue, Heap, and Timer. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;h3 id="freertos-task-view">FreeRTOS Task View&lt;/h3>
&lt;p>The FreeRTOS task view helps developers examine tasks during debug sessions. Each object is identified by its ID, name, address, state, task state, stack usage, event object, runtime, and priority.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/freertos/20.png" alt="example image">&lt;/p>
&lt;h3 id="freertos-queue-view">FreeRTOS Queue View&lt;/h3>
&lt;p>The FreeRTOS Queue view helps developers examine queues during debug sessions. Each object is identified by its type, ID, name, address, length, size, and state of TX and RX.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/freertos/21.png" alt="example image">&lt;/p>
&lt;h3 id="freertos-timer-view">FreeRTOS Timer View&lt;/h3>
&lt;p>The FreeRTOS Timer view helps developers examine timers during debug sessions. Each object is identified by its ID, name, status, callback functions, and similar.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/freertos/22.png" alt="example image">&lt;/p>
&lt;h3 id="freertos-heap-view">FreeRTOS Heap View&lt;/h3>
&lt;p>The FreeRTOS Heap view helps developers examine heaps during debug sessions. Each object is identified by its ID, address, usage information, and similar.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/freertos/23.png" alt="example image">&lt;/p></description></item><item><title>Docs: ZephyrRTOS Examples</title><link>/docs/examples/rtos/zephyr/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/rtos/zephyr/</guid><description>
&lt;p>This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The application can also be built and run on a QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug C/C++ FreeRTOS applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-zephyr-debug-plugin&lt;/strong>: Zephyr XploR Studio Plugin using for creating and debugging Zephyr applications&lt;/li>
&lt;li>&lt;strong>zephyr-source-code&lt;/strong>: Contains script to download and install Zephyr Project Source Code&lt;/li>
&lt;li>&lt;strong>zephyr-sdk-linux64/zephyr-sdk-win64&lt;/strong>: Contain script to install Zephyr SDK&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for debugging ZephyrRTOS projects.&lt;/p>
&lt;p>Depending on applications, XploR Studio has many example components for specific cases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>zephyr-helloworld-example&lt;/strong>: Zephyr Hello World Project for XploR Studio
&lt;ul>
&lt;li>This application prints Hello world text and runs a simple for-loop for a simple demonstration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zephyr-mutex-example&lt;/strong>: Zephyr Mutex Project for XploR Studio
&lt;ul>
&lt;li>This application creates two threads that modify a shared resource while using a mutex lock for synchronization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zephyr-queue-example&lt;/strong>: Zephyr Message Queue Project for XploR Studio
&lt;ul>
&lt;li>This application uses message queues to allow communication between two threads, where one thread sends integers and characters to the queues and another thread receives the messages and prints them&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zephyr-semaphore-example&lt;/strong>: Zephyr Semaphore Project for XploR Studio
&lt;ul>
&lt;li>This application uses a semaphore to control access to a shared resource and prints a message indicating whether it was successful or not in taking the semaphore&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>zephyr-sync-example&lt;/strong>: Zephyr Synchronization Project for XploR Studio
&lt;ul>
&lt;li>A simple application that demonstrates basic sanity of the kernel. Two threads (A and B) take turns printing a greeting message to the console and use sleep requests and semaphores to control the rate at which messages are generated&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="working-flow">Working flow&lt;/h2>
&lt;h3 id="create-project">Create project&lt;/h3>
&lt;ol>
&lt;li>Select &lt;strong>File &amp;gt; New &amp;gt; C/C++ Project&lt;/strong>, choose &lt;strong>Zephyr Application&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/1.1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong>, please choose the suitable project (after clicking on a project, XploR Studio will show the description of that project):&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/1.png" alt="example image">&lt;/p>
&lt;ol start="3">
&lt;li>Other steps (&lt;em>Update build settings&lt;/em>, &lt;em>Build project&lt;/em>) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/11.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/10.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To open ZephyrRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Other&amp;hellip;&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>ZephyrRTOS Object Views&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The ZephyrRTOS object views only contain information when user debugs a ZephyrRTOS project&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Depending on the ZephyrRTOS application, not all ZephyrRTOS objects will display valid information. For example, if the application does not utilize a Mutex object, XploR Studio will not display any useful information on ZephyrRTOS Mutex view.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The display of ZephyrRTOS views is dependent on the &lt;strong>xplor-studio-zephyr&lt;/strong> component. Therefore, if you uninstall this component, please close these views to prevent any errors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="zephyrrtos-views">ZephyrRTOS views&lt;/h2>
&lt;p>During the ZephyrRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Thread, Mutex, Semaphore, and MessageQueue. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;h3 id="zephyrrtos-thread-view">ZephyrRTOS Thread View&lt;/h3>
&lt;p>The ZephyrRTOS Thread view helps developers examine threads during debug sessions. Each object is identified by its ID, Name, Handle, Priority, Thread State and Thread Usage.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/12.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Hello World project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h3 id="zephyrrtos-mutex-view">ZephyrRTOS Mutex View&lt;/h3>
&lt;p>The ZephyrRTOS Mutex view helps developers examine mutexes during debug sessions. Each object is identified by its ID, Handle, Mutex Owner, Owner Priority and Lock Count.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/13.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Mutex project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h3 id="zephyrrtos-semaphore-view">ZephyrRTOS Semaphore View&lt;/h3>
&lt;p>The ZephyrRTOS Semaphore view helps developers examine semaphores during debug sessions. Each object is identified by its ID, Handle, Semaphore Count and Semaphore Limit.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/14.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Semaphore project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h3 id="zephyrrtos-message-queue-view">ZephyrRTOS Message Queue View&lt;/h3>
&lt;p>The ZephyrRTOS Message Queue view helps developers examine message queues during debug sessions. Each object is identified by its ID, Handle, Message Size, Max Messages, Read Pointer, Write Pointer, Used Messages and Flags.&lt;/p>
&lt;p>&lt;img src="/examples/rtos/zephyrtos/15.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Message Queue project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: LTTng Trace Control Linux Project</title><link>/docs/examples/trace/lttng/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/trace/lttng/</guid><description>
&lt;p>This chapter covers the basics of C/C++ LTTng Trace Control Linux Project projects, including create/build/run/debug applications. This application sets up some tracepoints for tracing purposes when running the application. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;h2 id="components-prerequisites">Components Prerequisites&lt;/h2>
&lt;p>To build, run and debug LTTng Trace Control Linux Project applications, please make sure that all below components are installed. Please refer to &lt;a href="/docs/features/component-management/component-management">&lt;span style="color: blue">Component management&lt;/span>&lt;/a> for more information about installing component.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>xplor-studio-tracecompass-plugin&lt;/strong>: Contains scripts to install Eclipse Tracecompass into XploR Studio&lt;/li>
&lt;li>&lt;strong>xplor-studio-linux-debug-plugin&lt;/strong>: Kernel XploR Studio Plugin using for kernel debugging&lt;/li>
&lt;li>&lt;strong>rv-linux-rootfs&lt;/strong>: RISC-V RootFS can be booted by QEMU and can run/debug RISC-V Embedded Linux applications&lt;/li>
&lt;li>&lt;strong>rv-qemu-linux64/rv-qemu-win64&lt;/strong>: QEMU for running and debugging RISC-V applications (Baremetal, Embedded, Embedded Linux)&lt;/li>
&lt;li>&lt;strong>linux-lttng-trace-example&lt;/strong>: LTTng Trace Control Linux Project source code.&lt;/li>
&lt;/ul>
&lt;p>All above components are compulsory for running Embedded Linux Trace Control applications.
Depending on variation of toolchain, XploR Studio has 2 different Linux toolchain components:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>rv64imac-xplor-linux-linux64/rv64imac-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (No Float)&lt;/li>
&lt;li>&lt;strong>rv64gc-xplor-linux-linux64/rv64gc-xplor-linux-win64&lt;/strong>: RISC-V Embedded Linux toolchain 64-bit (Double)&lt;/li>
&lt;/ul>
&lt;p>Each toolchain can be downloaded separately.&lt;/p>
&lt;h2 id="creating--building-project">Creating &amp;amp; Building project&lt;/h2>
&lt;ol>
&lt;li>To create a new project, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Linux Project &amp;gt; Linux Trace&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/examples/trace/lttng/1.png" alt="example image">&lt;/p>
&lt;ol start="2">
&lt;li>Other steps (building project) are same as the quick-start project. Please refer to &lt;a href="/docs/quick-start/freertos">&lt;span style="color: blue">Quick start with FreeRTOS&lt;/span>&lt;/a> project for general working flow.&lt;/li>
&lt;/ol>
&lt;h2 id="tracing-flow">Tracing flow&lt;/h2>
&lt;h3 id="booting-linux">Booting Linux&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Right-click on project name &amp;gt; &lt;strong>Run configurations &amp;gt; RISC-V Running &amp;gt; QEMU&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In Remote Absolute File Path for C/C++ Application: Type &lt;strong>/home/root/riscv.elf&lt;/strong> (if missing)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on &lt;strong>Enable LTTng Trace Control&lt;/strong> checkbox&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Choose &lt;strong>Apply&lt;/strong> and &lt;strong>Run&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/trace/lttng/2.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait a few minutes for QEMU booting Linux:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/3.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="starting-trace-session">Starting Trace session&lt;/h3>
&lt;p>Now we can start the Trace session by clicking on this button (in the top-right corner):&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/4.png" alt="example image">&lt;/p>
&lt;p>and select &lt;strong>LTTng Kernel&lt;/strong> and &lt;strong>Open&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/5.png" alt="example image">&lt;/p>
&lt;p>The screen should be like this:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/6.png" alt="example image">&lt;/p>
&lt;p>In left corner, in Control tabs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create &lt;strong>New Connection…&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/7.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select &lt;strong>Default SSH-QEMU [localhost]&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/8.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select &lt;strong>Edit…&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/9.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Host: &lt;strong>localhost&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>User: &lt;strong>root&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Password based authentication&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Then &lt;strong>Finish&lt;/strong> and &lt;strong>OK&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Now the &lt;strong>Control View&lt;/strong> shows:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/10.png" alt="example image">&lt;/p>
&lt;p>Right-click on &lt;strong>Sessions&lt;/strong> and select &lt;strong>Create sessions&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/11.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Enter &lt;strong>Session Name&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Choose &lt;strong>Normal Mode&lt;/strong> and &lt;strong>OK&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/12.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After create session, we can enable &lt;strong>Kernel&lt;/strong> or &lt;strong>UST&lt;/strong> event by Right-click on &lt;strong>trace_1&lt;/strong> &amp;gt; select &lt;strong>Enable Event&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/13.png" alt="example image">&lt;/p>
&lt;p>The &lt;strong>Enable Events&lt;/strong> will be shown:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/14.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Enable event with &lt;strong>UST&lt;/strong>. Select &lt;strong>UST&lt;/strong> (on &lt;em>Domain&lt;/em>) &amp;gt; Select &lt;strong>All Tracepoint Events&lt;/strong> or choose a event (For example: hello_world:my_first_tracepoint)&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/15.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In &lt;strong>Control View&lt;/strong>, information will be displayed in form of a tree structure as follow:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Enable event with &lt;strong>Kernel&lt;/strong>. Select &lt;strong>Kernel&lt;/strong> (on &lt;em>Domain&lt;/em>) → Select &lt;strong>All Tracepoint Events&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/17.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In &lt;strong>Control View&lt;/strong>, information will be displayed in form of a tree structure as follow:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/18.png" alt="example image">&lt;/p>
&lt;p>Now you can start the Trace session:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Right-click on &lt;strong>trace_1&lt;/strong> and select &lt;strong>Start&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/19.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Or click the Start button in the toolbar:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/20.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Then change to &lt;strong>Debug&lt;/strong> session by clicking on top-right button:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/21.png" alt="example image">&lt;/p>
&lt;p>The &lt;strong>Console&lt;/strong> will be like this:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/22.png" alt="example image">&lt;/p>
&lt;p>Change to the session that are running QEMU by click on below the button:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/23.png" alt="example image">&lt;/p>
&lt;p>You should get something like this:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/24.png" alt="example image">&lt;/p>
&lt;p>Click on the line &lt;strong>Press Enter to continue&lt;/strong>, and press &lt;strong>Enter&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/25.png" alt="example image">&lt;/p>
&lt;p>Now back to &lt;strong>LTTng Trace&lt;/strong> sessions and stop Trace&lt;/p>
&lt;ul>
&lt;li>
&lt;p>By right-click on &lt;strong>trace_1&lt;/strong> and choose &lt;strong>Stop&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Or click on the &lt;strong>Stop&lt;/strong> button&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/examples/trace/lttng/26.png" alt="example image">&lt;/p>
&lt;h3 id="export-and-import-trace-data-to-view-and-analyze">Export and Import Trace Data to view and analyze&lt;/h3>
&lt;p>&lt;strong>Userspace Trace (UST)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Right-click on &lt;strong>trace_1&lt;/strong> and select &lt;strong>Import&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/27.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the data is created and click &lt;strong>Finish&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/28.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In Project Explorer, double-click on &lt;strong>64-bit&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/29.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Kernel Trace&lt;/strong>&lt;/p>
&lt;p>Perform data import similar to the UST section. In case you have already imported data, skip this step.&lt;/p>
&lt;p>You can also import both Kernel and UST data if you have created both events. For example:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In Project Explorer, double-click on kernel:&lt;/p>
&lt;p>&lt;img src="/examples/trace/lttng/30.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: FreeRTOS views</title><link>/docs/features/views/freertos/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/views/freertos/</guid><description>
&lt;p>During the FreeRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Task, Queue, Heap, and Timer. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To open FreeRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Others&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>FreeRTOS Object Views&lt;/strong>&lt;/li>
&lt;li>The FreeRTOS object views only contain information when user debugs a FreeRTOS project&lt;/li>
&lt;li>Depending on the FreeRTOS application, not all FreeRTOS objects will display valid information. For example, if the application does not utilize a Timer object, XploR Studio will not display any useful information on FreeRTOS Timer view.&lt;/li>
&lt;li>The display of FreeRTOS views is dependent on the &lt;strong>xplor-studio-freertos-debug-plugin&lt;/strong> component. Therefore, if you uninstall this component, please close these views to prevent any errors.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="freertos-task-view">FreeRTOS Task View&lt;/h2>
&lt;p>The FreeRTOS task view helps developers examine tasks during debug sessions. Each object is identified by its ID, name, address, state, task state, stack usage, event object, runtime, and priority.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/20.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-queue-view">FreeRTOS Queue View&lt;/h2>
&lt;p>The FreeRTOS Queue view helps developers examine queues during debug sessions. Each object is identified by its type, ID, name, address, length, size, and state of TX and RX.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/21.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-timer-view">FreeRTOS Timer View&lt;/h2>
&lt;p>The FreeRTOS Timer view helps developers examine timers during debug sessions. Each object is identified by its ID, name, status, callback functions, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/22.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-heap-view">FreeRTOS Heap View&lt;/h2>
&lt;p>The FreeRTOS Heap view helps developers examine heaps during debug sessions. Each object is identified by its ID, address, usage information, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/23.png" alt="example image">&lt;/p></description></item><item><title>Docs: Zephyr OS views</title><link>/docs/features/views/zephyrtos/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/views/zephyrtos/</guid><description>
&lt;p>During the ZephyrRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Thread, Mutex, Semaphore, and MessageQueue. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To open ZephyrRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Other&amp;hellip;&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>ZephyrRTOS Object Views&lt;/strong>&lt;/li>
&lt;li>The ZephyrRTOS object views only contain information when user debugs a ZephyrRTOS project&lt;/li>
&lt;li>Depending on the ZephyrRTOS application, not all ZephyrRTOS objects will display valid information. For example, if the application does not utilize a Mutex object, XploR Studio will not display any useful information on ZephyrRTOS Mutex view.&lt;/li>
&lt;li>The display of ZephyrRTOS views is dependent on the &lt;strong>xplor-studio-zephyr-debug-plugin&lt;/strong> component. Therefore, if you uninstall this component, please close these views to prevent any errors.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-thread-view">ZephyrRTOS Thread View&lt;/h2>
&lt;p>The ZephyrRTOS Thread view helps developers examine threads during debug sessions. Each object is identified by its ID, Name, Handle, Priority, Thread State and Thread Usage.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/1.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Hello World project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-mutex-view">ZephyrRTOS Mutex View&lt;/h2>
&lt;p>The ZephyrRTOS Mutex view helps developers examine mutexes during debug sessions. Each object is identified by its ID, Handle, Mutex Owner, Owner Priority and Lock Count.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/2.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Mutex project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-semaphore-view">ZephyrRTOS Semaphore View&lt;/h2>
&lt;p>The ZephyrRTOS Semaphore view helps developers examine semaphores during debug sessions. Each object is identified by its ID, Handle, Semaphore Count and Semaphore Limit.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/3.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Semaphore project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-message-queue-view">ZephyrRTOS Message Queue View&lt;/h2>
&lt;p>The ZephyrRTOS Message Queue view helps developers examine message queues during debug sessions. Each object is identified by its ID, Handle, Message Size, Max Messages, Read Pointer, Write Pointer, Used Messages and Flags.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/4.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Message Queue project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Hardware and Environment Setup</title><link>/docs/hardware-environment/hardware/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/hardware-environment/hardware/</guid><description>
&lt;h2 id="hardware-requirements">Hardware Requirements&lt;/h2>
&lt;h3 id="development-board">Development Board&lt;/h3>
&lt;p>The following Intel FPGA platforms are tested with XploR Studio IDE:&lt;/p>
&lt;ul>
&lt;li>Intel FPGA DE2-115 development board&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/hardware/1.jpg" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Intel Stratix 10 GX board&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/hardware/2.png" alt="example image">&lt;/p>
&lt;h3 id="usb-rs232-adapter">USB RS232 adapter&lt;/h3>
&lt;p>The following USB-RS232 adapters are tested:&lt;/p>
&lt;ul>
&lt;li>UGreen USB-RS232 adapter&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/hardware/3.jpg" alt="example image">&lt;/p>
&lt;h3 id="usb-ethernet-adapter-optional">USB Ethernet adapter (optional)&lt;/h3>
&lt;p>The following USB-Ethernet adapters are tested:&lt;/p>
&lt;ul>
&lt;li>UGreen USB Ethernet adapter&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/hardware/4.jpg" alt="example image">&lt;/p>
&lt;h2 id="connections">Connections&lt;/h2>
&lt;h3 id="intel-de2-115-board">Intel DE2-115 Board&lt;/h3>
&lt;p>The connection between the PC and the Intel DE2-115 board is shown in the below diagram:&lt;/p>
&lt;p>&lt;img src="/hardware/5.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>We use a single JTAG cable to flash an FPGA board and debug RISC-V IP via Virtual JTAG (vJTAG) to make things easier for the user. So please disconnect the unused FPGA board when using vJTAG.&lt;/p>
&lt;/blockquote>
&lt;!-- ### Intel Stratix 10 GX Board -->
&lt;!-- ### Intel Stratix 10 GX board
The connection between the PC and the Intel Stratix 10 GX board is shown in the below diagram:
![example image](/hardware/6.png)
#### Connection for FreeRTOS and Embedded projects
**Intel Stratix 10GX board**
- Disable Max V on JTAG chain for Stratix 10 GX
- Locate SW6 JTAG Bypass DIP switch
- Change `SW6-2` to **ON** in order to bypass MAX V (The default position is **OFF**)
![example image](/hardware/7.png)
**FMC XM105 Debug Card** is plugged into Intel FPGA Stratix 10 GX board
**UART connection**
![example image](/hardware/8.png)
| **Signal** | **UART Adapter** | **FMC XM105 Debug Card** | **Stratix 10 GX** |
|:----------:|------------------|--------------------------|:-----------------:|
| UART0 | RXD | J16 pin #9 - TXD | AV13 |
| | TXD (GREEN) | J16 Pin #7 - RXD | BC11 |
| UART1 | RXD | J16 pin #12 - TXD | AY13 |
| | TXD (GREEN) | J16 Pin #10 - RDX | AW13 |
| Other pins | NO | NO | |
![example image](/hardware/9.png)
**JTAG connection**
![example image](/hardware/10.png)
**Altera USB blaster**
![example image](/hardware/11.png)
**USB Bus blaster**
![example image](/hardware/12.png)
| Signal | Bus blaster JTAG Debugger v3 | FMC XM105 Debug Card |
|--------|------------------------------|----------------------|
| TRST | TRST | J20 pin #1 |
| TDI | TDI | J20 pin #4 |
| TDO | TDO | J20 pin #7 |
| TMS | TMS | J20 pin #3 |
| TCK | TCK | J20 pin #8 |
| GND | GND | J5 pin #2 |
| VREF | VREF | J15 pin #1 |
**ARM Olimex**
![example image](/hardware/13.png)
![example image](/hardware/14.png)
![example image](/hardware/15.png) -->
&lt;h2 id="driver-installation">Driver installation&lt;/h2>
&lt;h3 id="on-windows">On Windows&lt;/h3>
&lt;p>To recognize the USB blaster, drivers are needed to be installed.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open the &lt;strong>Device Manager&lt;/strong> (Control Panel | Device Manager).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on the &lt;strong>USB Blaster&lt;/strong> and then select &lt;strong>Update driver …&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/hardware/16.png" alt="example image">&lt;/p>
&lt;ol start="3">
&lt;li>Select &lt;strong>Browse my computer for driver software&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/hardware/17.png" alt="example image">&lt;/p>
&lt;ol start="4">
&lt;li>Select &lt;strong>Browse&amp;hellip;&lt;/strong> to select the driver you downloaded and extracted above, then click &lt;strong>Next&lt;/strong> to install the driver.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/hardware/18.png" alt="example image">&lt;/p>
&lt;ol start="5">
&lt;li>After that, the driver should have been successfully installed.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="/hardware/19.png" alt="example image">&lt;/p>
&lt;p>If you see that the Altera USB Blaster II is unconfigured&lt;/p>
&lt;p>&lt;img src="/hardware/20.png" alt="example image">&lt;/p>
&lt;p>and when programming, the board cannot be detected; open Quartus programmer with administrator rights, wait a few seconds for Quartus Programmer to update the settings.&lt;/p>
&lt;p>&lt;img src="/hardware/21.png" alt="example image">&lt;/p>
&lt;p>After the settings are updated, the JTAG USB can be used.&lt;/p>
&lt;p>&lt;img src="/hardware/22.png" alt="example image">&lt;/p>
&lt;h3 id="on-linux">On Linux&lt;/h3>
&lt;p>On Ubuntu 20.04 desktop, go to path &lt;em>&lt;strong>/etc/udev/rules.d/&lt;/strong>&lt;/em> and create rules file &lt;em>&lt;strong>51-usbblaster.rules&lt;/strong>&lt;/em> with following content:&lt;/p>
&lt;pre tabindex="0">&lt;code># USB-Blaster
SUBSYSTEM==&amp;#34;usb&amp;#34;, ATTR{idVendor}==&amp;#34;09fb&amp;#34;, ATTR{idProduct}==&amp;#34;6001&amp;#34;, MODE=&amp;#34;0666&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;
SUBSYSTEM==&amp;#34;usb&amp;#34;, ATTR{idVendor}==&amp;#34;09fb&amp;#34;, ATTR{idProduct}==&amp;#34;6002&amp;#34;, MODE=&amp;#34;0666&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;
SUBSYSTEM==&amp;#34;usb&amp;#34;, ATTR{idVendor}==&amp;#34;09fb&amp;#34;, ATTR{idProduct}==&amp;#34;6003&amp;#34;, MODE=&amp;#34;0666&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;
# USB-Blaster II
SUBSYSTEM==&amp;#34;usb&amp;#34;, ATTR{idVendor}==&amp;#34;09fb&amp;#34;, ATTR{idProduct}==&amp;#34;6010&amp;#34;, MODE=&amp;#34;0666&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;
SUBSYSTEM==&amp;#34;usb&amp;#34;, ATTR{idVendor}==&amp;#34;09fb&amp;#34;, ATTR{idProduct}==&amp;#34;6810&amp;#34;, MODE=&amp;#34;0666&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Unplug and plug USB cables.&lt;/p>
&lt;!-- ## Service installation
This part is only needed for setting up an environment for debugging &lt;a href="/docs/examples/embedded-linux/helloworld">**RISC-V Embedded Linux Project**&lt;/a>. If you are interested in embedded and FreeRTOS applications only, please skip this part.
### Network setup
The current built-in SoC SOFs for DE2-115 support 10 Mbps (MII mode) and 1000 Mbps (RGMII mode) Ethernet network. Depending on your network setup, please use the correct SOF file when programming the DE2-115 board.
![example image](/hardware/23.png)
To debug embedded Linux RISC-V applications on the board, the following requirements are mandatory for the connection between the host PC and the DE2-115 board.
**RGMII mode:**
![example image](/hardware/24.png)
- Network interface on the host PC connects to **ETHERNET0** of DE2-115. **The connection could be directly or via router/switches**.
- On the board, set Jumper JP1 to pins 1 and 2. It’s default mode (RGMII mode).
- Default IP addresses:
- DE2-115 board: 192.168.1.50
- TFTP server: 192.168.1.100
On the PC, the IP address is set to **192.168.1.100**. If users want to use a different subnet, please update the IP of the board.
To update the IP of the board, after programming FPGA bitstream, open the `/dev/ttyUSB*` or `COM*` port console to the board and set the IP as:
| Command | Usage |
|:-------------|:------------------------------------------------------------------------------------|
| eth_local_ip | Set the IP address of the board |
| eth_remote_ip | Set the expected IP of the TFTP Server to download kernel/rootfs for network booting |
| netboot | Start booting Linux from the network |
![example image](/hardware/25.png)
**MII mode**:
![example image](/hardware/26.png)
- Network interface on the host PC connects to **port 0** of DE2-115.
- Connection speed is 10 Mpbs.
- On the board, set Jumper JP1 to pins 2 and 3 (to config Ethernet port 0 to run on MII mode).
- On the PC, the IP address is set to **192.168.1.100**. The network speed and IP can be set with the following command:
```
# Assume that the network interface is enxf8e43b5dd64a
NIC=enxf8e43b5dd64a
sudo ethtool -s $NIC speed 10 duplex full autoneg off
# Double check
ethtool $NIC
# IP needs to be fixed as 192.168.1.100
# Make sure that IPv4 method is manual
sudo ifconfig $NIC 192.168.1.100
```
![example image](/hardware/27.png) --></description></item><item><title>Docs: XIP</title><link>/docs/xplor-platform/xip/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/xplor-platform/xip/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Developers can use &lt;strong>xip&lt;/strong> to:&lt;/p>
&lt;ul>
&lt;li>&lt;b>signup&lt;/b>: Sign up for a free account from the command line. Alternatively, you can also used &lt;a href="https://accounts.soc.one/">this link&lt;/a> to sign up for a free account.&lt;/li>
&lt;li>&lt;b>install&lt;/b>: Download and install XploR Studio IDE, or components&lt;/li>
&lt;li>&lt;b>uninstall&lt;/b>: Uninstall installed components on the host machine.&lt;/li>
&lt;li>&lt;b>show&lt;/b>: Show information about installed components.&lt;/li>
&lt;li>&lt;b>list&lt;/b>: List all installed and available components.&lt;/li>
&lt;li>&lt;b>ide&lt;/b>: Manipulations with the IDE (Currently only support for XploR Studio).&lt;/li>
&lt;li>&lt;b>env&lt;/b>: Execute a command in a virtual environment.&lt;/li>
&lt;/ul>
&lt;p>To get more information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage: xip &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> COMMAND &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>ARGS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> XploR CLI to manage manipulation with XploR Studio IDE and components.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --home &amp;lt;path&amp;gt; Set the XploR workspace and &lt;span style="color:#204a87">set&lt;/span> &lt;span style="color:#000">$XPLOR_HOME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;path&amp;gt; &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> it not
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exists &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Default: $/home/user/.xplor&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v, --verbose Enables verbose mode.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --version Show the version and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env Execute a &lt;span style="color:#204a87">command&lt;/span> in a virtual environment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ide Manipulations with the IDE &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Currently only support &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> XploR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Studio&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install Install a component.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list List components.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show Show component info.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signup Sign up a new account.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uninstall Uninstall a component.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>General options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --version Show version and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --xplor-home &amp;lt;path&amp;gt; Set the XploR workspace and &lt;span style="color:#204a87">set&lt;/span> &lt;span style="color:#000">$XPLOR_HOME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;path&amp;gt; &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it not exists &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Default: /home/ubuntu/.xplor&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --init Initialize the credentials file in the XploR workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> and &lt;span style="color:#204a87">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To get more info about subcommands (signup, install, uninstall, show, list):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip install --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usage: xip install &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-h&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--no-deps&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--upgrade&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> component
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>positional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> component The name of the component to install.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>optional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help show this &lt;span style="color:#204a87">help&lt;/span> message and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --no-deps Install a component without dependencies.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --upgrade Upgrade a component to the newest available version.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sign-up">Sign up&lt;/h2>
&lt;p>To access components and component registry, users must sign up for an account &lt;a href="https://accounts.soc.one/welcome">here&lt;/a> or using the &lt;code>xip signup&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip signup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.060&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.060&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/dongnh/.xplor/components
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.061&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting the Registration Flow.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://auth.soc.one/self-service/registration?flow&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>6aa1bf27-2985-483e-b780-de06742a9f1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 1.142&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting email and password.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter your email: staff@soc.one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter your password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Re-enter your password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 17.868&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Signing up.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 19.770&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Sign up successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Notice&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Please activate your account now by clicking the link in the activation email to access all our features and services.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Please activate your account by clicking the link in the activation email.&lt;/p>
&lt;/blockquote>
&lt;!-- ## Sign in
After signing up, users can authenticate with the registry with the following command: `xip --init`.
``` bash
$ xip --init
_ __ __ ___
| |/_/__ / /__ / _ \
_> &lt;/ _ \/ / _ \/ , _/
/_/|_/ .__/_/\___/_/|_|
/_/ Explore your SoC Design!
[ 0.105] Setup the workspace.
[ 0.105] The XploR's workspace folder already exists.
[ 0.107] Credentials Verification.
Get a new token from the server.
``` -->
&lt;h2 id="install">Install&lt;/h2>
&lt;p>Use &lt;code>xip install&lt;/code> to install components with or without dependencies.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> &lt;strong>xip&lt;/strong> will open a browser for users to sign in at the first time. If login is successful, users will be requested access to some permissions.&lt;/p>
&lt;/blockquote>
&lt;p>To install the GNU elf toolchain and related dependencies, use:&lt;/p>
&lt;div class="td-card-group card-group p-0 mb-4">
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Linux&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Windows&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install rv-xplor-elf-win64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>To install without dependencies, use:&lt;/p>
&lt;div class="td-card-group card-group p-0 mb-4">
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Linux&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install rv-xplor-elf-linux64 --no-deps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Windows&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install rv-xplor-elf-win64 --no-deps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>To upgrade components to latest version:&lt;/p>
&lt;div class="td-card-group card-group p-0 mb-4">
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Linux&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install --upgrade rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>For Windows&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ xip install --upgrade rv-xplor-elf-win64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> &lt;strong>[Windows]&lt;/strong> There are some components that need enabling Windows Long Path to be installed. Please refer to the article: &lt;a href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later">Enable Long Paths in Windows 10&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="show">Show&lt;/h2>
&lt;p>To show information about an installed component:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip show rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.003&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name: rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary: RISC-V Embedded Toolchain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Home-page: https://xplor.design
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: SoC.One Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author-email: info@soc.one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>License: Free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Location: /home/user/.xplor/components
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Requires:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Required-by: baremetal-vexriscv-agilex-helloworld-example, xplor-studio-baremetal-debug-plugin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall">Uninstall&lt;/h2>
&lt;p>To uninstall the installed component:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip uninstall rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.105&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.105&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.196&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Uninstall rv-xplor-elf-linux64.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Found existing installation: rv-xplor-elf-linux64 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Uninstalling rv-xplor-elf-linux64-1.0.0:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successfully uninstalled rv-xplor-elf-linux64-1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.516&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Uninstallation &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="list">List&lt;/h2>
&lt;p>To show all installed components on the local machine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Package Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>------------------- -------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rv-qemu-linux64 1.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rv-linux-rootfs 1.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rv-linux-rootfs-debug 1.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To show all available components for your account:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.203&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.205&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.750&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of all components on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> No &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Version &lt;span style="color:#000;font-weight:bold">|&lt;/span> Versions &lt;span style="color:#000;font-weight:bold">|&lt;/span> License &lt;span style="color:#000;font-weight:bold">|&lt;/span> Classifier &lt;span style="color:#000;font-weight:bold">|&lt;/span> Requires &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+&lt;span style="color:#ce5c00;font-weight:bold">======&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">==============================================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============================================================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">======================================&lt;/span>+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-linux-debug-plugin &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.1.0b1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.1.0b1, &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: IDE :: XploR Studio :: Plugin &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-linux-rootfs, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.1.0, &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-qemu-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0b2, &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-qemu-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> ... &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv64gc-xplor-linux-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv64gc-xplor-linux-win64 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-vexriscv-agilex-helloworld-example &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: IDE :: XploR Studio :: Example Project &lt;span style="color:#000;font-weight:bold">|&lt;/span> agilex-vexriscv-bit, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> openocd-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> openocd-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-xplor-elf-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-xplor-elf-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-baremetal-debug-plugin, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-hardware-target &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv64gc-xplor-linux-linux64 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.1, &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: Cross Toolchain &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-helloworld-example &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: IDE :: XploR Studio :: Example Project &lt;span style="color:#000;font-weight:bold">|&lt;/span> qemu-for-zephyr-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> qemu-for-zephyr-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-zephyr-debug-plugin, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-sdk-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-sdk-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-source-code &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, the data is displayed in table format. Users can customize their views by adding the &lt;code>--format&lt;/code> option. The available options are &lt;em>tabular&lt;/em> and &lt;em>JSON&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry --format json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3.662&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.618&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of all components on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;rv-linux-rootfs&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Metadata-Version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Name&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;rv-linux-rootfs&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;1.0.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Summary&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;RISC-V RootFS for running and debugging Embedded Linux applications&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Home-page&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://xplor.design&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Author&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;SoC.One Inc.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Author-email&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;info@soc.one&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;License&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;Free&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Platform&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Windows&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Classifier&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Software :: Target :: RootFS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;RISC-V RootFS can be booted by QEMU and can run/debug RISC-V Embedded Linux applications&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Requires&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Size&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;170.95 MB&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Versions&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;1.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;rv-qemu-linux64&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>User can select specific type of components to display with the &lt;code>--filter&lt;/code> option.&lt;/p>
&lt;p>component types for display using &lt;code>--filter&lt;/code> include &lt;b>software&lt;/b>, &lt;b>hardware&lt;/b>, &lt;b>cores&lt;/b>, &lt;b>platforms&lt;/b>, &lt;b>examples&lt;/b> or all (using the &lt;b>none&lt;/b> option).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry --filter Example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.106&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3.649&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.600&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of examples components on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> No &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Version &lt;span style="color:#000;font-weight:bold">|&lt;/span> Versions &lt;span style="color:#000;font-weight:bold">|&lt;/span> License &lt;span style="color:#000;font-weight:bold">|&lt;/span> Classifier &lt;span style="color:#000;font-weight:bold">|&lt;/span> Requires &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+&lt;span style="color:#ce5c00;font-weight:bold">======&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">==============================================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============================================================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">======================================&lt;/span>+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-vexriscv-agilex-helloworld-example &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: IDE :: XploR Studio :: Example Project &lt;span style="color:#000;font-weight:bold">|&lt;/span> agilex-vexriscv-bit, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> openocd-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> openocd-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-xplor-elf-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> rv-xplor-elf-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-baremetal-debug-plugin, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-hardware-target &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+----------------------------------------------+-----------+------------+-----------+------------------------------------------------------------+--------------------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-helloworld-example &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software :: Host :: IDE :: XploR Studio :: Example Project &lt;span style="color:#000;font-weight:bold">|&lt;/span> qemu-for-zephyr-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> qemu-for-zephyr-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xplor-studio-zephyr-debug-plugin, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-sdk-linux64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-sdk-win64, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> zephyr-source-code &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Components</title><link>/docs/xplor-platform/components/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/xplor-platform/components/</guid><description>
&lt;blockquote>
&lt;p>&lt;strong>WARNING:&lt;/strong>
The following guide is preliminary and subjected to changes.&lt;/p>
&lt;/blockquote>
&lt;h2 id="prerequisite">Prerequisite&lt;/h2>
&lt;p>The following software components on the host computer are required:&lt;/p>
&lt;ul>
&lt;li>python==3.8.10&lt;/li>
&lt;li>setuptools (newest version)&lt;/li>
&lt;/ul>
&lt;h2 id="template">Template&lt;/h2>
&lt;p>Download and extract the component template from &lt;a href="https://github.com/xplor-studio/xip/blob/component-template/empty-component-templates.zip">here&lt;/a>.&lt;/p>
&lt;p>Note that component name should be in lowercases. If multiple words are used, they should be separated by underscores &lt;code>_&lt;/code> or &lt;code>-&lt;/code>. Avoid using spaces or special characters or mixing &lt;code>_&lt;/code> and &lt;code>-&lt;/code> in the package name.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Examples:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code> Correct name : `component-one`, `component_two`
Wrong name : `component_with-wrong_name`
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;h3 id="structure-of-component-templates">Structure of component templates&lt;/h3>
&lt;p>In the example component template, there are 2 folders (&lt;strong>component-one/&lt;/strong>, &lt;strong>component-two/&lt;/strong>) containing component templates and a &lt;em>Makefile&lt;/em> that supports building and publishing components.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── component-one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── component-one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── Readme.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── component-two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── component-two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── linux.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ │ └── env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── win32.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Makefile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The standard structure of a component template includes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A data folder (component-one/component-one, component-two/component-two)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MANIFEST.in&lt;/strong> (used for including non-Python data to package/component)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>setup.py&lt;/strong> (used for building a component)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Two different data scenarios for component are supported:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The data of the component are host-independent, and can be used in both Windows and Linux OS (&lt;strong>component-one&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The data of the component are host-dependent, requiring a different version for each supported host (&lt;strong>component-two&lt;/strong>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Limitation&lt;/strong>: components that have a mix of both common and specific data for different supported host are not yet supported.&lt;/p>
&lt;/blockquote>
&lt;h2 id="setuppy">setup.py&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>component-one/setup.py&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">setuptools&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;component-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;component-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;component-one&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">version&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">package_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">packages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;component-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">include_package_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">author&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SoC.One Inc.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://xplor.design&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">author_email&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;info@soc.one&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">platforms&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">long_description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">license&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Free&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">install_requires&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Some dependencies here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">classifiers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;Hardware&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Ref. &lt;a href="https://setuptools.pypa.io/en/latest/references/keywords.html">https://setuptools.pypa.io/en/latest/references/keywords.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;code>name&lt;/code> - A string specifying the name of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>version&lt;/code>- A string specifying the version number of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>description&lt;/code> - A string describing the package in a single line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>long_description&lt;/code> - A string providing a longer description of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>author&lt;/code> - A string specifying the author of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>author_email&lt;/code> - A string specifying the email address of the package author.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>URL&lt;/code> - A string specifying the URL for the package homepage.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>license&lt;/code> - A string specifying the license of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>platforms&lt;/code> - A list of strings or comma-separated string. (Used to specify which OS is supported)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>package_dir&lt;/code> - A dictionary that maps package names. (That maps the data folder with the installed component folder)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>packages&lt;/code> - A list of strings specifying the packages that setuptools will manipulate. (That is the name of the installed component folder)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>install_requires&lt;/code> - A string or list of strings specifying what other distributions need to be installed when this one is. (Dependencies concept)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>classifiers&lt;/code> - A list of strings describing the categories for the package. (Classify a component as HW, SW, bitstream,… or something else)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>include_package_data&lt;/code> - If True, setuptools will automatically include any data files it finds inside your package directories that are specified by your MANIFEST.in file. (Should be set to True to include non-Python data)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For (&lt;code>component-two&lt;/code>), only some code need to be added to &lt;code>setup.py&lt;/code> to specify &lt;code>package_dir&lt;/code> for each supported host OS, as follow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">setuptools&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">platform&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">platform&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;component-two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;component-two/win32.x86_64&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;component-two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;component-two/linux.x86_64&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="post-install-and-pre-uninstall">Post-install and Pre-uninstall&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;p>If there are executable files that need to run after the component is installed, please add &lt;code>post-install.sh/post-install.bat&lt;/code> file (host specific) to the data folder.&lt;/p>
&lt;p>If there are executable files that need to run before the component is uninstalled, please add &lt;code>pre-uninstall.sh/pre-uninstall.bat&lt;/code> file (host specific) to the data folder.&lt;/p>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rv-xplor-elf-linux64/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── pre-build.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── rv-xplor-elf-linux64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── env.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── post-install.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── pre-uninstall.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── setup.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="building-component">Building component&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% python3 setup.py sdist
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or &lt;code>% make build&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>If you&amp;rsquo;re reusing the example template, please rename the data folder and update the content of &lt;code>setup.py&lt;/code>, &lt;code>MANIFEST.in&lt;/code>&lt;/li>
&lt;li>As an example, with &lt;code>component-one&lt;/code>:
&lt;ul>
&lt;li>Rename folder &lt;code>component-one&lt;/code> → &lt;code>socone-component&lt;/code>&lt;/li>
&lt;li>Replace string in &lt;code>setup.py&lt;/code>, &lt;code>MANIFEST.in&lt;/code> : &lt;code>component-one&lt;/code> → &lt;code>socone-component&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="example-of-creating-example-project-component">Example of Creating Example Project Component&lt;/h2>
&lt;p>This is an example of how to create a component for Baremetal Helloworld sample, running on QEMU simulator.&lt;/p>
&lt;p>Download and extract the Sample component template from &lt;a href="https://github.com/xplor-studio/xip/blob/component-template/xplor-studio-sample-component-template.zip">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>baremetal-virt-qemu-helloworld-example/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── baremetal-virt-qemu-helloworld-example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── main.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └── ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── settings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── .cproject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── .project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── project.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Makefile&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To clean or build the Sample component, use these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/xplor-platform/components/makefile.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;code>MANIFEST.in&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Just need to replace with component&amp;rsquo;s name&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>global-include baremetal-virt-qemu-helloworld-example/**/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>setup.py&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Update the Sample component&amp;rsquo;s information like name, description, platforms, dependencies &amp;hellip;&lt;/p>
&lt;p>&lt;img src="/xplor-platform/components/setup_py.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;code>project.json&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/xplor-platform/components/project_json.png" alt="example image">&lt;/p>
&lt;p>Besides the basic information like Project&amp;rsquo;s Name, Project&amp;rsquo;s Type, Developer need to pay attention to Project&amp;rsquo;s language and Project&amp;rsquo;s category parameters.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>XPLORSTUDIO IDE supports two kinds of Project&amp;rsquo;s language as C and CPP.&lt;/li>
&lt;li>XPLORSTUDIO IDE supports the following list of Project&amp;rsquo;s categories:
&lt;ul>
&lt;li>Linux: RISC-V Embedded Linux Project&lt;/li>
&lt;li>Baremetal: RISC-V Embedded Project&lt;/li>
&lt;li>FreeRTOS: FreeRTOS Project&lt;/li>
&lt;li>Zephyr: Zephyr Project&lt;/li>
&lt;li>Linux_Kernel: Static Linux Kernel Project&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Developer have to select the correct Project&amp;rsquo;s category from above list.&lt;/p>
&lt;ul>
&lt;li>&lt;code>baremetal-virt-qemu-helloworld-example&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Contains all resources of Eclipse&amp;rsquo;s project such as source code files, header files, linker script, libraries &amp;hellip;&lt;/p>
&lt;p>&lt;img src="/xplor-platform/components/src_main.png" alt="example image">&lt;/p>
&lt;p>In .cproject, it includes information of Project&amp;rsquo;s settings like managed build options, include paths, library paths &amp;hellip;. Please, check the path of these resources, Developer should use the relative path, not the absolute path.&lt;/p>
&lt;p>For example, to define the linker path:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &amp;lt;option &lt;span style="color:#000">IS_BUILTIN_EMPTY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">IS_VALUE_EMPTY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;vio.managedbuild.elf.riscv.option.c.linker.paths.222877999&amp;#34;&lt;/span> &lt;span style="color:#000">superClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;vio.managedbuild.elf.riscv.option.c.linker.paths&amp;#34;&lt;/span> &lt;span style="color:#000">valueType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;libPaths&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;listOptionValue &lt;span style="color:#000">builtIn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;amp;quot;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">XPLOR_HOME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/xplor-platform/components/libraries/libpico/lib/virt/xplor&amp;amp;quot;&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;listOptionValue &lt;span style="color:#000">builtIn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/option&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To support Windows environment, Developer should use &lt;code>&amp;amp;quot;&lt;/code> before and after the relative path of resource
Naming convention of Example component is &amp;ldquo;xplor-studio-&lt;core>-&lt;platform>-&lt;rtos>-&lt;app>&amp;rdquo;
Starting with prefix as &amp;ldquo;xplor-studio-&amp;rdquo;
core: the name of running core such as Vexrisv, Neorv32, Corevmcu &amp;hellip;
platform: the name of running platform such as Qemu, DE2-115, Stratix10gx &amp;hellip;
rtos: the name of cateogry such as baremetal, linux, freertos &amp;hellip;
app: the name of application such as helloworld, timer, heap &amp;hellip;&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: LTTng Tracer and Trace Compass</title><link>/docs/advance-feature/trace-feature/lttng/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/advance-feature/trace-feature/lttng/</guid><description>
&lt;p>LTTng Tracer Control is a component of the LTTng ecosystem designed to manage and control tracing in a Linux system. It provides a set of to ols and interface for controlling and configuring traces, which are the components reponsible for collecting trace data (system events and logs) from various sources in the system.&lt;/p>
&lt;p>To start working with LTTng Tracer Control, please refer to &lt;a href="/docs/examples/trace/lttng/">&lt;span style="color: blue">LTTng Trace Control Linux Project&lt;/span>&lt;/a>.&lt;/p>
&lt;h3 id="view-and-analysis-trace-data-with-linux-user-space-and-kernel-trace">View and Analysis trace data with Linux user space and kernel trace&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>LTTng Kernel Traces (Project Explorer View, Events Editor, Histogram View, CPU Usage View, Disk I/O Activity View, Kernel Memory Usage View, Control Flow View, Resources View, &amp;hellip;). Kernel does not have information that can populate a flame chart view.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LTTng-UST Traces (Events Editor, Flame Chart View, Flame Graph View, Function Duration Statistics View, Function Durations Distribution ViewProject Explorer View, &amp;hellip;)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="event-editor">Event Editor&lt;/h4>
&lt;p>The Events editor shows the basic trace data elements (events) in a tabular format. The header displays the current trace (or experiment) name. In this case, it is Default…/kernel&lt;/p>
&lt;p>&lt;img src="/advance-feature/32.png" alt="example image">&lt;/p>
&lt;p>The columns of the table are defined by the fields (aspects) of the specific trace type (ust or kernel). These are the defaults:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Timestamp: the event timestamp&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Event Type: the event type&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Contents: the fields (or payload) of this event&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/advance-feature/33.png" alt="example image" title="The first row of the table is the header row a.k.a. the Search and Filter row.">&lt;/p>
&lt;p>The highlighted event is the current event and is synchronized with the other views. If you select another event, the other views will be updated accordingly. The properties view will display a more detailed view of the selected event. For example:&lt;/p>
&lt;p>&lt;img src="/advance-feature/34.png" alt="example image" title="Current event is ext4_…_space is synchronized with the CPU usage">&lt;/p>
&lt;p>An event range can be selected by holding the Shift key while clicking another event or using any of the cursor keys ( Up&amp;rsquo;, Down, PageUp, PageDown, Home, End). The first and last events in the selection will be used to determine the current selected time range for synchronization with the other views.&lt;/p>
&lt;p>If the Event editor is closed, the views will display empty states. For example:&lt;/p>
&lt;p>&lt;img src="/advance-feature/35.png" alt="example image">&lt;/p>
&lt;h4 id="searching-and-filtering">Searching and filtering&lt;/h4>
&lt;p>When a searching condition is applied to the header row, the table will select the next matching event starting from the top currently displayed event. All matching events will have a &amp;lsquo;search match&amp;rsquo; icon in their left margin. Non-matching events will be dimmed. The characters in each column which match the regular expression will be highlighted.&lt;/p>
&lt;p>&lt;img src="/advance-feature/36.png" alt="example image">&lt;/p>
&lt;p>Pressing the Enter key will search and select the next matching event. Pressing the Shift+Enter key will search and select the previous matching event. Press Esc to cancel an ongoing search.&lt;/p>
&lt;p>To add the currently applied search condition(s) as filter(s), click the Add as Filter button in the header row margin, or press the Ctrl+Enter key.&lt;/p>
&lt;p>Press Delete to clear the header row and reset all events to normal.&lt;/p>
&lt;p>&lt;img src="/advance-feature/37.png" alt="example image">&lt;/p>
&lt;h4 id="histogram-view">Histogram View&lt;/h4>
&lt;p>&lt;img src="/advance-feature/38.png" alt="example image" title="The x-axis of each histogram corresponds to the event timestamps. The axis is now the same as the other views for a better visualization of the range. The y-axis shows the maximum number of events in the corresponding histogram bars. The vertical blue line(s) show the current selection time (or range).">&lt;/p>
&lt;p>The Histogram View display the trace events distribution with respect to time.&lt;/p>
&lt;p>The Align Views toggle button in the view menu allows to disable and enable the automatic time axis alignment of time-based views. Disabling the alignment in the Histogram view will disable this feature across all the views because it&amp;rsquo;s a workspace preference.&lt;/p>
&lt;p>&lt;strong>The Hide Lost Events&lt;/strong> toggle button in the local toolbar allows to hide the bars of lost events. When the button is selected it can be toggled again to show the lost events.&lt;/p>
&lt;p>&lt;strong>The Activate Trace Coloring&lt;/strong> toggle button in the local toolbar allows to use separate colors for each trace of an experiment. Note that this feature is not available if your experiment contains more than twenty two traces. When activated, a legend is displayed at the bottom on the histogram view.&lt;/p>
&lt;p>On the top left, there are three text controls:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Selection Start: Displays the start time of the current selection&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Selection End: Displays the end time of the current selection&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Window Span: Displays the current zoom window size in seconds&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The mouse can be used to control the histogram:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Left-click: Set a selection time&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Left-drag: Set a selection range&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Shift-left-click or drag: Extend or shrink the selection range&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Middle-click or Ctrl-left-click: Center the zoom window on mouse (full histogram only)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Middle-drag or Ctrl-left-drag: Move the zoom window&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-drag: Set the zoom window&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Shift-right-click or drag: Extend or shrink the zoom window (full histogram only)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mouse wheel up: Zoom in&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mouse wheel down: Zoom out&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Hovering the mouse over an histogram bar pops up an information window that displays the start/end time of the corresponding bar, as well as the number of events (and lost events) it represents. If the mouse is over the selection range, the selection span in seconds is displayed.&lt;/p>
&lt;p>In each histogram, the following keys are handled:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Left Arrow: Moves the current event to the previous non-empty bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right Arrow: Moves the current event to the next non-empty bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Home: Sets the current time to the first non-empty bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>End: Sets the current time to the last non-empty histogram bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Plus (+): Zoom in&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Minus (-): Zoom out&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="statistic-view">Statistic View&lt;/h4>
&lt;p>The Statistics View displays the various event counters that are collected when analyzing a trace. The statistics is collected for the whole trace.&lt;/p>
&lt;p>The view is separated in two sides. The left side of the view presents the Statistics in a table. The table shows 3 columns: Level Events total and Events in selected time range.&lt;/p>
&lt;p>The data is organized per trace. After parsing a trace the view will display the number of events per event type in the second column and in the third, the currently selected time range&amp;rsquo;s event type distribution is shown.&lt;/p>
&lt;p>The cells where the number of events are printed also contain a colored bar with a number that indicates the percentage of the event count in relation to the total number of events.
&lt;img src="/advance-feature/39.png" alt="example image">&lt;/p>
&lt;p>The right side illustrates the proportion of types of events into two pie charts. The legend of each pie chart gives the representation of each color in the chart.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The Global pie chart displays the general proportion of the events in the trace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When there is a range selection, the Events in selection pie chart appears next to the Global pie chart and displays the proportion the event in the selected range of the trace.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="cpu-usage-view">CPU Usage View&lt;/h4>
&lt;p>The CPU Usage analysis and view is specific to LTTng Kernel traces. The CPU usage is derived from a kernel trace as long as the sched_switch event was enabled during the collection of the trace. This analysis is executed the first time that the CPU Usage view is opened after opening the trace. To open the view, double-click on the CPU Usage tree element under the Linux Kernel Analysis tree element of the Project Explorer.&lt;/p>
&lt;p>&lt;img src="/advance-feature/40.png" alt="example image">&lt;/p>
&lt;p>Now, the CPU Usage view will show:&lt;/p>
&lt;p>&lt;img src="/advance-feature/41.png" alt="example image">&lt;/p>
&lt;p>The view is divided into the following important sections: &lt;strong>Process Information&lt;/strong> and the &lt;strong>CPU Usage Chart&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Process Information&lt;/strong>
The process Information is displayed on the left side of the view and shows all threads that were executing on all available CPUs in the current time range. For each process, it shows in different columns the thread ID (TID), process name (Process), the average (%) execution time and the actual execution time (Time) during the current time range. It shows all threads that were executing on the CPUs in the current time range.&lt;/p>
&lt;p>&lt;strong>CPU Usage Chart&lt;/strong>
The CPU Usage Chart on the right side of the view, plots the total time spent on all CPUs of all processes and the time of the selected process.&lt;/p>
&lt;p>Tooltips
Hover the cursor over a line of the chart and a tooltip will pop up with the following information:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Time: current time of mouse position&lt;/p>
&lt;/li>
&lt;li>
&lt;p>total: The total CPU usage&lt;/p>
&lt;/li>
&lt;li>
&lt;p>process: CPU usage of selected process&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/advance-feature/42.png" alt="example image">&lt;/p>
&lt;h4 id="kernel-memory-usage-view">Kernel Memory Usage View&lt;/h4>
&lt;p>The Kernel Memory Usage View is specific to kernel traces. To open the view, double-click on the Kernel Memory Usage Analysis tree element under the Kernel tree element of the Project Explorer.&lt;/p>
&lt;p>&lt;img src="/advance-feature/43.png" alt="example image">&lt;/p>
&lt;p>Now, the Kernel memory usage view will show:&lt;/p>
&lt;p>&lt;img src="/advance-feature/44.png" alt="example image">&lt;/p>
&lt;p>Where:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TID: The ID of the thread this event belongs to&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Process: The process of the TID that belongs to it&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="control-flow-view">Control FLow View&lt;/h4>
&lt;p>The Control Flow view is a LTTng-specific view that shows per-process events graphically. The Linux Kernel Analysis is executed the first time when a LTTng Kernel is opened. After opening the trace, the element Control Flow is added under the Linux Kernel Analysis tree element in the Project Explorer. To open the view, double-click the Control Flow tree element.&lt;/p>
&lt;p>&lt;img src="/advance-feature/45.png" alt="example image">&lt;/p>
&lt;p>You should get something like this:&lt;/p>
&lt;p>&lt;img src="/advance-feature/46.png" alt="example image">&lt;/p>
&lt;p>The view is divided into the following important sections: process tree and information, control flow and the toolbar. The following sections provide detailed information for each part of the Control Flow View.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Process tree and information&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Control flow&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Toolbar&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="flame-chart-view">Flame Chart View&lt;/h4>
&lt;p>The Flame Chart view allows the user to visualize the call stack per thread over time, &lt;em>if the application and trace provide this information&lt;/em>.&lt;/p>
&lt;p>To open this view go in Window -&amp;gt; Show View, if in the eclipse plug-in then click Other&amp;hellip; and select Tracing/Flame Chart in the list. The view shows the call stack information for the currently selected trace. Conversely, you can select a trace and expand it in the Project Explorer then expand LTTng-UST CallStack Analysis (the trace must be loaded) and open Flame Chart.&lt;/p>
&lt;p>&lt;img src="/advance-feature/47.png" alt="example image">&lt;/p>
&lt;p>Flame Chart View will show:&lt;/p>
&lt;p>&lt;img src="/advance-feature/48.png" alt="example image">&lt;/p>
&lt;p>The Flame Chart View shows the state of the stack at all moments during the trace. That view shows for all threads of the application, the functions that were called, so it&amp;rsquo;s easy to see who called who and when.&lt;/p>
&lt;h4 id="flame-graph-view">Flame Graph View&lt;/h4>
&lt;p>This is an aggregate view of the function calls from the Flame Chart View&lt;/p>
&lt;p>&lt;img src="/advance-feature/49.png" alt="example image">&lt;/p>
&lt;p>Each entry in the Flame Graph represents an aggregation of all the calls to a function in a certain depth of the call stack having the same caller. So, functions in the Flame Graph are aggregated by depth and caller. This enables the user to find the most executed code path easily.&lt;/p>
&lt;p>The function name is visible on each Flame graph event if the size permits. Each box in the Flame Graph has the same color as the box representing the same function in the Flame Chart.&lt;/p>
&lt;p>To use the Flame graph, one can navigate it and find which function is consuming the most self-time.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Each box represents a function in the stack (a &amp;ldquo;stack frame&amp;rdquo;).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The y-axis shows stack depth (number of frames on the stack). The top box shows the function that was on-CPU. Everything beneath that is ancestry. The function beneath a function is its parent, just like the stack traces shown earlier. (Some flame graph implementations prefer to invert the order and use an &amp;ldquo;icicle layout&amp;rdquo;, so flames look upside down.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The x-axis spans the sample population. It does not show the passing of time from left to right, as most graphs do. The left to right ordering has no meaning (it&amp;rsquo;s sorted alphabetically to maximize frame merging).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The width of the box shows the total time it was on-CPU or part of an ancestry that was on-CPU (based on sample count). Functions with wide boxes may consume more CPU per execution than those with narrow boxes, or, they may simply be called more often. The call count is not shown (or known via sampling).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="function-duration-statistics-view">Function Duration Statistics View&lt;/h4>
&lt;p>&lt;img src="/advance-feature/50.png" alt="example image">&lt;/p>
&lt;p>Function Duration Statistics View is a bar graph that shows the number of function calls with respect to their duration. The count is using a logarithmic scale. In this example it shows that very few functions takes longer than 0.5ms&lt;/p>
&lt;h4 id="function-duration-distribution-view">Function Duration Distribution View&lt;/h4>
&lt;p>The Function Duration Statistics View is a table with each function&amp;rsquo;s minimum, maximum, average duration and other statistical parameters that may show that in certain cases, the duration can be bigger or lower depending on the context.&lt;/p>
&lt;p>&lt;img src="/advance-feature/51.png" alt="example image">&lt;/p>
&lt;h3 id="references">References&lt;/h3>
&lt;p>Trace Compass User Guide. Available at: &lt;a href="https://archive.eclipse.org/tracecompass/doc/stable/org.eclipse.tracecompass.doc.user/User-Guide.html">https://archive.eclipse.org/tracecompass/doc/stable/org.eclipse.tracecompass.doc.user/User-Guide.html&lt;/a> (Accessed: 08 December 2023).&lt;/p></description></item></channel></rss>