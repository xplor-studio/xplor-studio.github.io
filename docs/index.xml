<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio â€“ Welcome to XploR Studio</title><link>/docs/</link><description>Recent content in Welcome to XploR Studio on XploR Studio</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Embedded development</title><link>/docs/concepts/cross-platform/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/cross-platform/</guid><description>
&lt;p>In embedded or &lt;strong>cross-platform&lt;/strong> development, the compute architecture of the &lt;strong>host development system&lt;/strong> (i.e. &lt;em>hosts&lt;/em>) is different than the the &lt;strong>target execution platform&lt;/strong> (i.e. &lt;em>targets&lt;/em>). Thus, the &lt;strong>target application(s)&lt;/strong> (i.e. &lt;em>programs&lt;/em>) will not be able to run on the host development system.&lt;/p>
&lt;p>The &lt;strong>communication channel&lt;/strong> between the host and target lets the host software (e.g. XploR Studio) program and control the target hardware behavior and program code.&lt;/p>
&lt;p>Because of the inherent architural differences between the hosts and targets, &lt;strong>XploR Studio&lt;/strong> is integrated with different embedded compiler toolchains, operating systems, hardware designs, and debug &amp;amp; monitoring tools, packaged as &lt;strong>blueprints&lt;/strong> and delivered by the IDE to provide a unified experience to create, build, deploy, test and debug designs for developers.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Cross-platform development
state &amp;#34;Host Development System&amp;#34; as hosts
note left of hosts : where XploR IDE runs
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Execution Platforms&amp;#34; as targets
targets : ARM, RISC-V, or others ISA(s)\nrunning baremetal or with an\nembedded OS
note right of targets : where target applications run
targets -u-&amp;gt; hosts
note left on link
acknowledgement to
host from target
end note
hosts --&amp;gt; targets
note left on link
host commands to
program or debug target
end note
&lt;/code>&lt;/pre>&lt;h2 id="embedded-target">Embedded Target&lt;/h2>
&lt;p>In the post-silicon development flow, the &lt;strong>embedded target&lt;/strong> consists of a CPU and associated peripherals (e.g. USB, Ethernet, I2C, &amp;hellip;). The CPU implements and execute code defined by an Instruction Set Architecture (ISA, e.g. x86, ARM, RISC-V). &lt;strong>JTAG&lt;/strong> is commonly the communication channel between the host and target for programming and debugging, as shown below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Post-silicon embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Platform (ASICs)&amp;#34; as targets {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
note bottom of targets : CPU, Memory and Peripherals are\nASIC blocks, not modifable.
state JTAG
note top of JTAG : JTAG used to program target memory\nand control / debug programs on CPU.
hosts -&amp;gt; JTAG
JTAG -&amp;gt; targets
&lt;/code>&lt;/pre>&lt;h2 id="host-software">Host software&lt;/h2>
&lt;p>Some of the most common software components that run on the &lt;em>host computer&lt;/em>.&lt;/p>
&lt;h3 id="ide">IDE&lt;/h3>
&lt;p>XploR Studio has a command line interface as well as a graphical user interface based on the Eclipse IDE. Both are collection of software programs and tools let the developer create programs for the embedded targets.&lt;/p>
&lt;p>The Integrated Development Environment (IDE) is a unified graphical user interface that makes it easy and convenient for developers to write and debug code. The IDE typically includes a source code editor, a source-level debugger, and a build automation tool.&lt;/p>
&lt;p>The XploR Studio IDE is a flexible and highly configurable software environment that is fully integrated with blueprints to accelerate pre and post silicon software development.&lt;/p>
&lt;p>&lt;em>Also see &lt;a href="/about">Why do I need an IDE?&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="cross-toolchain">Cross toolchain&lt;/h3>
&lt;p>The cross toolchain is the set of tools that compiles program source code, written in C/C++ or assembly language, into executable instructions that run on the target platforms. The cross toolchain consists of compilers, linker, and associated run-time libraries.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Compiler choices:&lt;/strong>
&lt;em>The &lt;b>GNU&lt;/b> compiler (&lt;a href="https://www.gnu.org">www.gnu.org&lt;/a>), and &lt;b>LLVM&lt;/b> are two most popular compilers for cross platform development. GNU GCC is compatible with a wider range of existing open source software, CPU architecture, and operating systems.&lt;/p>
&lt;p>LLVM is a more modern compiler that, while continuously evolving, provides faster compilation speed, better diagnostic, and is modularly designed, making it the popular choice for new and emerging ISA and architecture.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="gdb">GDB&lt;/h3>
&lt;p>GDB is a GNU project command line debugger that allows developers to debug programs written in various languages. It supports many debugging formats and offers many debugging features, including the ability to step through code, set breakpoints, and examine variables. The XploR Studio IDE provides a graphical interface to GDB, making it easier to view different aspects of the running program (e.g. call-stack, variables, registers, and assembly code) from centralized dash-board.&lt;/p>
&lt;h2 id="target-software">Target software&lt;/h2>
&lt;h3 id="bootloader">Bootloader&lt;/h3>
&lt;p>Program code and data of an embedded operating system must be loaded into the target platform working memory during the device start-up. This task is achieved by the &lt;strong>bootloader&lt;/strong>, which is a program launched immediately after the target starts.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
&lt;em>The &lt;b>U-Boot&lt;/b> bootloader is a popular bootloader available for embedded microarchitecture such as PowerPC and ARM. Recent ISA such as RISC-V takes a more minimalistic approach, such as that supported by &lt;b>BBL&lt;/b> (Berkeley Boot Loader)
&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="real-time-os-rtos">Real-time OS (RTOS)&lt;/h3>
&lt;p>A real-time operating system (RTOS) is an operating system that is designed to provide predictable processing time for critical tasks. An RTOS can respond to an event in a specified time period. This makes it ideal for applications that require high reliability or timing precision.&lt;/p>
&lt;p>RTOS(es) provide real-time task scheduling and basic memory management, along with advanced features such as multi-threading, interrupt handling and power management. Some RTOS(es) such as Zephyr OS are scalable and can be configured to support as many or as few features as needed in order to minimize resource and memory footprint.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>RTOS awareness:&lt;/strong>
&lt;em>The XploR Studio IDE and related blueprints provide support for building and debugging of several popular RTOS(es) including &lt;b>Amazon FreeRTOS&lt;/b>, &lt;b>Zephyr OS&lt;/b>, and &lt;b>embedded Linux&lt;/b>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Execution platforms</title><link>/docs/concepts/execution-environment/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/execution-environment/</guid><description>
&lt;p>With the advent of open source CPU implementation (e.g. &lt;a href="https://openrisc.io/">openRISC&lt;/a> ), and open ISA (e.g. &lt;a href="http://www.riscv.org">RISC-V&lt;/a>), opportunities exist for developers to innovate on both side of the coin: in both hardware and software (i.e. &lt;strong>software-hardware co-design and development&lt;/strong>)&lt;/p>
&lt;p>To properly supports software-hardware co-design for pre-silicon development, the embedded target must be able to host different hardware designs consisting of different ISA implementation (and sometimes more than one), HW IP(s) and peripherals, and on-chip topology.&lt;/p>
&lt;p>&lt;strong>Target execution platform(s)&lt;/strong> are platform devices with circuits that can be manipulated with hardware description language (HDL) to perform specific functions, including those of a microprocessor or a complete system on chip (SoC).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Examples:&lt;/strong>
&lt;em>&lt;b>FPGA(s)&lt;/b> are common target execution platforms used for prototyping and deployment. &lt;b>Emulators&lt;/b> and arguably cycle-approximate &lt;b>instruction set simulators&lt;/b>, used for verification and early software development, are other examples. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>In the context of pre-silicon development, &lt;em>programming&lt;/em> means:&lt;/p>
&lt;ul>
&lt;li>The manipulation of the device circuits with specific HDL (&lt;em>hardware programming&lt;/em>, or &lt;em>flashing&lt;/em>), or&lt;/li>
&lt;li>The loading and debugging of executable code and data (&lt;em>software programming&lt;/em>, or &lt;em>loading&lt;/em>) into the memory of the microprocessor that is executing on the target execution platform.&lt;/li>
&lt;/ul>
&lt;p>XploR Studio supports both mode of programming support both pre and post silicon software development.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Virtual JTAG:&lt;/strong>
&lt;em>Many &lt;b>XploR blueprints&lt;/b> for execution platforms include builtin &lt;b>virtual JTAG&lt;/b> supporting hardware and software programming, thus obviating the needs for costly and less convenient external JTAG device from third-parties.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Target execution platform as the embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Pre-silicon target execution platform&amp;#34; as targets {
state JTAG
state &amp;#34;HDL programmable device&amp;#34; as HAPS {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
JTAG --&amp;gt; HAPS
}
note bottom of HAPS : CPU, Memory and Peripherals\nare (or can be) programmed with HDL.
state JTAG
note top of JTAG : JTAG used for both hardware\nand software programming
hosts -&amp;gt; JTAG
&lt;/code>&lt;/pre></description></item><item><title>Docs: Blueprints</title><link>/docs/concepts/blueprints/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/blueprints/</guid><description>
&lt;p>Blueprints are packages of hardware and/or software IP(s) that are bounded to specific &lt;em>execution platform(s)&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>IP(s) versus blueprints&amp;quot;&lt;/strong>
&lt;em> The HDL implementations of hardware peripherals, accelerator, or ISA such as ARM or RISC-V are &lt;b>IP(s)&lt;/b>. &lt;b>Blueprints&lt;/b> are combination these IP(s) that has been customized, configured, and built to execute on specific target execution platforms, such as FPGA(s) from AMD or Intel. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Blueprints are fully integrated with XploR Studio, and can be installed and used by themselves or in combination with other blueprints.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Benefits:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Blueprints provide clear and concise purposes&lt;/strong> - Blueprints serve as a detailed plan or a design that outlines the necessary steps and materials required to construct or create a design.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints act as reference model&lt;/strong> - Blueprints prototype the functional behavior of the design, and can be used as a reference or golden model to help to ensure that the finished product is consistent with the original design and meets the expectations and requirements of our customers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints enable early software development&lt;/strong> - Together with XploR Studio IDE, blueprints enable developers to design, test, and debug software in pre-silicon phase in order to identify and address potential issues beforehand.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints promote reusability&lt;/strong> - In many cases, HW and SW IP(s) in blueprints are hardened and reused for in-silicon and post-silicon deployment.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Docs: System requirements</title><link>/docs/getting-started/installation/system-requirements/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/getting-started/installation/system-requirements/</guid><description>
&lt;h2 id="host-system-requirements">Host System Requirements&lt;/h2>
&lt;p>The supported operating systems for installing the product are:&lt;/p>
&lt;ul>
&lt;li>Windows 10&lt;/li>
&lt;li>Ubuntu Desktop 20.04&lt;/li>
&lt;/ul>
&lt;h3 id="minimum-windows-10">Minimum (Windows 10)&lt;/h3>
&lt;ul>
&lt;li>Processor: 1 gigahertz (GHz) or faster&lt;/li>
&lt;li>Memory: 8 GB (64-bit)&lt;/li>
&lt;li>Disk space: 30GB free HD space&lt;/li>
&lt;li>Display: 19&amp;rsquo; Monitor, VGA capable of 1024Ã—768 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="recommended-windows-10">Recommended (Windows 10)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 gigahertz (GHz) or faster&lt;/li>
&lt;li>Memory: 16 gigabytes (GB)&lt;/li>
&lt;li>Disk space: 50GB free HD space&lt;/li>
&lt;li>Display: 22&amp;rsquo; Monitor, VGA capable of 1920x1080 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="minimum-ubuntu-2004">Minimum (Ubuntu 20.04)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 GHz dual-core processor&lt;/li>
&lt;li>Memory: 8 GiB RAM (system memory)&lt;/li>
&lt;li>Disk space: 30 GB of hard drive space&lt;/li>
&lt;li>Display: 19&amp;rsquo; Monitor, VGA capable of 1024Ã—768 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;h3 id="recommended-ubuntu-2004">Recommended (Ubuntu 20.04)&lt;/h3>
&lt;ul>
&lt;li>Processor: 2 GHz dual-core processor&lt;/li>
&lt;li>Memory: 16 GiB RAM (system memory)&lt;/li>
&lt;li>Disk space: 50 GB of hard drive space&lt;/li>
&lt;li>Display: 22&amp;rsquo; Monitor, VGA capable of 1920x1080 screen resolution&lt;/li>
&lt;li>Internet connection: Yes&lt;/li>
&lt;/ul>
&lt;!-- ## Hardware Debug Requirements
The hardware requirements, hardware connections as well as driver installation on a host machine are documented in &lt;a href="../hardware-environment">**Hardware and Environment Setup**&lt;/a>. If you are going to develop and debug RISC-V applications on Intel FPGA platforms, please refer to this document for more details. --></description></item><item><title>Docs: IDE installer</title><link>/docs/getting-started/installation/install/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/getting-started/installation/install/</guid><description>
&lt;p>There are two ways to install the IDE:&lt;/p>
&lt;ol>
&lt;li>Using the IDE installer.&lt;/li>
&lt;li>With &lt;a href="/download">&lt;strong>xip&lt;/strong>&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>This section contains instructions on how to install the XploR IDE using the installer on Windows or Linux hosts.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The installer needs to pull development packages from the internet. Please make sure that your machine has internet connectivity.&lt;/p>
&lt;/blockquote>
&lt;h2 id="download-the-ide-installer">Download the IDE installer&lt;/h2>
&lt;div class="td-card-group card-group p-0 mb-4">
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>Installer for Linux&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://xplor.studio/release/XploRStudio_v1.0.0_linux.run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;div class="td-card card border me-4">
&lt;div class="card-header bg-white">
&lt;strong>Installer for Windows&lt;/strong>
&lt;/div>
&lt;div class="card-body code p-0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://xplor.studio/release/XploRStudio_v1.0.0_win32.exe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="start-the-installer">Start the installer&lt;/h2>
&lt;h3 id="on-windows">On Windows&lt;/h3>
&lt;p>Run the executable installer by right-clicking on the executable from the desktop or file manager and selecting &lt;strong>Open&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/1.png" alt="example image">&lt;/p>
&lt;h3 id="on-linux">On Linux&lt;/h3>
&lt;p>Open the terminal and run the installer&lt;/p>
&lt;p>&lt;code>./xplorstudio-linux.run&lt;/code>&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/2.png" alt="example image">&lt;/p>
&lt;p>Select the &lt;strong>Next&lt;/strong> button to proceed with the installation.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/3.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, you shall be presented with the &lt;strong>XploR IDE License Agreement&lt;/strong>. Review this agreement carefully, then select &amp;ldquo;&lt;em>I accept the agreement&lt;/em>&amp;rdquo; and &lt;strong>Next&lt;/strong> to continue or &lt;strong>Quit&lt;/strong> to exit.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/4.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, you will see the information: &lt;em>Choose a directory name without space characters&lt;/em>.&lt;/p>
&lt;p>Please choose a destination path without spaces. If XploR IDE is installed on a location containing spaces, the application build will fail. This is a known issue and will be fixed in a future release. Select &lt;strong>OK&lt;/strong> to continue.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/5.png" alt="example image">&lt;/p>
&lt;p>Once &lt;strong>OK&lt;/strong> is selected, the installer presents the installation path. You can choose or enter an alternative. Select &lt;strong>Next&lt;/strong> to continue.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
Please choose a destination path that is not available. If XploR IDE is installed in an available location, the data cannot be completely uninstalled. This is a known issue and will be fixed in a future release.&lt;/p>
&lt;/blockquote>
&lt;p>The XploR IDE installer presents a summary of packages to be installed.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/6.png" alt="example image">&lt;/p>
&lt;p>Then select &lt;strong>Next&lt;/strong> to proceed.&lt;/p>
&lt;p>Once &lt;strong>Next&lt;/strong> is selected, the selected packages will be copied into the installation directory.&lt;/p>
&lt;!-- Please select the **Zephyr Component** option if you want to install this feature. Installation requires about 4Â GB of storage space. Zephyr also requires the **CMake** version to be 3.20 or higher. -->
&lt;p>&lt;img src="/img_xplorstudio/Installation/7.png" alt="example image">&lt;/p>
&lt;p>Select &lt;strong>Next&lt;/strong> to start the installation.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/8.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/9.png" alt="example image">&lt;/p>
&lt;p>After all the XploR IDE files have been copied, one final dialog is presented below. Select the &lt;strong>Finish&lt;/strong> button to complete the installation of the XploR IDE.&lt;/p>
&lt;p>&lt;img src="/img_xplorstudio/Installation/10.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>OK&lt;/strong> to launch XploR IDE.&lt;/p></description></item><item><title>Docs: XIP installer</title><link>/docs/getting-started/installation/xip/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/getting-started/installation/xip/</guid><description>
&lt;p>&lt;strong>xip&lt;/strong> (i.e. XploR pip) is a standalone application used for downloading, installing and managing the IDE and blueprints. &lt;strong>xip&lt;/strong> can be downloaded from this &lt;a href="https://github.com/xplor-studio/xip/releases">link&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Tip:&lt;/strong>
To install the XploR IDE with &lt;strong>xip&lt;/strong>, use:&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>% xip install xplor-studio-ide
&lt;/code>&lt;/pre>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Developers can use &lt;strong>xip&lt;/strong> to:&lt;/p>
&lt;ul>
&lt;li>&lt;b>signup&lt;/b>: sign up for a free account from the command line. Alternatively, you can also used &lt;a href="https://accounts.soc.one/">this link&lt;/a> to sign up for a free account.&lt;/li>
&lt;li>&lt;b>install&lt;/b>: download and install XploR Studio IDE, or blueprints from &lt;a href="https://xplor.design/">XploR Design&lt;/a>&lt;/li>
&lt;li>&lt;b>uninstall&lt;/b>: uninstall installed blueprints on the host machine.&lt;/li>
&lt;li>&lt;b>show&lt;/b>: show information about installed blueprints.&lt;/li>
&lt;li>&lt;b>list&lt;/b>: list all installed and available blueprints.&lt;/li>
&lt;/ul>
&lt;p>To get more information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usage: xip &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-h&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--version&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--xplor-home &amp;lt;path&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--init&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A Blueprint manager CLI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>optional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help show this &lt;span style="color:#204a87">help&lt;/span> message and &lt;span style="color:#204a87">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signup Sign up &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a free account.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> install Install a blueprint.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uninstall Uninstall a blueprint.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show Show the information of a blueprint.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list List installed blueprints.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>General options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --version Show version and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --xplor-home &amp;lt;path&amp;gt; Set the XploR workspace and &lt;span style="color:#204a87">set&lt;/span> &lt;span style="color:#000">$XPLOR_HOME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;path&amp;gt; &lt;span style="color:#204a87;font-weight:bold">if&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it not exists &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Default: /home/ubuntu/.xplor&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --init Initialize the credentials file in the Xplor workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> and &lt;span style="color:#204a87">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To get more info about subcommands (signup, install, uninstall, show, list):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip install --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usage: xip install &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-h&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--no-deps&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--upgrade&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> blueprint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>positional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blueprint The name of the blueprint to install.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>optional arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help show this &lt;span style="color:#204a87">help&lt;/span> message and exit.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --no-deps Install a blueprint without dependencies.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --upgrade Upgrade a blueprint to the newest available version.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sign-up">Sign up&lt;/h2>
&lt;p>To access blueprints and blueprint registry, users must sign up for an account &lt;a href="https://accounts.soc.one/welcome">here&lt;/a> or using the &lt;code>xip signup&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip signup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.060&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.060&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/dongnh/.xplor/blueprints
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.061&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting the Registration Flow.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://auth.soc.one/self-service/registration?flow&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>6aa1bf27-2985-483e-b780-de06742a9f1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 1.142&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting email and password.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter your email: staff@soc.one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter your password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Re-enter your password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 17.868&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Signing up.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 19.770&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Sign up successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Notice&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Please activate your account now by clicking the link in the activation email to access all our features and services.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Please activate your account by clicking the link in the activation email.&lt;/p>
&lt;/blockquote>
&lt;h2 id="sign-in">Sign in&lt;/h2>
&lt;p>After signing up, users can authenticate with the registry with the following command: &lt;code>xip --init&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip --init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.105&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.105&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.107&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get a new token from the server.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> &lt;strong>xip&lt;/strong> will open a browser for users to sign in. If login is successful, users will be requested access to some permissions.&lt;/p>
&lt;/blockquote>
&lt;h2 id="install">Install&lt;/h2>
&lt;p>Use &lt;code>xip install&lt;/code> to install blueprints with or without dependencies.&lt;/p>
&lt;p>To install the GNU elf toolchain and related dependencies, use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% xip install riscv-xplor-elf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To install without dependencies, use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% xip install riscv-xplor-elf --no-deps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To upgrade blueprints to latest version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% xip install --upgrade riscv-xplor-elf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="show">Show&lt;/h2>
&lt;p>To show information about an installed blueprint:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip show riscv64-xplor-linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.003&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/dongnh/.xplor/blueprints
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name: riscv64-xplor-linux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: 1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Summary: RISC-V Embedded Linux 64-bit Toolchain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Home-page: https://xplor.design
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author: SoC.One Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Author-email: info@soc.one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>License: Free
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Location: /home/dongnh/.xplor/blueprints
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Requires: rootfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Required-by:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall">Uninstall&lt;/h2>
&lt;p>To uninstall the installed blueprint:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip uninstall qemu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.104&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.104&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.203&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Uninstall qemu.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Found existing installation: qemu 1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Uninstalling qemu-1.0:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Successfully uninstalled qemu-1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.281&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Uninstallation &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="list">List&lt;/h2>
&lt;p>To show all installed blueprints on the local machine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Package Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>------------------- -------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qemu 1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>riscv64-xplor-linux 1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rootfs 1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To show all available blueprints for your account:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.203&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.205&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.750&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of all blueprints on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> No &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Version &lt;span style="color:#000;font-weight:bold">|&lt;/span> Versions &lt;span style="color:#000;font-weight:bold">|&lt;/span> License &lt;span style="color:#000;font-weight:bold">|&lt;/span> Classifier &lt;span style="color:#000;font-weight:bold">|&lt;/span> Requires &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+&lt;span style="color:#ce5c00;font-weight:bold">======&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">==============================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">==================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============================&lt;/span>+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> openocd &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> qemu &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software, &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Platform &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> riscv-xplor-elf &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> riscv32-xplor-linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software &lt;span style="color:#000;font-weight:bold">|&lt;/span> rootfs &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> riscv32-xplord-linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Software &lt;span style="color:#000;font-weight:bold">|&lt;/span> rootfs &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+------------------------------+---------------+---------------+-----------+------------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, the data is displayed in table format. Users can customize their views by adding the &lt;code>--format&lt;/code> option. The available options are &lt;em>tabular&lt;/em> and &lt;em>JSON&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry --format json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.103&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3.662&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.618&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of all blueprints on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;openocd-1.0.0&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Metadata-Version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;1.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Name&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;openocd&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Version&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Summary&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;Open On-Chip Debugger&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Home-page&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;https://xplor.design&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Author&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;SoC.One Inc.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Author-email&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;info@soc.one&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;License&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;Free&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Description&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;OpenOCD aims to provide debugging, in-system programming and boundary-scan testing for embedded target devices&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Platform&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Windows&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Classifier&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Software&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Requires&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">[]&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Size&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;7.68 MB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;qemu-1.0.0&amp;#34;&lt;/span>: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>User can select specific type of blueprints to display with the &lt;code>--filter&lt;/code> option.&lt;/p>
&lt;p>Blueprint types for display using &lt;code>--filter&lt;/code> include &lt;b>software&lt;/b>, &lt;b>hardware&lt;/b>, &lt;b>cores&lt;/b>, &lt;b>platforms&lt;/b>, &lt;b>examples&lt;/b> or all (using the &lt;b>none&lt;/b> option).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ xip list --on-registry --filter examples
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ __ __ ___
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>/_/__ / /__ / _ &lt;span style="color:#4e9a06">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _&amp;gt; &amp;lt;/ _ &lt;span style="color:#4e9a06">\/&lt;/span> / _ &lt;span style="color:#4e9a06">\/&lt;/span> , _/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_/ .__/_/&lt;span style="color:#4e9a06">\_&lt;/span>__/_/&lt;span style="color:#000;font-weight:bold">|&lt;/span>_&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /_/ Explore your SoC Design!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Setup the workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.004&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> The XploR&lt;span style="color:#a40000">&amp;#39;&lt;/span>s workspace folder already exists!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 0.106&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Credentials Verification.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Get credentials from the file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 3.649&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Getting data from registry.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 4.600&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Information of examples blueprints on Registry:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+---------------------------+-----------+------------+-----------+--------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> No &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Version &lt;span style="color:#000;font-weight:bold">|&lt;/span> Versions &lt;span style="color:#000;font-weight:bold">|&lt;/span> License &lt;span style="color:#000;font-weight:bold">|&lt;/span> Classifier &lt;span style="color:#000;font-weight:bold">|&lt;/span> Requires &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+&lt;span style="color:#ce5c00;font-weight:bold">======&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========================&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">===========&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">==============&lt;/span>+&lt;span style="color:#ce5c00;font-weight:bold">============================&lt;/span>+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-neorv32-de2115 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Example &lt;span style="color:#000;font-weight:bold">|&lt;/span> bitstream-de2115-neorv32, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> riscv-xplor-elf &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+---------------------------+-----------+------------+-----------+--------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-vexriscv-agilex &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 1.0.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> Free &lt;span style="color:#000;font-weight:bold">|&lt;/span> Example &lt;span style="color:#000;font-weight:bold">|&lt;/span> bitstream-agilex-vexriscv, &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> riscv-xplor-elf &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+------+---------------------------+-----------+------------+-----------+--------------+----------------------------+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Creating application with FreeRTOS</title><link>/docs/getting-started/quick-start/freertos/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/getting-started/quick-start/freertos/</guid><description>
&lt;p>This chapter covers the basics of a quick-start project including creating, building, running, and debugging applications. This project referred to in this chapter is called &lt;strong>Blinky&lt;/strong>. This application prints &lt;em>Blink&lt;/em> text. Through the debug session, users can examine RTOS objects such as Task and Queue. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;p>To build, run and debug &lt;strong>Blinky&lt;/strong> applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>The easiest way to use FreeRTOS is to start with one of the pre-configured demo application projects by selecting &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Blinky&lt;/strong> project.
Select Toolchains: &lt;strong>Baremetal XploR Toolchain for RISC-V&lt;/strong> and enter the Project name.
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/1.png" alt="example image">&lt;/p>
&lt;p>In the next screens, users can specify project options such as Author, copyright notice, project description, compiler, assembler, linker, and run/debug options. Then click the &lt;strong>Next&lt;/strong> button.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/2.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/3.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>In some other kinds of projects, the new project wizard may have additional pages for specifying source codes, target, toolchain,&amp;hellip; but the workflow is not changed.&lt;/p>
&lt;/blockquote>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>After the project is created, the user can change build settings or other project settings by right-clicking on the project name in &lt;strong>Project Explorer&lt;/strong> and selecting &lt;strong>Properties&lt;/strong>.
Then select &lt;strong>C/C++ Build &amp;gt; Settings&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/4.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The Floating-point ABI â€“ Single precision (f) is currently not supported in this release (except Embedded projects).&lt;/p>
&lt;/blockquote>
&lt;p>For example, on the Target Processor menu, users can change the architecture from 32 bits to 64 bits, and also select floating-point options.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/5.png" alt="example image">&lt;/p>
&lt;p>Another useful setting is to add hooks before and after the build. For example:&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/6.png" alt="example image">&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;ul>
&lt;li>Building is simply done by clicking on the build button in the toolbar:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_xplorstudio/7.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Or right-click on the current project &amp;gt; Build Project&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_xplorstudio/8.png" alt="example image">&lt;/p>
&lt;p>Messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/9.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU emulator&lt;/h3>
&lt;p>XploR Studio offers several ways to run applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the RISC-V Blinky Demo entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10.png" alt="example image">&lt;/p>
&lt;p>In Run Configuration Dialog box, create a new run configuration by double-clicking on RISC-V Running&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10-1.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Main&lt;/strong> tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Run&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10-2.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the Blinky Demo Project entry in the Project Explorer and then click &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISC-V application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10-3.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10-4.png" alt="example image">&lt;/p>
&lt;p>After selecting &lt;strong>Run As RISC-V application with QEMU&lt;/strong>, the &amp;ldquo;Blink&amp;rdquo; text will be printed continuously in Console view.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/10-5.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the RISC-V Blinky Demo entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/11.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog box, create a new debug configuration by double-clicking on RISC-V Debugging&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/12.png" alt="example image">&lt;/p>
&lt;p>On the Debugger tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/13.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the Blinky Demo Project entry in the Project Explorer and then click &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/14.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Debug As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/15.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/16.png" alt="example image">&lt;/p>
&lt;p>Open &lt;strong>main_blinky.c&lt;/strong> source code file in &lt;strong>src/application-specific/blinky_demo&lt;/strong> &amp;gt; Set more breakpoints in Task and Queue object.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/17.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Press F8 or click on &lt;strong>Resume&lt;/strong> button to go to the next breakpoint&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/17.1.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Continue debugging with press F5 or clicking on Step Into button to step into the line of code and see data change in Register View&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/18.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Continue debugging with press F6 or clicking on Step Over button for step over&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/18.1.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Press F7 or click on Step Return (F7) button for step return code&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/19.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on the Suspend button to pause the debug process.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/20.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>User can open Object Variables, Breakpoints, Task, Queue, and Heap to examine application states:&lt;/p>
&lt;p>&lt;strong>Variables&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/21.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Breakpoints:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/22.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Task:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/23.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Queue:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/24.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Timer:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/22.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Heap:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/25.png" alt="example image">&lt;/p>
&lt;p>To stop the debug process, click the Terminate icon in the toolbar or press F2.&lt;/p>
&lt;p>&lt;img src="/images_xplorstudio/26.png" alt="example image">&lt;/p>
&lt;!-- ## &lt;a id="blinky-debug-de2">5 Running and Debugging project with Intel FPGA DE2-115 platform&lt;/a>
### Hardware and driver preparations
Please refer to the &lt;a href="../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
### Programming IP core
To program a RISC-V IP core to the board, click on Flash icon on the toolbar
![example image](/images_xplorstudio/27.png)
- In the **Categories**, there are 2 types:
- "***Free IP For Starter Boards***" includes free IP Core files like Neorv32, Rocket64 or OpenHW group
- "***Commercial Grade IP for Professional Boards***" includes commercial IP Core files like Andes, Codasip. To download these IP Core files, user need to register an account and download from [https://pathfinder.intel.com/registration/](https://pathfinder.intel.com/registration/)
- In the **IP Core**, select **stratix10_rocket64.sof** or **Custom IP core** if users use their own RISC-V IP core. In this case, we select "***de2-115_neorv32***" for the neorv32 - DE2-115 project.
- Select JTAG cable (if the user has multiple boards connected to the development machine).
- Click **Finish** to flash Neorv 32-bit RISC-V core to DE2-115 board.
To view the console output printed from the RISC-V core, there are 2 ways depending on the IP core:
- **Physical UART** &lt;span style="color:red">*(for Open-V-MCU, Neorv32)*:&lt;/style>
Open the Terminal view and select `COM` port (on Windows) or `/dev/ttyUSBx` port (on Linux) with the following connection settings.
![example image](/images_xplorstudio/28.png)
The output message on the serial terminal will look like this:
```
&lt;&lt; NEORV32 Bootloader >>
BLDV: Oct 27 2021
HWV: 0x01060300
CLK: 0x02faf080
MISA: 0x40801104
CPU: 0x00000483
SOC: 0x0007400d
IMEM: 0x00040000 bytes @0x00000000
DMEM: 0x00020000 bytes @0x80000000
Autoboot in 8s. Press key to abort.
Loading...
[ERR 0x00000005 0xffff0d58 0xffffffa8]
ERROR_1
```
It is safe to ignore messages like `ERROR_1` above.
- **vJTAG-UART** &lt;span style="color:red">*(for Rocket Chip, Andes, Codasip)*:&lt;/style>
Open Terminal view and choose Local Terminal. Type `jtagconfig -d` to detect the index of the USB-Blaster II cable (Linux OS: The user should use the command `source path/to/__PROJECT_SHORTNAME__/bin/environment-setup.sh` first to set the environment of the __PROJECT_SHORTNAME__.
![example image](/images_xplorstudio/28.1.png)
Then, type `nios2-terminal -c $index -d 1 -i 0`. In this case, the index is number 2, so the command is `nios2-terminal -c 2 -d 1 -i 0`.
!!!warning "Note"
Examples with 3 IP cores (Rocket Chip, Andes, Codasip) on the Intel Stratix 10 GX board will not print the output on Terminal view on this release (version 1.1).
### Run project on Intel FPGA DE2-115 platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 5.2](#52-programming-ip-core) for how to program the bitstream.
To run the application on hardware without debugging, select project in the Project Explorer, click **Run as > RISC-V application on Hardware**.
On the Terminal view, the "Blinky" message will be printed continuously.
Please refer to [section 6.3](#63-run-project-on-intel-fpga-stratix-10-gx-platform) for how to run the application by creating a new *Run Configuration*.
!!!info
Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.
![example image](/images_xplorstudio/29.png)
### Debug project on Intel FPGA DE2-115 platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 5.2](#52-programming-ip-core) for how to program the bitstream.
To debug the application on hardware, select project in the Project Explorer, click **Debug as > RISC-V application on Hardware**
![example image](/images_xplorstudio/30.png)
Please refer to [section 6.4](#64-debug-project-on-intel-fpga-stratix-10-gx-platform) for how to debug the application by creating a new *Debug Configuration*.
!!!info
Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.
If users cannot debug normally, that means the RISC-V core may be locked from a previous debug session. To restart with a new debug session, please press `KEY0` on the DE2-115 board to reset the core and continue.
The application stops at the first line, and users can set breakpoints and continue to debug.
![example image](/images_xplorstudio/31.png)
To view the RTOS objects, press the **Suspend** button.
![example image](/images_xplorstudio/32.png)
Task objects:
![example image](/images_xplorstudio/33.png)
Queue objects:
![example image](/images_xplorstudio/34.png)
Heap objects:
![example image](/images_xplorstudio/35.png)
To view Registers, switch to the Register view:
![example image](/images_xplorstudio/36.png)
To view gdb console message, switch to the Debug console view
![example image](/images_xplorstudio/37.png)
In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals' status such as control register values, and data register values via **Peripheral Registers view**.
To active Peripheral Registers view, select **Window > Preferences**
![example image](/images_xplorstudio/38.png)
Then go to the **C/C++ > Debug section**
Click the Peripheral **Registers Page**. On this page:
- Architecture: Select RISC-V
- Vendor: Select FPGA
- Platform: Select Neorv32
The peripheral registers will be listed on the right-hand side of the page:
![example image](/images_xplorstudio/39.png)
Users can select specific registers or all registers via the checkbox, then click **Apply and Close** button
![example image](/images_xplorstudio/40.png)
The Peripheral Register views will show all registers as well as their information.
To view any register status, double-click on the register name on Peripheral View:
![example image](/images_xplorstudio/41.png)
To view the program output, switch to the Terminal view.
![example image](/images_xplorstudio/42.png)
## &lt;a id="blinky-debug-stratix">6 Running and Debugging project with Intel FPGA Stratix 10 GX platform&lt;/a>
### Hardware and driver preparations
For more information, please refer to &lt;a href="../../hardware-environment/">Hardware and Environment Setup&lt;/a> and [Running and Debugging project with Intel FPGA DE2-115 platform](#5-running-and-debugging-project-with-intel-fpga-de2-115-platform).
### Programming IP core
To program a RISC-V IP core to the board, click on the Flash icon on the toolbar:
![example image](/images_xplorstudio/43.png)
- In **Vendor**, select: Neorv32
- In **Product**, select
- **neorv32 - Stratix10gx (sof)**.
- **Custom IP core** if users use their own RISC-V IP core.
- Select the JTAG cable (if users have multiple boards connected to the development machine)
- Click "Finish" to flash the NEOR32 RISC-V core.
### Run project on Intel FPGA Stratix 10 GX platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 6.2](#62-programming-ip-core) for how to program the bitstream.
To run the application on hardware without debugging, select the project in the Project Explorer, and click **Run as > Run Configurations**. Then create a new RISC-V Running configuration with the following information.
- Platform: **FPGA** > **Intel Stratix 10 GX Board** > **Neorv32**
- Configuration: Uncheck Virtual Jtag and select the external JTAG
![example image](/images_xplorstudio/45.png)
![example image](/images_xplorstudio/29.png)
### Debug project on Intel FPGA Stratix 10 GX platform
!!!warning "Note"
It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to [section 6.2](#62-programming-ip-core) for how to program the bitstream.
To debug the application on hardware, select project in the Project Explorer, click **Debug as > Debug RISC-V application on hardware**. Then create a new RISC-V Running configuration with the following information.
- Platform: **FPGA** > **Intel Stratix 10 GX Board** > **Neorv32**
- Configuration: Uncheck `Virtual Jtag` and select the external JTAG
![example image](/images_xplorstudio/47.png)
![example image](/images_xplorstudio/48.png)
For the OpenOCD configuration of each IP core on the Intel Stratix 10 GX board, please refer to the below table:
| IP cores | Type of JTAG | Supported JTAG |
|:-----------:|:-------------:|:-----------------------------------------------------------:|
| Neorv32 | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Rocket Chip | Virtual JTAG | N/A |
| Open-V-MCU | Virtual JTAG | N/A |
| Andes | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Codasip | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
*Note: This is an example of creating, building, running, and debugging a typical project. For specific projects, which are supported in this release, please refer to &lt;a href="../../examples/">**Examples and Demos**&lt;/a> section.*
## Debug project with custom openocd
Create a new debug configuration on **Debug Configurations** dialog by double-clicking on **RISC-V Debugging**:
![example image](/images_xplorstudio/50.png)
On the tab **Debugger**, select option **Intel FPGA Board in FPGA.**
![example image](/images_xplorstudio/51.png)
On the **OpenOCD Options**, we use the openocd binary of Quartus and the default openocd configuration file.
![example image](/images_xplorstudio/52.png)
Users can browse the custom openocd binary and the custom openocd configuration file.
![example image](/images_xplorstudio/53.png)
Click **Apply** then click **Debug** to start debugging with the custom openocd binary. --></description></item><item><title>Docs: Installation Issues</title><link>/docs/getting-started/faq/faq/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/getting-started/faq/faq/</guid><description>
&lt;h2 id="failure-when-installing-xplor-studio">Failure when installing XploR Studio&lt;/h2>
&lt;p>&lt;strong>Issue 01: The dependencies packages are not installed&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_faq/1.png" alt="example image">&lt;/p>
&lt;p>Solution: Please make sure your machine has an Internet connection.&lt;/p>
&lt;p>&lt;strong>Issue 02: The installer stopped with the error &amp;ldquo;Java heap space&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>Solution: Please make sure your machine has enough RAM.
Please refer to &lt;a href="../../installation/system-requirements/">&lt;span style="color: blue">&lt;strong>System Requirements&lt;/strong>&lt;/span>&lt;/a> for hardware requirements to install XploR Studio.&lt;/p>
&lt;!-- ## Cannot program FPGA device
Issue: Sometimes, the board cannot be flashed with messages like:
```
*************** Intel FPGA board flash start ***************
Error (23025): Short option -c takes an argument. Refer to --help for legal arguments.
Usage:
------
quartus_pgm [-h | --help[=&lt;option|topic>] | -v]
quartus_pgm -c &lt;cable name> filname.cdf --- If you want to use cdf file
quartus_pgm -c &lt;cable name> -m &lt;programming mode> -o &lt;value> [-o &lt;value>...] --- If you want to use individual programming file(s)
quartus_pgm -l --- to display the list of available hardware
quartus_pgm -c &lt;cable name> -a --- to display the list of devices connected to the cable.
```
**Solution**: Clean up the previous jtag server instance
Please open **Terminal view**, and select **Local Terminal**
&lt;center>
![example image](images/3.png)
&lt;/center>
Then run the following commands in the terminal to see if the board is online:
```
killall jtagd
jtagd --user-start
jtagconfig
```
&lt;center>
![example image](images/4.png)
&lt;/center>
!!!info "Note"
Please use the built-in terminal of the IDE. Otherwise, you may see the message "jtagd not found"
## 3 Could not bind gdb to socket on port 3333: Address already in use
&lt;center>
![example image](images/5.png)
&lt;/center>
The previous debug session is still running on port 3333.
Solution: Right-click on Console View and select **Terminate/Disconnect All**
&lt;center>
![example image](images/6.png)
&lt;/center>
## Error: Fatal: Hart 0 failed to halt during examine()
&lt;center>
![example image](images/7.png)
&lt;/center>
Explanation: The RISC-V core for the previous debug session was not cleaned up.
Solution: Reset the RISC-V core by pressing the reset button on the FPGA board. On DE2-115, **its button KEY0**
## Failed to open port /dev/ttyUSB0 with selected settings.
&lt;center>
![example image](images/8.png)
&lt;/center>
Explanation: User does not have permission to access ttyUSB0 device
Workaround: sudo chmod 666 /dev/ttyUSB0
## `eth_local_ip` Command not found
&lt;center>
![example image](images/9.png)
&lt;/center>
Explanation: The ethernet module on DE2-115 is not activated since the flashed SOF file is not corresponding to the Ethernet jumper settings on the board.
Solution: Please make sure the exact SOF file is flashed. Please refer to &lt;a href="../hardware-environment">**Hardware and Environment**&lt;/a> for more information.
## TFTP is not working
When the board is booting, the Linux image is not downloaded from TFTP Server. The issue could be
- No permission on the tftpboot directory. Try running **chmod -R 777 /path/to/boot.bin**
- Firewall: Update firewall rule to allow TFTP service such as **sudo ufw allow tftp** --></description></item><item><title>Docs: Introduction</title><link>/docs/blueprints/about/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/blueprints/about/</guid><description>
&lt;p>Blueprints are packages of hardware and/or software IP(s) that extend XploR Studio with custom features and behaviors for specific &lt;a href="/docs/concepts/execution-environment/">&lt;em>execution platform(s)&lt;/em>&lt;/a>.&lt;/p>
&lt;p>The &lt;a href="https://xplor.design/">Blueprint Catalog&lt;/a> is a collection of free and paid blueprints from SoC.one, community contributors, and commercial vendors.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
You can peruse the &lt;a href="https://xplor.design/">Blueprint Catalog&lt;/a> from the XploR Studio Dashboard via the &lt;code>Blueprints&lt;/code> menu entry, or with &lt;strong>xip&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe XploR blueprints
state &amp;#34;xplor.design - blueprint registry&amp;#34; as registry {
state &amp;#34;Free blueprints&amp;#34;
state &amp;#34;Paid blueprints&amp;#34;
}
state &amp;#34;Contributors&amp;#34; as contributors {
state &amp;#34;SoC.one&amp;#34; as socone
state &amp;#34;Open source developers&amp;#34; as developers
state &amp;#34;Third-parties vendors&amp;#34; as vendors
}
socone --&amp;gt; registry : contributes
developers -up-&amp;gt; registry : contribute
vendors --&amp;gt; registry : contribute
state &amp;#34;XploR Studio&amp;#34; as IDE
state &amp;#34;Target Platform&amp;#34; as target
IDE : User downloads and installs
IDE : blueprints from XploR.design
IDE : on the host system.
IDE :
IDE : XploR studio deploys blueprints
IDE : on target platform
registry -&amp;gt; IDE : download &amp;amp;\ninstall
IDE --&amp;gt; target
&lt;/code>&lt;/pre>&lt;h3 id="creating-and-contributing-blueprints">Creating and contributing blueprints&lt;/h3>
&lt;p>Developer can create and contribute blueprints to XploR Design blueprint catalog. Once downloaded and installed, contributed blueprints are loaded dynamically XploR Studio.&lt;/p>
&lt;p>The experience of implementing an XploR Design blueprint is comparable to that of writing a web browser extension. To learn more about XploR blueprint creation, please refer to the &lt;a href="../package">&lt;span style="color: blue">Packaging blueprints&lt;/span>&lt;/a> documentation.&lt;/p></description></item><item><title>Docs: Guidelines</title><link>/docs/blueprints/guideline/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/blueprints/guideline/</guid><description>
&lt;p>After successful &lt;a href="../../getting-started/installation/install">&lt;span style="color: blue">installation&lt;/span>&lt;/a>, the baseline IDE does not contain any resources like toolchains, example programs, and target bitfiles.&lt;/p>
&lt;p>To use example projects such as &lt;em>Embedded Baremetal&lt;/em>, &lt;em>Embedded Linux&lt;/em> or &lt;em>LLVM examples&lt;/em>, it is necessary to download and install the respective blueprints.&lt;/p>
&lt;p>Select the icon &lt;img src="/blueprints/1.png" alt="Image alt"> in the toolbar to show a list of available blueprints:&lt;/p>
&lt;p>&lt;img src="/blueprints/2.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>There are two instances of blueprints: &lt;strong>Stable&lt;/strong> for normal usage and &lt;strong>Development&lt;/strong> for development.&lt;/li>
&lt;li>The &lt;strong>Current Version&lt;/strong> and &lt;strong>Available Version&lt;/strong> columns show the current installed version and the newest available version from XploR Design.&lt;/li>
&lt;li>The &lt;strong>Status&lt;/strong> column indicates whether a blueprint is installed.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>To install the desired blueprint, check the box in the &lt;em>No.&lt;/em> column and select &lt;strong>Install&lt;/strong>. One or more blueprints can be installed at the same time.&lt;/p>
&lt;p>&lt;img src="/blueprints/3.png" alt="example image">&lt;/p>
&lt;p>If a blueprint has multiple available versions, you can select a specific version of that blueprint by simply double-clicking on it. A new dialog will be shown to display all available versions:&lt;/p>
&lt;p>&lt;img src="/blueprints/3.1.png" alt="example image">&lt;/p>
&lt;p>The &lt;em>Status&lt;/em> column shows whether the blueprint is installed locally. User can uninstall a blueprint by checking the box in the &lt;em>No.&lt;/em> column and selecting &lt;strong>Uninstall&lt;/strong>. Similar to installing feature, one or more blueprints can be uninstalled at the same time.&lt;/p>
&lt;p>&lt;img src="/blueprints/3-2.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/blueprints/3-3.png" alt="example image">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;p>If you do not wish to install the dependencies of specific blueprints, please select the checkbox labeled &lt;strong>Don&amp;rsquo;t install Blueprint&amp;rsquo;s dependencies&lt;/strong> below the blueprints list.&lt;/p>
&lt;p>&lt;img src="/blueprints/2-1.png" alt="example image">&lt;/p>
&lt;/div></description></item><item><title>Docs: Packaging blueprint</title><link>/docs/blueprints/package/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/blueprints/package/</guid><description>
&lt;blockquote>
&lt;p>&lt;strong>WARNING&lt;/strong>
The following guide is preliminary and subjected to changes.&lt;/p>
&lt;/blockquote>
&lt;h2 id="prerequisite">Prerequisite&lt;/h2>
&lt;p>The following software components on the host computer are required:&lt;/p>
&lt;ul>
&lt;li>python==3.8.10&lt;/li>
&lt;li>setuptools (newest version)&lt;/li>
&lt;/ul>
&lt;h2 id="template">Template&lt;/h2>
&lt;p>Download and extract the blueprint template from &lt;a href="https://github.com/xplor-studio/xip/blob/blueprint-template/empty-blueprint-templates.zip">here&lt;/a>.&lt;/p>
&lt;p>Note that blueprint name should be in lowercases. If multiple words are used, they should be separated by underscores &lt;code>_&lt;/code> or &lt;code>-&lt;/code>. Avoid using spaces or special characters or mixing &lt;code>_&lt;/code> and &lt;code>-&lt;/code> in the package name.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Examples:&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code> Correct name : `blueprint-one`, `blueprint_two`
Wrong name : `blueprint_with-wrong_name`
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;h3 id="structure-of-blueprint-templates">Structure of blueprint templates&lt;/h3>
&lt;p>In the example blueprint template, there are 2 folders (&lt;strong>blueprint-one/&lt;/strong>, &lt;strong>blueprint-two/&lt;/strong>) containing blueprint templates and a &lt;em>Makefile&lt;/em> that supports building and publishing blueprints.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ blueprint-one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”œâ”€â”€ blueprint-one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”‚ â””â”€â”€ Readme.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”œâ”€â”€ MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â””â”€â”€ setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ blueprint-two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”œâ”€â”€ blueprint-two
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”‚ â”œâ”€â”€ linux.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”‚ â”‚ â””â”€â”€ env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”‚ â””â”€â”€ win32.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”‚ â””â”€â”€ env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â”œâ”€â”€ MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”‚ â””â”€â”€ setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â””â”€â”€ Makefile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The standard structure of a blueprint template includes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A data folder (blueprint-one/blueprint-one, blueprint-two/blueprint-two)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MANIFEST.in&lt;/strong> (used for including non-Python data to package/blueprint)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>setup.py&lt;/strong> (used for building a blueprint)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Two different data scenarios for blueprint are supported:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The data of the blueprint are host-independent, and can be used in both Windows and Linux OS (&lt;strong>blueprint-one&lt;/strong>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The data of the blueprint are host-dependent, requiring a different version for each supported host (&lt;strong>blueprint-two&lt;/strong>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Limitation&lt;/strong>: blueprints that have a mix of both common and specific data for different supported host are not yet supported.&lt;/p>
&lt;/blockquote>
&lt;h2 id="setuppy">setup.py&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>blueprint-one/setup.py&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">setuptools&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blueprint-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;blueprint-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;blueprint-one&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">version&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">package_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">packages&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blueprint-one&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">include_package_data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">author&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SoC.One Inc.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://xplor.design&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">author_email&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;info@soc.one&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">platforms&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">long_description&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;The baremetal example of the NEORV32 RISC-V Processor on Terrasic DE2-115 board&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">license&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Free&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">install_requires&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Some dependencies here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">classifiers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;Hardware&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Ref. &lt;a href="https://setuptools.pypa.io/en/latest/references/keywords.html">https://setuptools.pypa.io/en/latest/references/keywords.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;code>name&lt;/code> - A string specifying the name of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>version&lt;/code>- A string specifying the version number of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>description&lt;/code> - A string describing the package in a single line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>long_description&lt;/code> - A string providing a longer description of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>author&lt;/code> - A string specifying the author of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>author_email&lt;/code> - A string specifying the email address of the package author.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>URL&lt;/code> - A string specifying the URL for the package homepage.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>license&lt;/code> - A string specifying the license of the package.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>platforms&lt;/code> - A list of strings or comma-separated string. (Used to specify which OS is supported)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>package_dir&lt;/code> - A dictionary that maps package names. (That maps the data folder with the installed blueprint folder)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>packages&lt;/code> - A list of strings specifying the packages that setuptools will manipulate. (That is the name of the installed blueprint folder)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>install_requires&lt;/code> - A string or list of strings specifying what other distributions need to be installed when this one is. (Dependencies concept)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>classifiers&lt;/code> - A list of strings describing the categories for the package. (Classify a blueprint as HW, SW, bitstream,â€¦ or something else)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>include_package_data&lt;/code> - If True, setuptools will automatically include any data files it finds inside your package directories that are specified by your MANIFEST.in file. (Should be set to True to include non-Python data)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>For (&lt;code>blueprint-two&lt;/code>), only some code need to be added to &lt;code>setup.py&lt;/code> to specify &lt;code>package_dir&lt;/code> for each supported host OS, as follow:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">setuptools&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">setup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">platform&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">platform&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blueprint-two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;blueprint-two/win32.x86_64&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">package_dir&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;blueprint-two&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;blueprint-two/linux.x86_64&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="post-install-and-pre-uninstall">Post-install and Pre-uninstall&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;p>If there are executable files that need to run after the blueprint is installed, please add &lt;code>post-install.sh/post-install.bat&lt;/code> file (host specific) to the data folder.&lt;/p>
&lt;p>If there are executable files that need to run before the blueprint is uninstalled, please add &lt;code>pre-uninstall.sh/pre-uninstall.bat&lt;/code> file (host specific) to the data folder.&lt;/p>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>xplor-studio-elf/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â””â”€â”€ xplor-studio-elf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ linux.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â”œâ”€â”€ post-install.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â””â”€â”€ pre-uninstall.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â””â”€â”€ win32.x86_64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ post-install.bat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â””â”€â”€ pre-uninstall.bat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="building-blueprint">Building blueprint&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% python3 setup.py sdist
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or &lt;code>% make build&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>If you&amp;rsquo;re reusing the example template, please rename the data folder and update the content of &lt;code>setup.py&lt;/code>, &lt;code>MANIFEST.in&lt;/code>&lt;/li>
&lt;li>As an example, with &lt;code>blueprint-one&lt;/code>:
&lt;ul>
&lt;li>Rename folder &lt;code>blueprint-one&lt;/code> â†’ &lt;code>socone-blueprint&lt;/code>&lt;/li>
&lt;li>Replace string in &lt;code>setup.py&lt;/code>, &lt;code>MANIFEST.in&lt;/code> : &lt;code>blueprint-one&lt;/code> â†’ &lt;code>socone-blueprint&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="example-of-creating-sample-blueprint">Example of creating Sample Blueprint&lt;/h2>
&lt;p>This is an example of how to create a Blueprint for Baremetal Helloworld sample.
Download and extract the Sample Blueprint template from &lt;a href="https://github.com/xplor-studio/xip/blob/blueprint-template/xplor-studio-sample-blueprint-template.zip">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xplor-sample-emb-hello-c/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ MANIFEST.in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â”œâ”€â”€ setup.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â””â”€â”€ xplor-sample-emb-hello-c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â”œâ”€â”€ main.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”‚ â””â”€â”€ ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ settings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ .cproject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â”œâ”€â”€ .project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â””â”€â”€ project.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Makefile&lt;/code>
To clean or build the Sample blueprint, use these commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/blueprints/makefile.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>MANIFEST.in&lt;/code>
Just need to replace with Blueprint&amp;rsquo;s name
&lt;img src="/blueprints/manifest.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>setup.py&lt;/code>
Update the Sample Blueprint&amp;rsquo;s information like name, description, platforms, dependencies &amp;hellip;
&lt;img src="/blueprints/setup_py.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>project.json&lt;/code>
&lt;img src="/blueprints/project_json.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Besides the basic information like Project&amp;rsquo;s Name, Project&amp;rsquo;s Type, User need to pay attention to Project&amp;rsquo;s language and Project&amp;rsquo;s category parameters.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>XPLORSTUDIO IDE supports two kinds of Project&amp;rsquo;s language as C and CPP.&lt;/li>
&lt;li>XPLORSTUDIO IDE supports the following list of Project&amp;rsquo;s categories:
&lt;ul>
&lt;li>Linux: RISC-V Embedded Linux Project&lt;/li>
&lt;li>Baremetal: RISC-V Embedded Project&lt;/li>
&lt;li>FreeRTOS: FreeRTOS Project&lt;/li>
&lt;li>Zephyr: Zephyr Project&lt;/li>
&lt;li>Linux_Kernel: Static Linux Kernel Project
User have to select the correct Project&amp;rsquo;s category from above list.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>xplor-sample-emb-hello-c&lt;/code>
Contains all resources of Eclipse&amp;rsquo;s project such as source code files, header files, linker script, libraries &amp;hellip;
&lt;img src="/blueprints/src_main.png" alt="example image">&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/blueprints/project.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/blueprints/cproject.png" alt="example image">&lt;/p>
&lt;p>In .cproject, it includes information of Project&amp;rsquo;s settings like managed build options, include paths, library paths &amp;hellip;. Please, check the path of these resources, you should use the relative path, not the absolute path.
For example, to define the linker path:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &amp;lt;option &lt;span style="color:#000">IS_BUILTIN_EMPTY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">IS_VALUE_EMPTY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;vio.managedbuild.elf.riscv.option.c.linker.paths.222877999&amp;#34;&lt;/span> &lt;span style="color:#000">superClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;vio.managedbuild.elf.riscv.option.c.linker.paths&amp;#34;&lt;/span> &lt;span style="color:#000">valueType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;libPaths&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;listOptionValue &lt;span style="color:#000">builtIn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;amp;quot;&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">XPLOR_HOME&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/blueprints/libraries/libpico/lib/virt/xplor&amp;amp;quot;&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;listOptionValue &lt;span style="color:#000">builtIn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/option&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To support Windows environment, User should use &amp;lsquo;&amp;quot;&amp;rsquo; before and after the relative path of resource&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Configuring project</title><link>/docs/configuration/build/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/build/</guid><description>
&lt;p>To configure a project in XploR Studio, right-click on the project and select &lt;strong>Properties&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_configuration//build/1.png" alt="example image">&lt;/p>
&lt;p>The properties for a project include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Resource&lt;/strong>: Defined path variables for project.&lt;/li>
&lt;li>&lt;strong>C/C++ Build&lt;/strong>: Configure project build options including build variables, environment settings, logging, build tools, and more.&lt;/li>
&lt;li>&lt;strong>C/C++ General&lt;/strong>: Customize workspace settings including code analysis, formatting, indexing, language mappings, etc.&lt;/li>
&lt;li>&lt;strong>Project Natures&lt;/strong>: Specify which natures should be assigned to the project (an advanced operation, requires a recent backup).&lt;/li>
&lt;li>&lt;strong>Project References&lt;/strong>: Specify which other projects are referenced by the current project.&lt;/li>
&lt;li>&lt;strong>Run/Debug Settings&lt;/strong>: Manage launch configurations associated with the current resource.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_configuration//build/2.png" alt="example image">&lt;/p>
&lt;h2 id="build-configurations">Build Configurations&lt;/h2>
&lt;p>To configure build settings, select &lt;strong>C/C++ Build &amp;gt; Settings&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_configuration//build/3.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tool Settings&lt;/strong> tab allows you to configure options while building applications, such as setting the target architecture, ABI, tuning, code model, and adding optimization options, libraries and warning options in the assembler, compiler, and linker steps.&lt;/li>
&lt;li>&lt;strong>Build Steps&lt;/strong> tab allows you to add pre-build and post-build commands&lt;/li>
&lt;/ul></description></item><item><title>Docs: Preparing target connection</title><link>/docs/configuration/flash/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/flash/</guid><description>
&lt;p>Prior to running or debugging the application, you must:&lt;/p>
&lt;ol>
&lt;li>Establish a physical connection between the host and target&lt;/li>
&lt;li>Prepare an execution environment on the target, and&lt;/li>
&lt;li>Establish a logical debug channel between the host debugger and execution environment&lt;/li>
&lt;/ol>
&lt;h3 id="physical-target-connection">Physical target connection&lt;/h3>
&lt;p>For most target platform(s) (FPGAs boards), physical target connection is achieved via one of the following means:&lt;/p>
&lt;ul>
&lt;li>Host computer and target platform connected via USB&lt;/li>
&lt;li>Target platform installed as a PCIe device on host computer&lt;/li>
&lt;li>Host computer connected to target via secure VPN (cloud native)&lt;/li>
&lt;/ul>
&lt;p>For most cases, a USB cable is used to connect the host system to the target platform&lt;/p>
&lt;h3 id="preparing-execution-environment">Preparing execution environment&lt;/h3>
&lt;p>A binary image (bitfile) containing the hardware design of the system-on-chip that runs the embedded program will need to be downloaded and programmed on the FPGAs or hardware-assisted verification systems (HAVS) target.&lt;/p>
&lt;p>For ASIC target platforms, no additional preparation is needed.&lt;/p>
&lt;p>To program a bitfile to the specific board, click on the flash icon &lt;img src="/images_configuration/flash/flashing-icon.png" alt="Image alt"> on the toolbar of XploR Studio IDE.&lt;/p>
&lt;p>The &lt;strong>Programming IP Core&lt;/strong> dialog appears to make it easier to select IP cores from different vendors:&lt;/p>
&lt;p>&lt;img src="/images_configuration/flash/1.png" alt="example image">&lt;/p>
&lt;p>The images show the IP core selected is &lt;code>s10gx_vexriscv.sof&lt;/code>, which is the bitfile for Intel Stratix 10 GX FPGA board from VexRiscv vendor and the tool used for programming board is &lt;code>quartus_pgm&lt;/code> (Quartus Programmer).&lt;/p></description></item><item><title>Docs: Running program</title><link>/docs/configuration/run/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/run/</guid><description>
&lt;p>To Run a project on XploR Studio, right-click on the project and select &lt;strong>Run As &amp;gt; Run Configurations&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The project used in this documentation is &lt;strong>GNU C/C++ Helloworld Embedded Project&lt;/strong> so there are some differences in other projects.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_configuration/run/1.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Running&lt;/strong> to create a new run configuration. In &lt;strong>Main&lt;/strong> tab, you can select the application path, auto-build option and change run configuration:&lt;/p>
&lt;p>&lt;img src="/images_configuration/run/2.png" alt="example image">&lt;/p></description></item><item><title>Docs: Debugging program</title><link>/docs/configuration/debug/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/configuration/debug/</guid><description>
&lt;p>To debug a project on XploR Studio, right-click on the project and select &lt;strong>Debug As &amp;gt; Debug Configurations&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
The project used in this documentation is &lt;strong>GNU C/C++ Helloworld Embedded Project&lt;/strong> so there are some differences in other projects.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_configuration/debug/1.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Debugging&lt;/strong> to create a new debug configuration:&lt;/p>
&lt;p>&lt;img src="/images_configuration/debug/2.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Main&lt;/strong> tab: Specify the executable application and configure auto-build option&lt;/li>
&lt;li>&lt;strong>Debugger&lt;/strong> tab: Specify &lt;em>Platform&lt;/em> (Remote Target/QEMU/Hardware/&amp;hellip;), &lt;em>GDB setup&lt;/em> (GDB commands, GDB options, etc..) and &lt;em>Platform Configuration&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_configuration/debug/3.png" alt="example image">&lt;/p></description></item><item><title>Docs: Sample projects</title><link>/docs/examples/introduction/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/introduction/</guid><description>
&lt;p>In this release, XploR Studio supports following projects:&lt;/p>
&lt;ul>
&lt;li>Baremetal projects:
&lt;ul>
&lt;li>&lt;a href="/docs/examples/embedded/riscvhelloworld/">&lt;span style="color: blue">GNU C/C++ Helloworld&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/embedded/llvmhelloworld/">&lt;span style="color: blue">LLVM C/C++ Helloworld&lt;/span>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FreeRTOS projects:
&lt;ul>
&lt;li>&lt;a href="/docs/examples/freertos/blinky/">&lt;span style="color: blue">Blinky&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/freertos/genericheap/">&lt;span style="color: blue">General Heap&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/freertos/largeheap/">&lt;span style="color: blue">Large Heap&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/freertos/generictimer/">&lt;span style="color: blue">Generic Timer&lt;/span>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Embedded Linux projects:
&lt;ul>
&lt;li>&lt;a href="/docs/examples/embedded-linux/helloworld/">&lt;span style="color: blue">Helloworld&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/embedded-linux/debug-kernel/">&lt;span style="color: blue">Kernel Debug&lt;/span>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Zephyr RTOS projects:
&lt;ul>
&lt;li>&lt;a href="/docs/examples/zephyrrtos/zephyrhelloworld/">&lt;span style="color: blue">Helloworld&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/zephyrrtos/zephyrsynchronization/">&lt;span style="color: blue">Synchonization&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/zephyrrtos/zephyrmutex/">&lt;span style="color: blue">Mutex&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/zephyrrtos/zephyrsemaphore/">&lt;span style="color: blue">Semaphore&lt;/span>&lt;/a>&lt;/li>
&lt;li>&lt;a href="/docs/examples/zephyrrtos/zephyrmsgq/">&lt;span style="color: blue">Message Queue&lt;/span>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: GNU C/C++ HelloWorld</title><link>/docs/examples/embedded/riscvhelloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded/riscvhelloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded projects including creating, building, running, and debugging embedded applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded applications with QEMU emulator, please install the &lt;strong>xplor-studio-elf&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/1-1.png" alt="example image">&lt;/p>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V Helloworld&lt;/strong> project and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em> then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/1.png" alt="example image">&lt;/p>
&lt;p>In the next screens, the user can specify project options such as Author, copyright notice, project description, compiler, assembler, linker, and run/debug options. Then click the Next button.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/2.png" alt="example image">&lt;/p>
&lt;p>Then click Next to select Vendor Information. From the list, User can select one platform and one core to run/debug.&lt;/p>
&lt;!--
![example image](/images_embedded/RISCVHelloworld/3.png)
![example image](/images_embedded/RISCVHelloworld/4.png)
-->
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/5.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## &lt;a id="debug-imperas">&lt;span style="color: black">5. Running and Debugging project with Imperas emulator&lt;/span> &lt;/a>
!!!warning "Note"
Before running the HelloworldDemo with Imperas, please update the build setting to "Architecture: RV64I, IntegerABI: LP64". Because Imperas only supports 64-bit samples currently.
![example image](/images_embedded/RISCVHelloworld/28.png)
### Run project on Imperas emulator
Right-click on current project > **Run As > RISV-C application with Imperas**.
![example image](/images_embedded/RISCVHelloworld/29.png)
The output of the application is shown in the Console view:
![example image](/images_embedded/RISCVHelloworld/30.png)
### Debug project on Imperas Emulator
**There are three ways to start debugging the application:**
1. Select the HelloworldDemo entry in the Project Explorer then open the **Debug Configurations** Dialog. Doing so will enable XploR Studio to automatically fill out the necessary debug configuration information.
![example image](/images_embedded/RISCVHelloworld/31.png)
In the **Debug Configurations** Dialog, create a new one by double clicking on **RISC-V Debugging**:
![example image](/images_embedded/RISCVHelloworld/32.png)
On the tab **Debugger**, choose option **Imperas in Virtual Platforms**. Click **Apply** then click **Debug**.
![example image](/images_embedded/RISCVHelloworld/33.png)
2. Select the **HelloworldDemo** in the **Toolbar**, then click **Debug As RISC-V application with Imperas**.
![example image](/images_embedded/RISCVHelloworld/34.png)
3. Right-click on the current project in the **Project Explorer > Debug As > RISV-C application with Imperas.**
![example image](/images_embedded/RISCVHelloworld/35.png)
After selecting Debug As and RISC-V application with Imperas, the XploR Studio UI changes to debug perspective and automatically sets a breakpoint in the first line of code in main() function.
Refer to [Running and Debugging project with QEMU emulator](../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator) for more information about examining applications and perform functions such as adding new breakpoints, viewing and changing variable values, checking the register values, and so on.
## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: LLVM C/C++ HelloWorld</title><link>/docs/examples/embedded/llvmhelloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded/llvmhelloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded RISC-V projects including creating, building, running, and debugging embedded RISC-V applications. The project referred to in this chapter is called &amp;ldquo;LLVM Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built with LLVM toolchain and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded applications with QEMU emulator, please install the &lt;strong>xplor-studio-elf&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>To create &lt;em>LLVM Hello World Embedded Project&lt;/em>, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V LLVM Sample&lt;/strong> project and &lt;strong>Toolchains&lt;/strong>: &lt;em>LLVM Baremetal Toolchain for RISC-V&lt;/em>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/LLVMHelloworld/1.png" alt="example image">&lt;/p>
&lt;p>As the image above, there is no option as &lt;em>LLVM Baremetal Toolchain for RISC-V&lt;/em> because this XploR Studio does not contain LLVM toolchain.&lt;/p>
&lt;p>To use this toolchain, please install &lt;strong>xplor-clang&lt;/strong> blueprint (refer to &lt;a href="../../../blueprints/guideline">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information).&lt;/p>
&lt;p>After installation and restart the IDE, you can see the creating-project widget like:&lt;/p>
&lt;p>&lt;img src="/images_embedded/LLVMHelloworld/1-1.png" alt="example image">&lt;/p>
&lt;p>Please refer to &lt;a href="../../../getting-started/quick-start/freertos#create-a-new-project">&lt;span style="color: blue">Create a new project&lt;/span>&lt;/a> for more information on other steps.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Imperas emulator
The running and debugging with Imperas emulator is the same as the **RISC-V Hello World Embedded Application**. Please refer to [Running and Debugging project with Imperas emulator](../../../examples/embedded/RISCVHelloworld#debug-imperas)
## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Blinky</title><link>/docs/examples/freertos/blinky/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/freertos/blinky/</guid><description>
&lt;p>This chapter covers the basics of C/C++ FreeRTOS projects including creating, building, running, and debugging FreeRTOS applications. The project referred to in this chapter is called &amp;ldquo;Blinky&amp;rdquo;. This application prints &lt;em>Blink&lt;/em> text. Through the debug session, users can examine RTOS objects such as Task and Queue. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug FreeRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Please refer to &lt;a href="../../../getting-started/quick-start/freertos#create-a-new-project">&lt;span style="color: blue">Create a new project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Generic Heap</title><link>/docs/examples/freertos/genericheap/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/freertos/genericheap/</guid><description>
&lt;p>This chapter covers the basics of the FreeRTOS RISC-V Heap sample application including creating, building, running, and debugging steps. This application simply prints &lt;em>Testing Heap&lt;/em> on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, &amp;hellip; during debug session. This application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug FreeRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>FreeRTOS Project&lt;/strong> &amp;gt; &lt;strong>RISC-V Generic Heap&lt;/strong> and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em>, enter project name then click &lt;strong>Next&lt;/strong> button.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
When suspending the debug process and switching to Terminal view, the user can see the "Testing Heap" message:
&lt;center>
![example image](images/GenericHeap/4.png)
&lt;/center>
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Large Heap</title><link>/docs/examples/freertos/largeheap/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/freertos/largeheap/</guid><description>
&lt;p>This chapter covers the basics of the FreeRTOS RISC-V Large Heap application including creating, building, running, and debugging steps. This application simply prints &lt;em>Testing Heap&lt;/em> on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, &amp;hellip; during debug session. This application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug FreeRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>FreeRTOS Project&lt;/strong> &amp;gt; &lt;strong>RISC-V Large Heap&lt;/strong> and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em>, enter project name then click &lt;strong>Next&lt;/strong> button.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
When suspending the debug process and switching to Terminal view, the user can see the "Testing Heap" message:
&lt;center>
![example image](images/LargeHeap/4.png)
&lt;/center>
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Generic Timer</title><link>/docs/examples/freertos/generictimer/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/freertos/generictimer/</guid><description>
&lt;p>This chapter covers the basics of the FreeRTOS RISC-V Generic Timer application including creating, building, running, and debugging steps. This application simply prints &lt;em>Testing Timer&lt;/em> on the console screen. Through this example, users know how to discover FreeRTOS objects such as Queue, Task, Heap, &amp;hellip; during debug session. This application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug FreeRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>FreeRTOS Project&lt;/strong> &amp;gt; &lt;strong>RISC-V Generic Timer&lt;/strong> and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em>, enter project name then click &lt;strong>Next&lt;/strong> button.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Besides, users can see more about Timer objects:&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/22.png" alt="example image">&lt;/p>
&lt;!-- ## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
If you customise the sample application and see this message on the Terminal view,
```
ERROR_1FreeRTOS V10.4.3 on NEORV32 Demo
FreeRTOS_FAULT: vApplicationMallocFailedHook (solution: increase 'configTOTAL_HEAP_SIZE' in FreeRTOSConfig.h)
```
the heap size is small and need to be adjusted by update configTOTAL_HEAP_SIZE in src/application-specific/FreeRTOSConfig.h
&lt;center>
![example image](images_IMG_FOLDER/GenericTimer/7.png)
&lt;/center>
and RAM size in src/environmental-support/env-board/linker_script.lds
&lt;center>
![example image](images/GenericTimer/8.png)
&lt;/center>
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Hello World</title><link>/docs/examples/embedded-linux/helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded-linux/helloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded Linux projects, including create/build/run/debug embedded Linux applications. The project referred to by this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop for simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded Linux applications with QEMU emulator, please install the &lt;strong>xplor-studio-linux&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Linux Project &amp;gt; Helloworld&lt;/strong> project and select &lt;strong>Embedded Linux XploR Toolchain for RISC-V&lt;/strong> in the Toolchains box&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1.png" alt="example image">&lt;/p>
&lt;p>As the image above, there is no option as &lt;em>Embedded Linux XploR Toolchain for RISC-V&lt;/em> because this XploR Studio does not contain Embedded Linux toolchain.&lt;/p>
&lt;p>To use this toolchain, please install &lt;em>Embedded Linux toolchain&lt;/em> blueprint first.
There are 4 different blueprints:&lt;/p>
&lt;ul>
&lt;li>RISC-V Embedded Linux toolchain 32-bit: &lt;strong>riscv32-xplor-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 32-bit (Double): &lt;strong>riscv32-xplord-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 64-bit: &lt;strong>riscv64-xplor-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 64-bit (Double): &lt;strong>riscv64-xplord-linux&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-3.png" alt="example image">&lt;/p>
&lt;p>Each blueprint can be downloaded separately depending on the purpose.&lt;/p>
&lt;p>Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>After installation and restarting the IDE, you can see the creating-project widget like:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-1.png" alt="example image">&lt;/p>
&lt;p>On Ubuntu, LLVM Embedded Linux toolchain is packaged inside the Embedded Linux toolchain that supports &lt;em>Double&lt;/em> extension (&lt;strong>riscv32-xplord-linux&lt;/strong> and &lt;strong>riscv64-xplord-linux&lt;/strong>). LLVM Embedded Linux toolchain has not been supported on Windows yet.&lt;/p>
&lt;p>For using LLVM Embedded Linux toolchain, please make sure that the RISC-V Embedded Linux toolchain (Double) are installed and select LLVM Embedded Linux Toolchain for RISC-V in the Toolchains box:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/2.png" alt="example image">&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Please make sure that the toolchain used to build is installed, otherwise errors as in the following image will appear:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-2.png" alt="example image">&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>To run and debug Embedded Linux applications with QEMU emulator, please install the &lt;strong>rootfs&lt;/strong> blueprint and &lt;strong>qemu&lt;/strong> blueprint (if QEMU is not installed). Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-4.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h4 id="run-project-on-qemu-emulator">Run project on QEMU emulator&lt;/h4>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the project entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-1.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Run Configuration Dialog&lt;/strong>, create new run configuration by double clicking on RISC-V Runging:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-2.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Main&lt;/strong> tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click Apply then Click Debug.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-3.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the desired project in the Project Explorer window, then click Run As/RISC-V application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-4.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Run As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Run As RISC-V application with QEMU, Console view will print as below image:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-5.png" alt="example image">&lt;/p>
&lt;h4 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h4>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/7.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Debug Configuration Dialog&lt;/strong>, create new configuration by double clicking on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/8.png" alt="example image">&lt;/p>
&lt;p>On tab &lt;strong>Debugger&lt;/strong>, choose option &lt;strong>QEMU&lt;/strong> in Virtual Platforms. Click Apply then Click Debug.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/9.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the desired project in the Project Explorer window, then click Debug As/RISC-V application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/10.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Debug As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/11.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/12.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Imperas emulator
### Run project on Imperas emulator
**Right-click on current project > Run As > RISV-C application with Imperas**
![example image](/images_embedded_linux/linux/7.png)
### Debug project on Imperas Emulator
XploR Studio offers several ways to debug applications:
- Select the project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.
![example image](/images_embedded_linux/linux/23.png)
On the **Debug Configuration Dialog**, create a new configuration by double clicking on RISC-V Debugging:
![example image](/images_embedded_linux/linux/24.png)
![example image](/images_embedded_linux/linux/25.png)
On the tab **Debugger**, choose option **Imperas** in **Virtual Platforms**. Click **Apply** then Click **Debug**.
![example image](/images_embedded_linux/linux/26.png)
Select the desired project in the Project Explorer window, then click **Debug As > RISC-V application with Imperas.**
![example image](/images_embedded_linux/linux/27.png)
**Right-click on the current project > Debug As > RISV-C application with Imperas**
![example image](/images_embedded_linux/linux/28.png)
After selecting **Debug As > RISC-V application with Imperas**, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.
![example image](/images_embedded_linux/linux/29.png)
Other functions of debugging (such as *Resume*, *Step Into*, *Step Over*, *Step Return*, *Terminate*, ...) are the same as the quick-start project's. Please refer to [Running and Debugging project with QEMU emulator](../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator) for more information.
## &lt;a id="debug-linux-de2">&lt;span style="color: black">6 Running and Debugging project with Intel FPGA DE2-115 platform&lt;/span> &lt;/a>
The programming IP core step with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
!!!info "Note"
- The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on the DE2-115 board.
- There are two built-in SoC SOFs on XploR Studio to flash DE2-115 for embedded Linux applications:
- One for MII network mode where speed is 10 Mbps
- One for RGMII network mode where speed is 1000Mps
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
Currently, **riscv64-ipf-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain
- Right click on the project then select properties.
- In project settings, select
+ Architecture: RV64 (-march=rv64i*)
+ Floating point: None
+ Integer ABI: LP64 (-mabi=lp64*)
+ Floating point ABI: None
![example image](/images_embedded_linux/linux/43.png)
- Click Apply and Close
There are some differences when debugging Linux applications, it is necessary to update some config as follows:
On the Debugger tab, select Intel FPGA Board.
![example image](/images_embedded_linux/linux/46.png)
On the Configuration, select "**Advanced Configuration**".
![example image](/images_embedded_linux/linux/47.png)
Click the **New** button to create a new connection configuration, then select **SSH** as connection type:
![example image](/images_embedded_linux/linux/48.png)
On the "New Connection" dialog.
- Connection name: The name of connection
- Host: 192.168.1.50. This is the default IP address of Linux run on board. If you use a different subnet when booting Linux, please update this IP too.
- User: root
- Use password-based authentication: No password
![example image](/images_embedded_linux/linux/49.png)
Click **Finish** to create the connection configuration.
In the Connections dropdown, select the newly created connection name and set the destination file path to copy the application to the board.
On the Remote Absolute File Path for C/C++ Application, enter the path of the elf file that is copied to Linux (ex: /tmp/riscv.elf).
![example image](/images_embedded_linux/linux/50.png)
Click **Debug** to start debugging.
!!!info "Note"
When starting the first debug session, it will take time for the PC and board to exchange ssh keys.
If you see this error messagge, please update your project setting to use *riscv64-ipf-linux* as noted above.
![example image](/images_embedded_linux/linux/51.png)
## &lt;a id="debug-linux-stratix">&lt;span style="color: black">7 Running and Debugging a project with Intel FPGA Stratix 10 GX platform&lt;/span> &lt;/a>
The programming IP core step with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information.
!!!info "Note"
- The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on Intel FPGA Stratix 10 GX board.
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
Currently, **riscv64-ipfd-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain:
- Right-click on the project then select properties.
- In project settings, select
+ Architecture: RV64(-march=rv64i*)
+ Floating point: None
+ Integer ABI: LP64(-mabi=lp64*)
+ Floating point ABI: Double precision extension (RVFD)
+ Click Apply and Close
The following steps as same as the previous sections. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../examples/embedded-linux/Helloworld#debug-linux-de2) for more information. --></description></item><item><title>Docs: Kernel debug</title><link>/docs/examples/embedded-linux/debug-kernel/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded-linux/debug-kernel/</guid><description>
&lt;p>This chapter covers the basics of Linux Kernel projects including creating and debugging a &lt;strong>static Kernel&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To build, run and debug Kernel Debugging applications with QEMU emulator, please install the &lt;strong>xplor-studio-kernel&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/li>
&lt;li>In this release, &lt;strong>Debugging Kernel&lt;/strong> feature is only available on Ubuntu.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &amp;ldquo;&lt;strong>File &amp;gt; New &amp;gt; C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Linux Kernel Project&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/1.png" alt="example image">&lt;/p>
&lt;p>Enter the &lt;em>Project name&lt;/em> and select &lt;strong>Embedded Linux XploR Toolchain for RISC-V&lt;/strong> in the Toolchains box, then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/2.png" alt="example image">&lt;/p>
&lt;p>Select &lt;em>Kernel Source Path&lt;/em> then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/3.png" alt="example image">&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>With build settings, users can switch from 32 bits to 64 bits as well as different floating point ABI options (except Single Precision). The kernels are specified via those options.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/4.png" alt="example image">&lt;/p>
&lt;p>Please refer to the below table to select the correct options for each target.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Platform&lt;/th>
&lt;th style="text-align:center">Core&lt;/th>
&lt;th style="text-align:center">Architecture&lt;/th>
&lt;th style="text-align:center">Floating Point&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Warning:&lt;/strong>
&lt;strong>The Static Kernel project does not need to be built because the XploR Studio uses a pre-build kernel image for debugging.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/5.png" alt="example image">&lt;/p>
&lt;h2 id="debugging-the-kernel-with-qemu-emulator">Debugging the kernel with QEMU emulator&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to &lt;a href="#update-build-settings">Section 2: Update build settings&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>There are two ways to debug the kernel:&lt;/p>
&lt;ul>
&lt;li>On the Project explorer, right-click on the project name and select &lt;strong>Debug as &amp;gt; RISC-V Kernel application with QEMU.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/6.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Create the new &lt;strong>RISC-V Kernel Debugging&lt;/strong> configurations: Right-click on the project name then select &lt;strong>Debug As &amp;gt; Debug Configurations.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/7.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Kernel Debugging&lt;/strong>, then click &lt;strong>Debug&lt;/strong> to start the Kernel debugging session.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/8.png" alt="example image">&lt;/p>
&lt;p>When starting kernel debugging, the kernel is suspended in the start_kernel function and the terminal/console pauses at kernel booting.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/9.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>To debug an &lt;a href="../../../examples/embedded-linux/helloworld">&lt;span style="color: blue">embedded Linux applications&lt;/span>&lt;/a>, the kernel should be booted completely.&lt;/strong>&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;p>To switch arch between 32-bit and 64-bit, users should remove the old Debug Kernel Configuration and create a new one to change the kernel (vmlinux).&lt;/p>
&lt;p>Or users can replace vmlinux manually at: &lt;code>~/.xplor/blueprints/rootfs-debug/rv***_debugkernel/vmlinux&lt;/code>&lt;/p>
&lt;p>Sometimes unable to debug Kernel for the first time with information such as follows:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/9-1.png" alt="example image">&lt;/p>
&lt;/div>
&lt;!-- ## Debugging the kernel with Intel FPGA DE2-115 platform
### Hardware and connection preparations
Please refer to the &lt;a href="../../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
!!!info "Note"
- The Ethernet connection is needed only for debugging **Embedded Linux RISC-V applications** on the DE2-115 board.
- There are two built-in SoC SOFs on XploR Studio to flash DE2-115 for embedded Linux applications:
+ One for MII network mode where speed is 10 Mbps
+ One for RGMII network mode where speed is 1000Mps
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
### Programming IP core
To programming RISC-V IP core to the board, click on Flash icon on the toolbar.
![example image](/images_embedded_linux/debug-kernel/10.png)
- In **Vendor**, select: Rocket
- In **Product**, select
- "**rocket64 - DE2-115 (mii)**" for MMI network mode
- "**rocket64 - DE2-115 (rgmii)**" for RGMII network mode
- **Custom IP core** if users use their own RISC-V IP core.
Select the JTAG cable (if the user has multiple boards connected to the development machine).
Click **Finish** to flash Rocket 64 bits RISC-V core.
To view the console output printed from the RISC-V core, please open Terminal view, and select COM port (on Windows) or ttyUSB port (on Linux) with the following connection settings:
![example image](/images_embedded_linux/debug-kernel/11.png)
The Terminal view shows BIOS and Linux boot messages.
![example image](/images_embedded_linux/debug-kernel/12.png)
![example image](/images_embedded_linux/debug-kernel/13.png)
Users can log in to Linux using a "**root**" account **without a password**.
### Update build settings
Currently, **riscv64-ipf-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain.
- Right-click on the project then select properties.
- In project settings, select
- Architecture: RV64(-march=rv64i*)
- Floating point: None
- Integer ABI: LP64(-mabi=lp64*)
- Floating point ABI: None
- Click Apply and Close
### Debugging the Kernel on Intel FPGA DE2-115 platform
!!!info "Note"
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to [Section 2: Update build settings](#2-update-build-settings)
There are two ways to debug the kernel:
- On the Project explorer, right-click on the project name and select **Debug as > RISC-V Kernel application with Hardware** (default is DE2-115)
![example image](/images_embedded_linux/debug-kernel/14.png)
- Create the new **RISC-V Kernel Debugging** configurations: Right-click on the project name then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/15.png)
Double-click on **RISC-V Kernel Debugging**,
![example image](/images_embedded_linux/debug-kernel/16.png)
Selects the Debugger tab to switch the Platform. In the Platform list, select **Terrasic DE2-115 Board** that youâ€™d like to start kernel debugging. Click Apply then Debug to start the Kernel debugging session on the Terrasic DE2-115 board.
![example image](/images_embedded_linux/debug-kernel/17.png)
On hardware, the bootloader is re-loaded, then the HydraSoC booting is restarted from the beginning.
![example image](/images_embedded_linux/debug-kernel/18.png)
## Debugging the kernel with Intel FPGA Stratix 10 GX platform
### Hardware and connection preparations
Please refer to the &lt;a href="../../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
!!!info "Note"
- The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on the Intel FPGA Stratix 10 GX board.
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
### Programming IP core
To programming RISC-V IP core to the board, click on Flash icon on the toolbar.
![example image](/images_embedded_linux/debug-kernel/19.png)
- In **Vendor**, select: Rocket
- In **Product**, select
- "**rocket64 - Stratix10gx (multicore)**"
- **Custom IP core** if users use their own RISC-V IP core.
Select JTAG cable (if the user has multiple boards connected to the development machine).
Click **Finish** to flash Rocket 64 bits RISC-V core.
To view the console output printed from the RISC-V core, please open Terminal view, and select Local Terminal. Type `jtagconfig -d` to detect the index of the USB-Blaster II cable (Linux OS: User should use the command `source path/to/__PROJECT_SHORTNAME__/bin/environment-setup.sh` first to set the environment of the __PROJECT_SHORTNAME__.
![example image](/images_embedded_linux/debug-kernel/20.png)
Then, type `nios2-terminal -c $index -d 1 -i 0`. In this case, the index is number 2, so the command is `nios2-terminal -c 2 -d 1 -i 0`.
The Terminal view shows BIOS and Linux boot messages.
![example image](/images_embedded_linux/debug-kernel/21.png)
Users can log in to Linux using a "**root**" account **without a password**.
### Update build settings
Currently, **riscv64-ipfd-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain.
- Right-click on the project then select properties.
- In project settings, select
- Architecture: RV64(-march=rv64i*)
- Floating point: None
- Integer ABI: LP64(-mabi=lp64*)
- Floating point ABI: Double precision extension (RVFD)
- Click Apply and Close.
### Debugging the Kernel on Intel FPGA Stratix 10 GX platform
!!!info "Note"
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to [Section 2: Update build settings](#2-update-build-settings)
To debug the kernel on Intel FPGA Stratix 10 GX platform, create the new **RISC-V Kernel Debugging** configurations:
Right-click on the project name then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/22.png)
Double-click on **RISC-V Kernel Debugging**,
![example image](/images_embedded_linux/debug-kernel/23.png)
Selects the Debugger tab to switch the Platform. In the Platform list, select **Intel Stratix 10 GX Board** that youâ€™d like to start kernel debugging. Click Apply then Debug to start the Kernel debugging session on the Intel Stratix 10 GX board.
![example image](/images_embedded_linux/debug-kernel/24.png)
!!!warning "Note"
For **debugging the Kernel with multicores**, the users should select *2. Intel FPGA USB-Blaster II (virtual-jtag, smp-4-cores)* on **Default Configuration**. Otherwise only 1 core is debugged.
On hardware, the bootloader is re-loaded, then the HydraSoC booting is restarted from the beginning.
![example image](/images_embedded_linux/debug-kernel/25.png)
## Debugging the embedded Linux application while debugging the Kernel
!!!info "Note"
- For detailed information regarding basics of Embedded Linux application, please refer to &lt;a href="../../../examples/embedded-linux/Helloworld">**RISC-V Embedded Linux Project**&lt;/a>
- **Make sure the architecture and floating point options of both the Linux Kernel project and the Embedded Linux project are the same**.
Since the kernel is booted on the QEMU emulator or target boards on previous sections, users only need to debug the application via *Remote Target*. Right-click on the embedded Linux project then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/28.png)
Double-click on **RISC-V Debugging** and select "Helloworld Debug".
![example image](/images_embedded_linux/debug-kernel/29.png)
On the *Debugger* tab, please select:
- Platform: *Remote Target*
- Connection: *Default SSH-QEMU/ Default SSH-Hardware* (base on the target platform on which the Kernel is booted)
- Remote Absolute File Path for C/C++ Application: `/tmp/riscv_application.elf`
- Commands execute before application: `killall gdbserver`
![example image](/images_embedded_linux/debug-kernel/30.png)
Select **Apply** then **Debug**, the IDE will change to the debug perspective and automatically sets a breakpoint in the first line of code in the `main()` function.
![example image](/images_embedded_linux/debug-kernel/31.png)
--></description></item><item><title>Docs: Zephyr Hello World</title><link>/docs/examples/zephyrrtos/zephyrhelloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/zephyrrtos/zephyrhelloworld/</guid><description>
&lt;p>This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called &amp;ldquo;HelloWorld.&amp;rdquo; This application prints &lt;em>Hello world&lt;/em> text and runs a simple for-loop for a simple demonstration. The application can also be built and run on a QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting &amp;ldquo;&lt;strong>File - New - C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Zephyr application&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/1.png" alt="example image">&lt;/p>
&lt;p>Select Toolchains: &lt;strong>RISC-V Custom Toolchains&lt;/strong> and enter the Project name
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/2.png" alt="example image">&lt;/p>
&lt;p>Enter Author then click &lt;strong>Next&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/3.png" alt="example image">&lt;/p>
&lt;p>Select Zephyr Base Path then click &lt;strong>Next&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/4.png" alt="example image">&lt;/p>
&lt;p>Select target board configuration:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/5.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/6.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/7.png" alt="example image">&lt;/p>
&lt;p>Select toolchain path then click &lt;strong>Next&lt;/strong> and &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/10.1.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/10.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU Emulator&lt;/h3>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/11.png" alt="example image">&lt;/p>
&lt;p>The output of the application is shown in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/12.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>The XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/13.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/14.png" alt="example image">&lt;/p>
&lt;p>On tab Debugger, choose option QEMU in Virtual Platforms. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/15.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then clicking &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Debug As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/17.png" alt="example image">&lt;/p>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/18.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>About ZephyrRTOS views, please refer to &lt;a href="../../../views/zephyrtos">&lt;span style="color: blue">Zephyr OS views&lt;/span>&lt;/a> for more information.&lt;/p></description></item><item><title>Docs: Synchronization</title><link>/docs/examples/zephyrrtos/zephyrsynchronization/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/zephyrrtos/zephyrsynchronization/</guid><description>
&lt;p>This chapter covers the basics of the Zephyr RTOS Synchronization sample application including creating, building, running, and debugging steps. A simple application that demonstrates basic sanity of the kernel. Two threads (A and B) take turns printing a greeting message to the console and use sleep requests and semaphores to control the rate at which messages are generated. This application can also be built and run on QEMU emulator.&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &amp;ldquo;&lt;strong>File - New - C/C++ Project&lt;/strong>&amp;rdquo; choose &lt;strong>Zephyr application&lt;/strong> then &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/1.png" alt="example image">&lt;/p>
&lt;p>Select Toolchains: &lt;strong>RISC-V Custom Toolchains&lt;/strong> and enter the Project name.
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/2.png" alt="example image">&lt;/p>
&lt;p>Enter Author then click Next button.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/3.png" alt="example image">&lt;/p>
&lt;p>Then click the Finish button.
Select Zephyr Base Path then click Next:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/4.png" alt="example image">&lt;/p>
&lt;p>Select target board configuration:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/5.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/6.png" alt="example image">&lt;/p>
&lt;p>Select toolchain path then click &lt;strong>Next&lt;/strong> and &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/7.png" alt="example image">&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/11.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/10.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU Emulator&lt;/h3>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/12.png" alt="example image">&lt;/p>
&lt;p>The output of the application is shown in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/13.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>The XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/14.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/15.png" alt="example image">&lt;/p>
&lt;p>On tab Debugger, choose option QEMU in Virtual Platforms. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then clicking &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/17.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Debug As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/18.png" alt="example image">&lt;/p>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSynchronization/18.1.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>About other ZephyrRTOS views (&lt;em>Thread view&lt;/em>, &amp;hellip; ), please refer to &lt;a href="../../../views/zephyrtos">&lt;span style="color: blue">Zephyr OS views&lt;/span>&lt;/a> for more information.&lt;/p></description></item><item><title>Docs: Mutex</title><link>/docs/examples/zephyrrtos/zephyrmutex/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/zephyrrtos/zephyrmutex/</guid><description>
&lt;p>This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called &lt;strong>Mutex&lt;/strong>. This application creates two threads that modify a shared resource while using a mutex lock for synchronization. The application can also be built and run on a QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting &amp;ldquo;&lt;strong>File - New - C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Zephyr application&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/1.png" alt="example image">&lt;/p>
&lt;p>Select Toolchains: &lt;strong>RISC-V Custom Toolchains&lt;/strong> and enter the Project name
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/2.png" alt="example image">&lt;/p>
&lt;p>Enter Author then click &lt;strong>Next&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/3.png" alt="example image">&lt;/p>
&lt;p>Select Zephyr Base Path then click &lt;strong>Next&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/4.png" alt="example image">&lt;/p>
&lt;p>Select target board configuration:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/5.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/6.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/7.png" alt="example image">&lt;/p>
&lt;p>Select toolchain path then click &lt;strong>Next&lt;/strong> and &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrhelloworld/10.1.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/10.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU Emulator&lt;/h3>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/11.png" alt="example image">&lt;/p>
&lt;p>The output of the application is shown in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/12.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>The XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/13.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/14.png" alt="example image">&lt;/p>
&lt;p>On tab Debugger, choose option QEMU in Virtual Platforms. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/15.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then clicking &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Debug As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/17.png" alt="example image">&lt;/p>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/18.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Besides, users can see more about Mutex object:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMutex/19.png" alt="example image">&lt;/p>
&lt;p>About other ZephyrRTOS views (&lt;em>Thread view&lt;/em>, &amp;hellip; ), please refer to &lt;a href="../../../views/zephyrtos">&lt;span style="color: blue">Zephyr OS views&lt;/span>&lt;/a> for more information.&lt;/p></description></item><item><title>Docs: Semaphore</title><link>/docs/examples/zephyrrtos/zephyrsemaphore/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/zephyrrtos/zephyrsemaphore/</guid><description>
&lt;p>This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called &lt;strong>Semaphore&lt;/strong>. This application uses a semaphore to control access to a shared resource and prints a message indicating whether it was successful or not in taking the semaphore. The application can also be built and run on a QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting &amp;ldquo;&lt;strong>File - New - C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Zephyr application&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/1.png" alt="example image">&lt;/p>
&lt;p>Select Toolchains: &lt;strong>RISC-V Custom Toolchains&lt;/strong> and enter the Project name
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/2.png" alt="example image">&lt;/p>
&lt;p>Enter Author then click &lt;strong>Next&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/3.png" alt="example image">&lt;/p>
&lt;p>Select Zephyr Base Path then click &lt;strong>Next&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/4.png" alt="example image">&lt;/p>
&lt;p>Select target board configuration:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/5.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/6.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/7.png" alt="example image">&lt;/p>
&lt;p>Select toolchain path then click &lt;strong>Next&lt;/strong> and &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/10.1.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/10.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU Emulator&lt;/h3>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/11.png" alt="example image">&lt;/p>
&lt;p>The output of the application is shown in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/12.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>The XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/13.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/14.png" alt="example image">&lt;/p>
&lt;p>On tab Debugger, choose option QEMU in Virtual Platforms. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/15.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then clicking &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Debug As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/17.png" alt="example image">&lt;/p>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/18.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Besides, users can see more about Semaphore objects:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrSemaphore/19.png" alt="example image">&lt;/p>
&lt;p>About other ZephyrRTOS views (&lt;em>Thread view&lt;/em>, &amp;hellip; ), please refer to &lt;a href="../../../views/zephyrtos">&lt;span style="color: blue">Zephyr OS views&lt;/span>&lt;/a> for more information.&lt;/p></description></item><item><title>Docs: Message Queue</title><link>/docs/examples/zephyrrtos/zephyrmsgq/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/zephyrrtos/zephyrmsgq/</guid><description>
&lt;p>This chapter covers the basics of the C/C++ ZephyrRTOS RISC-V projects including creating, building, running, and debugging ZephyrRTOS RISC-V applications. The project referred to in this chapter is called &lt;strong>Message Queue&lt;/strong>. This application uses message queues to allow communication between two threads, where one thread sends integers and characters to the queues and another thread receives the messages and prints them. The application can also be built and run on a QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug ZephyrRTOS applications with QEMU emulator, please install the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>The easiest way to use Zephyr RTOS is to start with one of the pre-configured demo application projects by selecting &amp;ldquo;&lt;strong>File - New - C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Zephyr application&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/1.png" alt="example image">&lt;/p>
&lt;p>Select Toolchains: &lt;strong>RISC-V Custom Toolchains&lt;/strong> and enter the Project name
Then click Next.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/2.png" alt="example image">&lt;/p>
&lt;p>Enter Author then click &lt;strong>Next&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/3.png" alt="example image">&lt;/p>
&lt;p>Select Zephyr Base Path then click &lt;strong>Next&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/4.png" alt="example image">&lt;/p>
&lt;p>Select target board configuration:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/5.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/6.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/7.png" alt="example image">&lt;/p>
&lt;p>Select toolchain path then click &lt;strong>Next&lt;/strong> and &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>If there is any problem related to the CMake, such as:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/10.1.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>Please make sure that the version of CMake is 3.20 or higher.&lt;/strong>&lt;/p>
&lt;p>After building successfully, you will see the messages in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrHelloworld/10.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h3 id="run-project-on-qemu-emulator">Run project on QEMU Emulator&lt;/h3>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Run As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/11.png" alt="example image">&lt;/p>
&lt;p>The output of the application is shown in the Console view:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/12.png" alt="example image">&lt;/p>
&lt;h3 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h3>
&lt;p>The XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable eclipse to automatically fill out the necessary debug configuration information.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/13.png" alt="example image">&lt;/p>
&lt;p>In Debug Configuration Dialog, create new one by double click on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/14.png" alt="example image">&lt;/p>
&lt;p>On tab Debugger, choose option QEMU in Virtual Platforms. Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/15.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Select the Helloworld project entry in the Project Explorer then clicking &lt;strong>Debug As/RISC-V application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/16.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Right-click on current project &amp;gt; &lt;strong>Debug As&lt;/strong> &amp;gt; &lt;strong>RISV-C application with QEMU&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/17.png" alt="example image">&lt;/p>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/18.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Besides, users can see more about Mesage Queue objects:&lt;/p>
&lt;p>&lt;img src="/images_zephyr/zephyrMsgq/19.png" alt="example image">&lt;/p>
&lt;p>About other ZephyrRTOS views (&lt;em>Thread view&lt;/em>, &amp;hellip; ), please refer to &lt;a href="../../../views/zephyrtos">&lt;span style="color: blue">Zephyr OS views&lt;/span>&lt;/a> for more information.&lt;/p></description></item><item><title>Docs: Project / Debug views</title><link>/docs/views/project-views/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/views/project-views/</guid><description>
&lt;h2 id="console-view">Console View&lt;/h2>
&lt;p>The Console view displays program output as well as output from the build tools. The Console view is connected to stdin, stdout, and stderr of the compilation process.
An example of Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/9.png" alt="example image">&lt;/p>
&lt;p>The Console view only represents programs that are running on the host, such as compilers and linkers. Programs running on an external target will display their output in other views, such as a terminal emulator window, depending on the type of target.&lt;/p>
&lt;h2 id="register-view">Register View&lt;/h2>
&lt;p>The register view helps developers examine RISC-V registers values during debug sessions. This is an example of Register view:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/10.png" alt="example image">&lt;/p>
&lt;h2 id="problems-view">Problems View&lt;/h2>
&lt;p>If any errors or warnings are encountered during the compilation process will be shown on the Problem View&lt;/p>
&lt;p>&lt;img src="/images_views/11.png" alt="example image">&lt;/p>
&lt;h2 id="executables-view">Executables View&lt;/h2>
&lt;p>The Executable view lists down all executable output built using XploR Studio, for example:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/12.png" alt="example image">&lt;/p>
&lt;h2 id="terminal-view">Terminal View&lt;/h2>
&lt;p>The Terminal View helps users connect to and interact with the console of different targets:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/13.png" alt="example image">&lt;/p>
&lt;p>Users can use this Terminal view to open the shell/bash console of the host machine, remote connection, or serial connection to the target platform. For example, with a serial terminal, users can specify additional parameters such as which device to connect, baud rate, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/14.png" alt="example image">&lt;/p>
&lt;h2 id="peripheral-registers-view">Peripheral Registers View&lt;/h2>
&lt;p>In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals&amp;rsquo; status such as control register values, and data register values via the Peripheral Registers View.
The Peripherals Registers View lists all peripherals available in the device hardware description .SVD file provided by the silicon vendor.
To active Peripheral registers view, select &lt;strong>Window &amp;gt; Preferences&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/15.png" alt="example image">&lt;/p>
&lt;p>Then select &lt;strong>C/C++ &amp;gt; Debug section&lt;/strong>
Click &lt;strong>Peripheral Registers Page&lt;/strong>. On this page:&lt;/p>
&lt;ul>
&lt;li>Architecture: Select RISC-V&lt;/li>
&lt;li>Vendor: Select QEMU&lt;/li>
&lt;li>Platform: Select Spike or E31mc or E31&lt;/li>
&lt;/ul>
&lt;p>The peripheral registers will be listed on the right-hand side of the page:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/16.png" alt="example image">&lt;/p>
&lt;p>Users can select registers or all registers to check, then click &lt;strong>Apply and Close&lt;/strong> button.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/17.png" alt="example image">&lt;/p>
&lt;p>The Peripheral register views will show all registers and their status.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/18.png" alt="example image">&lt;/p>
&lt;h4 id="adding-peripheral-files-to-peripheral-registers-view">Adding Peripheral files to Peripheral Registers View&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Create a new folder within the XPLOR_HOME directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Include the .metadata file in the newly created folder, using the following sample content:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;?eclipse version=&amp;#34;3.4&amp;#34;?&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;extension
point=&amp;#34;xplor.studio.regview.peripheralData&amp;#34;&amp;gt;
&amp;lt;peripheral
architecture=&amp;#34;RISCV&amp;#34;&amp;gt; &amp;lt;!-- architecture name --&amp;gt;
&amp;lt;vendor
name=&amp;#34;FPGA&amp;#34;&amp;gt; &amp;lt;!-- vendor name --&amp;gt;
&amp;lt;chip
id=&amp;#34;neorv32&amp;#34;
path=&amp;#34;/path_to_svd_file/neorv32.xml&amp;#34;&amp;gt; &amp;lt;!-- The file path must exist --&amp;gt;
&amp;lt;/chip&amp;gt;
&amp;lt;/vendor&amp;gt;
&amp;lt;/peripheral&amp;gt;
&amp;lt;/extension&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Proceed to restart the XploR Studio application.
After the restart, navigate to the &lt;strong>Peripheral Registers Page&lt;/strong> to access the newly available Architecture/Vendor/Platform options.&lt;/li>
&lt;/ul>
&lt;h2 id="debugger-console-view">Debugger console View&lt;/h2>
&lt;p>The Debugger Console shows gdb debug information.
The is an example of Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/24.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
If any of view disappears, users can always restore by clicking *&lt;strong>Window &amp;gt; Show View/NAME_OF_VIEW&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_views/basic/25.png" alt="example image">&lt;/p></description></item><item><title>Docs: FreeRTOS views</title><link>/docs/views/freertos/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/views/freertos/</guid><description>
&lt;p>During the FreeRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Task, Queue, Heap, and Timer. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To open FreeRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Others&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>FreeRTOS Object Views&lt;/strong>&lt;/li>
&lt;li>The FreeRTOS object views only contain information when user debugs a FreeRTOS project&lt;/li>
&lt;li>Depending on the FreeRTOS application, not all FreeRTOS objects will display valid information. For example, if the application does not utilize a Timer object, XploR Studio will not display any useful information on FreeRTOS Timer view.&lt;/li>
&lt;li>The display of FreeRTOS views is dependent on the &lt;strong>xplor-studio-freertos&lt;/strong> blueprint. Therefore, if you uninstall this blueprint, please close these views to prevent any errors.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="freertos-task-view">FreeRTOS Task View&lt;/h2>
&lt;p>The FreeRTOS task view helps developers examine tasks during debug sessions. Each object is identified by its ID, name, address, state, task state, stack usage, event object, runtime, and priority.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/20.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-queue-view">FreeRTOS Queue View&lt;/h2>
&lt;p>The FreeRTOS Queue view helps developers examine queues during debug sessions. Each object is identified by its type, ID, name, address, length, size, and state of TX and RX.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/21.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-timer-view">FreeRTOS Timer View&lt;/h2>
&lt;p>The FreeRTOS Timer view helps developers examine timers during debug sessions. Each object is identified by its ID, name, status, callback functions, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/22.png" alt="example image">&lt;/p>
&lt;h2 id="freertos-heap-view">FreeRTOS Heap View&lt;/h2>
&lt;p>The FreeRTOS Heap view helps developers examine heaps during debug sessions. Each object is identified by its ID, address, usage information, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/freertos/23.png" alt="example image">&lt;/p></description></item><item><title>Docs: Zephyr OS views</title><link>/docs/views/zephyrtos/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/views/zephyrtos/</guid><description>
&lt;p>During the ZephyrRTOS debug sessions, developers need to examine the state of the applications. This state can be seen as Thread, Mutex, Semaphore, and MessageQueue. The following sessions describe how XploR Studio helps to check this information.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To open ZephyrRTOS Objects View, select &lt;strong>Windows &amp;gt; Show View &amp;gt; Other&amp;hellip;&lt;/strong>. In &lt;strong>Show View&lt;/strong> wizard, select &lt;strong>ZephyrRTOS Object Views&lt;/strong>&lt;/li>
&lt;li>The ZephyrRTOS object views only contain information when user debugs a ZephyrRTOS project&lt;/li>
&lt;li>Depending on the ZephyrRTOS application, not all ZephyrRTOS objects will display valid information. For example, if the application does not utilize a Mutex object, XploR Studio will not display any useful information on ZephyrRTOS Mutex view.&lt;/li>
&lt;li>The display of ZephyrRTOS views is dependent on the &lt;strong>xplor-studio-zephyr&lt;/strong> blueprint. Therefore, if you uninstall this blueprint, please close these views to prevent any errors.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-thread-view">ZephyrRTOS Thread View&lt;/h2>
&lt;p>The ZephyrRTOS Thread view helps developers examine threads during debug sessions. Each object is identified by its ID, Name, Handle, Priority, Thread State and Thread Usage.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/1.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Hello World project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-mutex-view">ZephyrRTOS Mutex View&lt;/h2>
&lt;p>The ZephyrRTOS Mutex view helps developers examine mutexes during debug sessions. Each object is identified by its ID, Handle, Mutex Owner, Owner Priority and Lock Count.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/2.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Mutex project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-semaphore-view">ZephyrRTOS Semaphore View&lt;/h2>
&lt;p>The ZephyrRTOS Semaphore view helps developers examine semaphores during debug sessions. Each object is identified by its ID, Handle, Semaphore Count and Semaphore Limit.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/3.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Semaphore project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote>
&lt;h2 id="zephyrrtos-message-queue-view">ZephyrRTOS Message Queue View&lt;/h2>
&lt;p>The ZephyrRTOS Message Queue view helps developers examine message queues during debug sessions. Each object is identified by its ID, Handle, Message Size, Max Messages, Read Pointer, Write Pointer, Used Messages and Flags.&lt;/p>
&lt;p>&lt;img src="/images_views/zephyrtos/4.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> This image is sourced from the Zephyr Message Queue project. However, please note that for other projects, the view may vary or unavailable.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs:</title><link>/docs/contributing/join-us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contributing/join-us/</guid><description/></item><item><title>Docs:</title><link>/docs/debug-and-trace/trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/debug-and-trace/trace/</guid><description/></item></channel></rss>