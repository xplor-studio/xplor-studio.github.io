<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio â€“ Baremetal</title><link>/docs/examples/embedded/</link><description>Recent content in Baremetal on XploR Studio</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 Oct 2020 15:21:01 +0200</lastBuildDate><atom:link href="/docs/examples/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GNU C/C++ HelloWorld</title><link>/docs/examples/embedded/riscvhelloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded/riscvhelloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded projects including creating, building, running, and debugging embedded applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded applications with QEMU emulator, please install the &lt;strong>xplor-studio-elf&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/1-1.png" alt="example image">&lt;/p>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V Helloworld&lt;/strong> project and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em> then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/1.png" alt="example image">&lt;/p>
&lt;p>In the next screens, the user can specify project options such as Author, copyright notice, project description, compiler, assembler, linker, and run/debug options. Then click the Next button.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/2.png" alt="example image">&lt;/p>
&lt;p>Then click Next to select Vendor Information. From the list, User can select one platform and one core to run/debug.&lt;/p>
&lt;!--
![example image](/images_embedded/RISCVHelloworld/3.png)
![example image](/images_embedded/RISCVHelloworld/4.png)
-->
&lt;p>&lt;img src="/images_embedded/RISCVHelloworld/5.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## &lt;a id="debug-imperas">&lt;span style="color: black">5. Running and Debugging project with Imperas emulator&lt;/span> &lt;/a>
!!!warning "Note"
Before running the HelloworldDemo with Imperas, please update the build setting to "Architecture: RV64I, IntegerABI: LP64". Because Imperas only supports 64-bit samples currently.
![example image](/images_embedded/RISCVHelloworld/28.png)
### Run project on Imperas emulator
Right-click on current project > **Run As > RISV-C application with Imperas**.
![example image](/images_embedded/RISCVHelloworld/29.png)
The output of the application is shown in the Console view:
![example image](/images_embedded/RISCVHelloworld/30.png)
### Debug project on Imperas Emulator
**There are three ways to start debugging the application:**
1. Select the HelloworldDemo entry in the Project Explorer then open the **Debug Configurations** Dialog. Doing so will enable XploR Studio to automatically fill out the necessary debug configuration information.
![example image](/images_embedded/RISCVHelloworld/31.png)
In the **Debug Configurations** Dialog, create a new one by double clicking on **RISC-V Debugging**:
![example image](/images_embedded/RISCVHelloworld/32.png)
On the tab **Debugger**, choose option **Imperas in Virtual Platforms**. Click **Apply** then click **Debug**.
![example image](/images_embedded/RISCVHelloworld/33.png)
2. Select the **HelloworldDemo** in the **Toolbar**, then click **Debug As RISC-V application with Imperas**.
![example image](/images_embedded/RISCVHelloworld/34.png)
3. Right-click on the current project in the **Project Explorer > Debug As > RISV-C application with Imperas.**
![example image](/images_embedded/RISCVHelloworld/35.png)
After selecting Debug As and RISC-V application with Imperas, the XploR Studio UI changes to debug perspective and automatically sets a breakpoint in the first line of code in main() function.
Refer to [Running and Debugging project with QEMU emulator](../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator) for more information about examining applications and perform functions such as adding new breakpoints, viewing and changing variable values, checking the register values, and so on.
## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item><item><title>Docs: Litex C HelloWorld</title><link>/docs/examples/embedded/riscvhelloworld-de2/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded/riscvhelloworld-de2/</guid><description>
&lt;p>This chapter covers the basics of C embedded projects including creating, building, running, and debugging embedded applications. The project referred to in this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built and run on FPGA.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded applications with FPGA, there are some blueprints that need to be installed first:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>xplor-studio-elf&lt;/strong>: XploR plugin for creating baremetal project&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>xplor-studio-openocd&lt;/strong>: Xplor plugin for debugging with hardware&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>baremetal-neorv32-de2115&lt;/strong>: The baremetal example of NEORV32 core on Terrasic DE2-115 board&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/1.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V Helloworld (NEORV32)&lt;/strong> project and &lt;strong>Toolchains&lt;/strong>: &lt;em>Baremetal XploR Toolchain for RISC-V&lt;/em> then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/3.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/4.png" alt="example image">&lt;/p>
&lt;p>Then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-intel-fpga-de2-115-platform">Running and Debugging project with Intel FPGA DE2-115 platform&lt;/h2>
&lt;h3 id="hardware-and-driver-preparations">Hardware and driver preparations&lt;/h3>
&lt;p>Please refer to the &lt;a href="/docs/hardware-environment/hardware/">&lt;span style="color: blue">Hardware and Environment Setup&lt;/span>&lt;/a> document for more details.&lt;/p>
&lt;h3 id="programming-ip-core">Programming IP core&lt;/h3>
&lt;p>To program a RISC-V IP core to the board, click on Flash icon &lt;img src="/images_embedded/RISCVHelloworldDE2/5.png" alt="example image"> on the toolbar&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/6.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>IP Core&lt;/strong>, select &lt;strong>de2115-neorv32.sof&lt;/strong> or &lt;strong>Custom IP core&lt;/strong> if users use their own RISC-V IP core. In this case, we select &lt;em>&lt;strong>de2-115_neorv32&lt;/strong>&lt;/em> for the neorv32 - DE2-115 project.&lt;/li>
&lt;li>Select JTAG cable (if the user has multiple boards connected to the development machine).&lt;/li>
&lt;li>Click &lt;strong>Finish&lt;/strong> to flash Neorv 32-bit RISC-V core to DE2-115 board.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/7.png" alt="example image">&lt;/p>
&lt;p>To view the console output printed from the RISC-V core, open the Terminal view and select &lt;code>COM&lt;/code> port (on Windows) or &lt;code>/dev/ttyUSBx&lt;/code> port (on Linux) with the following connection settings.&lt;/p>
&lt;p>The output message on the serial terminal will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>
_ _ _ ____ ____
| | | |_ _ __| |_ __ __ _/ ___| ___ / ___|
| |_| | | | |/ _` | &amp;#39;__/ _` \___ \ / _ \| |
| _ | |_| | (_| | | | (_| |___) | (_) | |___
|_| |_|\__, |\__,_|_| \__,_|____/ \___/ \____|
|___/
Maximize your SoC design!
(c) Copyright 2020-2023 SoC.One
(c) Copyright 2012-2023 Enjoy-Digital
(c) Copyright 2007-2015 M-Labs
BIOS CRC passed (42b17cce)
HydraCore git sha1: --------
--=============== SoC ==================--
CPU: NEORV32 @ 50MHz
BUS: WISHBONE 32-bit @ 4GiB
CSR: 32-bit data
ROM: 64.0KiB
SRAM: 64.0KiB
SDRAM: 128.0MiB 32-bit @ 50MT/s (CL-2 CWL-2)
MAIN-RAM: 128.0MiB
--========== Initialization ============--
Ethernet init...
Initializing SDRAM @0x40000000...
Switching SDRAM to software control.
Switching SDRAM to hardware control.
Memtest at 0x40000000 (2.0MiB)...
Write: 0x40000000-0x40200000 2.0MiB
Read: 0x40000000-0x40200000 2.0MiB
Memtest OK
Memspeed at 0x40000000 (Sequential, 2.0MiB)...
Write speed: 14.4MiB/s
Read speed: 11.7MiB/s
--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Booting from boot.bin...
Copying boot.bin to 0x40000000...
Network boot failed.
No boot medium found
--============= Console ================--
litex&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="run-project-on-terrasic-fpga-de2-115-platform">Run project on Terrasic FPGA DE2-115 platform&lt;/h3>
&lt;blockquote>
&lt;p>It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to &lt;a href="#programming-ip-core">previous section&lt;/a> for how to program the bitstream.&lt;/p>
&lt;/blockquote>
&lt;p>To run the application on hardware without debugging, select project in the Project Explorer, click &lt;strong>Run as &amp;gt; Run configurations&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/8.png" alt="example image">&lt;/p>
&lt;p>Then create a new &lt;strong>RISC-V Running&lt;/strong> configuration with the following information.&lt;/p>
&lt;ul>
&lt;li>Platform: &lt;strong>FPGA&lt;/strong> &amp;gt; &lt;strong>Terrasic Board&lt;/strong> &amp;gt; &lt;strong>Neorv32&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/9.png" alt="example image">&lt;/p>
&lt;p>On the Terminal view, the message will be printed.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/10.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.&lt;/p>
&lt;/blockquote>
&lt;h3 id="debug-project-on-terrasic-fpga-de2-115-platform">Debug project on Terrasic FPGA DE2-115 platform&lt;/h3>
&lt;blockquote>
&lt;p>It is recommended to program the bitstream to Intel FPGA board before starting project debugging. Please refer to &lt;a href="#programming-ip-core">previous section&lt;/a> for how to program the bitstream.&lt;/p>
&lt;/blockquote>
&lt;p>To debug the application on hardware, select project in the Project Explorer, click &lt;strong>Debug as &amp;gt; Debug Confihurations&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/11.png" alt="example image">&lt;/p>
&lt;p>Then create a new RISC-V Running configuration with the following information.
On tab &lt;strong>Debugger&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Platform: &lt;strong>FPGA&lt;/strong> &amp;gt; &lt;strong>Terrasic DE2-115 Board&lt;/strong> &amp;gt; &lt;strong>Neorv32&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/12.png" alt="example image">&lt;/p>
&lt;p>After selecting &lt;strong>Apply&lt;/strong> and &lt;strong>Debug&lt;/strong>, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/13.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the common project&amp;rsquo;s.
Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/13.1.png" alt="example image">&lt;/p>
&lt;!-- For the OpenOCD configuration of each IP core on the Intel Stratix 10 GX board, please refer to the below table:
| IP cores | Type of JTAG | Supported JTAG |
|:-----------:|:-------------:|:-----------------------------------------------------------:|
| Neorv32 | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Rocket Chip | Virtual JTAG | N/A |
| Open-V-MCU | Virtual JTAG | N/A |
| Andes | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. |
| Codasip | Physical JTAG | Altera USB Blaster, DP Bus Blaster v3, Olimex JTAG Adapter. | -->
&lt;blockquote>
&lt;p>Both Neorv32 and Rocket Chip on DE2-115 board use Virtual JTAG to run/debug.&lt;/p>
&lt;/blockquote>
&lt;!-- In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals' status such as control register values, and data register values via **Peripheral Registers view**.
To active Peripheral Registers view, select **Window > Preferences**
!![example image](/images_embedded/RISCVHelloworldDE2/14.png)
Then go to the **C/C++ > Debug section**
Click the Peripheral **Peripheral Registers Page**. On this page:
- Architecture: Select RISC-V
- Vendor: Select FPGA
- Platform: Select Neorv32
The peripheral registers will be listed on the right-hand side of the page:
![example image](/images_embedded/RISCVHelloworldDE2/15.png)
Users can select specific registers or all registers via the checkbox, then click **Apply and Close** button
![example image](/images_embedded/RISCVHelloworldDE2/16.png)
The Peripheral Register views will show all registers as well as their information.
To view any register status, double-click on the register name on Peripheral View:
![example image](/images_embedded/RISCVHelloworldDE2/17.png)
To view the program output, switch to the Terminal view.
![example image](/images_embedded/RISCVHelloworldDE2/18.png) -->
&lt;h2 id="debug-project-with-custom-openocd">Debug project with custom openocd&lt;/h2>
&lt;p>Create a new debug configuration on &lt;strong>Debug Configurations&lt;/strong> dialog by double-clicking on &lt;strong>RISC-V Debugging&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/11.png" alt="example image">&lt;/p>
&lt;p>On the tab &lt;strong>Debugger&lt;/strong>, select option &lt;strong>Terrasic DE2-115 Board&lt;/strong> in &lt;strong>FPGA&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/12.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>OpenOCD Options&lt;/strong>, we use the openocd binary of Quartus and the default openocd configuration file.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/21.png" alt="example image">&lt;/p>
&lt;p>Users can browse the custom openocd binary and the custom openocd configuration file.&lt;/p>
&lt;p>&lt;img src="/images_embedded/RISCVHelloworldDE2/22.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Apply&lt;/strong> then click &lt;strong>Debug&lt;/strong> to start debugging with the custom openocd binary.&lt;/p></description></item><item><title>Docs: LLVM C/C++ HelloWorld</title><link>/docs/examples/embedded/llvmhelloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded/llvmhelloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded RISC-V projects including creating, building, running, and debugging embedded RISC-V applications. The project referred to in this chapter is called &amp;ldquo;LLVM Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop as a simple demonstration. The application can also be built with LLVM toolchain and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded applications with QEMU emulator, please install the &lt;strong>xplor-studio-elf&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>To create &lt;em>LLVM Hello World Embedded Project&lt;/em>, select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Project &amp;gt; RISC-V LLVM Sample&lt;/strong> project and &lt;strong>Toolchains&lt;/strong>: &lt;em>LLVM Baremetal Toolchain for RISC-V&lt;/em>.&lt;/p>
&lt;p>&lt;img src="/images_embedded/LLVMHelloworld/1.png" alt="example image">&lt;/p>
&lt;p>As the image above, there is no option as &lt;em>LLVM Baremetal Toolchain for RISC-V&lt;/em> because this XploR Studio does not contain LLVM toolchain.&lt;/p>
&lt;p>To use this toolchain, please install &lt;strong>xplor-clang&lt;/strong> blueprint (refer to &lt;a href="../../../blueprints/guideline">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information).&lt;/p>
&lt;p>After installation and restart the IDE, you can see the creating-project widget like:&lt;/p>
&lt;p>&lt;img src="/images_embedded/LLVMHelloworld/1-1.png" alt="example image">&lt;/p>
&lt;p>Please refer to &lt;a href="../../../getting-started/quick-start/freertos#create-a-new-project">&lt;span style="color: blue">Create a new project&lt;/span>&lt;/a> for more information on other steps.&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;p>The running and debugging step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Imperas emulator
The running and debugging with Imperas emulator is the same as the **RISC-V Hello World Embedded Application**. Please refer to [Running and Debugging project with Imperas emulator](../../../examples/embedded/RISCVHelloworld#debug-imperas)
## Running and Debugging project with Intel FPGA DE2-115 platform
The running and debugging with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information.
## Running and Debugging project with Intel FPGA Stratix 10 GX platform
The running and debugging with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information. --></description></item></channel></rss>