<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio â€“ Embedded Linux</title><link>/docs/examples/embedded-linux/</link><description>Recent content in Embedded Linux on XploR Studio</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 Oct 2020 15:21:01 +0200</lastBuildDate><atom:link href="/docs/examples/embedded-linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hello World</title><link>/docs/examples/embedded-linux/helloworld/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded-linux/helloworld/</guid><description>
&lt;p>This chapter covers the basics of C/C++ embedded Linux projects, including create/build/run/debug embedded Linux applications. The project referred to by this chapter is called &amp;ldquo;Hello World.&amp;rdquo; This application prints &amp;ldquo;Hello World&amp;rdquo; text and runs a simple for-loop for simple demonstration. The application can also be built and run on QEMU emulator.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
To build, run and debug Embedded Linux applications with QEMU emulator, please install the &lt;strong>xplor-studio-linux&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &lt;strong>File &amp;gt; New &amp;gt; C Project&lt;/strong> choose &lt;strong>RISC-V Embedded Linux Project &amp;gt; Helloworld&lt;/strong> project and select &lt;strong>Embedded Linux XploR Toolchain for RISC-V&lt;/strong> in the Toolchains box&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1.png" alt="example image">&lt;/p>
&lt;p>As the image above, there is no option as &lt;em>Embedded Linux XploR Toolchain for RISC-V&lt;/em> because this XploR Studio does not contain Embedded Linux toolchain.&lt;/p>
&lt;p>To use this toolchain, please install &lt;em>Embedded Linux toolchain&lt;/em> blueprint first.
There are 4 different blueprints:&lt;/p>
&lt;ul>
&lt;li>RISC-V Embedded Linux toolchain 32-bit: &lt;strong>riscv32-xplor-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 32-bit (Double): &lt;strong>riscv32-xplord-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 64-bit: &lt;strong>riscv64-xplor-linux&lt;/strong>&lt;/li>
&lt;li>RISC-V Embedded Linux toolchain 64-bit (Double): &lt;strong>riscv64-xplord-linux&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-3.png" alt="example image">&lt;/p>
&lt;p>Each blueprint can be downloaded separately depending on the purpose.&lt;/p>
&lt;p>Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>After installation and restarting the IDE, you can see the creating-project widget like:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-1.png" alt="example image">&lt;/p>
&lt;p>On Ubuntu, LLVM Embedded Linux toolchain is packaged inside the Embedded Linux toolchain that supports &lt;em>Double&lt;/em> extension (&lt;strong>riscv32-xplord-linux&lt;/strong> and &lt;strong>riscv64-xplord-linux&lt;/strong>). LLVM Embedded Linux toolchain has not been supported on Windows yet.&lt;/p>
&lt;p>For using LLVM Embedded Linux toolchain, please make sure that the RISC-V Embedded Linux toolchain (Double) are installed and select LLVM Embedded Linux Toolchain for RISC-V in the Toolchains box:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/2.png" alt="example image">&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>The build setting is the same as the quick-start project&amp;rsquo;s settings. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#update-build-settings">&lt;span style="color: blue">Update build settings&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>Please make sure that the toolchain used to build is installed, otherwise errors as in the following image will appear:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-2.png" alt="example image">&lt;/p>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;p>The build step is the same as the quick-start project&amp;rsquo;s step. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#build-project">&lt;span style="color: blue">Build project&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>To run and debug Embedded Linux applications with QEMU emulator, please install the &lt;strong>rootfs&lt;/strong> blueprint and &lt;strong>qemu&lt;/strong> blueprint (if QEMU is not installed). Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/1-4.png" alt="example image">&lt;/p>
&lt;h2 id="running-and-debugging-project-with-qemu-emulator">Running and Debugging project with QEMU emulator&lt;/h2>
&lt;h4 id="run-project-on-qemu-emulator">Run project on QEMU emulator&lt;/h4>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the project entry in the Project Explorer then open the Run Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary run configuration information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-1.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Run Configuration Dialog&lt;/strong>, create new run configuration by double clicking on RISC-V Runging:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-2.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Main&lt;/strong> tab, choose option &lt;strong>QEMU&lt;/strong> in &lt;strong>Virtual Platforms&lt;/strong>. Click Apply then Click Debug.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-3.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the desired project in the Project Explorer window, then click Run As/RISC-V application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-4.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Run As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Run As RISC-V application with QEMU, Console view will print as below image:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/6-5.png" alt="example image">&lt;/p>
&lt;h4 id="debug-project-on-qemu-emulator">Debug project on QEMU Emulator&lt;/h4>
&lt;p>XploR Studio offers several ways to debug applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Select the project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/7.png" alt="example image">&lt;/p>
&lt;p>On the &lt;strong>Debug Configuration Dialog&lt;/strong>, create new configuration by double clicking on RISC-V Debugging:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/8.png" alt="example image">&lt;/p>
&lt;p>On tab &lt;strong>Debugger&lt;/strong>, choose option &lt;strong>QEMU&lt;/strong> in Virtual Platforms. Click Apply then Click Debug.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/9.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the desired project in the Project Explorer window, then click Debug As/RISC-V application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/10.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Right-click on current project &amp;gt; Debug As &amp;gt; RISV-C application with QEMU&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/11.png" alt="example image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>After selecting Debug As RISC-V application with QEMU, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/12.png" alt="example image">&lt;/p>
&lt;p>Other functions of debugging (such as &lt;em>Resume&lt;/em>, &lt;em>Step Into&lt;/em>, &lt;em>Step Over&lt;/em>, &lt;em>Step Return&lt;/em>, &lt;em>Terminate&lt;/em>, &amp;hellip;) are the same as the quick-start project&amp;rsquo;s. Please refer to &lt;a href="../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator">&lt;span style="color: blue">Running and Debugging project with QEMU emulator&lt;/span>&lt;/a> for more information.&lt;/p>
&lt;!-- ## Running and Debugging project with Imperas emulator
### Run project on Imperas emulator
**Right-click on current project > Run As > RISV-C application with Imperas**
![example image](/images_embedded_linux/linux/7.png)
### Debug project on Imperas Emulator
XploR Studio offers several ways to debug applications:
- Select the project entry in the Project Explorer then open the Debug Configuration Dialog. Doing so will enable Eclipse to automatically fill out the necessary debug configuration information.
![example image](/images_embedded_linux/linux/23.png)
On the **Debug Configuration Dialog**, create a new configuration by double clicking on RISC-V Debugging:
![example image](/images_embedded_linux/linux/24.png)
![example image](/images_embedded_linux/linux/25.png)
On the tab **Debugger**, choose option **Imperas** in **Virtual Platforms**. Click **Apply** then Click **Debug**.
![example image](/images_embedded_linux/linux/26.png)
Select the desired project in the Project Explorer window, then click **Debug As > RISC-V application with Imperas.**
![example image](/images_embedded_linux/linux/27.png)
**Right-click on the current project > Debug As > RISV-C application with Imperas**
![example image](/images_embedded_linux/linux/28.png)
After selecting **Debug As > RISC-V application with Imperas**, the IDE changes to the debug perspective and automatically sets a breakpoint in the first line of code in the main() function.
![example image](/images_embedded_linux/linux/29.png)
Other functions of debugging (such as *Resume*, *Step Into*, *Step Over*, *Step Return*, *Terminate*, ...) are the same as the quick-start project's. Please refer to [Running and Debugging project with QEMU emulator](../../../getting-started/quick-start/freertos#running-and-debugging-project-with-qemu-emulator) for more information. -->
&lt;h2 id="running-and-debugging-project-with-intel-fpga-de2-115-platform-on-ubuntu">Running and Debugging project with Intel FPGA DE2-115 platform on Ubuntu&lt;/h2>
&lt;!-- The programming IP core step with Intel FPGA DE2-115 platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../getting-started/quick-start/freertos#blinky-debug-de2) for more information. -->
&lt;h3 id="hardware-and-driver-preparations">Hardware and driver preparations&lt;/h3>
&lt;p>Please refer to the &lt;a href="/docs/hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.&lt;/p>
&lt;h3 id="programming-ip-core">Programming IP core&lt;/h3>
&lt;p>To program a RISC-V IP core to the board, click on Flash icon &lt;img src="/images_embedded/RISCVHelloworldDE2/5.png" alt="example image"> on the toolbar&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/13.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>IP Core&lt;/strong>, select &lt;strong>de2115-Vexriscv32.sof&lt;/strong> or &lt;strong>Custom IP core&lt;/strong> if users use their own RISC-V IP core. In this case, we select &lt;em>&lt;strong>de2-115_vexrisc32&lt;/strong>&lt;/em> for the vexriscv - DE2-115 project.&lt;/li>
&lt;li>Select JTAG cable (if the user has multiple boards connected to the development machine).&lt;/li>
&lt;li>Click &lt;strong>Finish&lt;/strong> to flash Vexriscv 32-bit RISC-V core to DE2-115 board.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/linux/14.png" alt="example image">&lt;/p>
&lt;p>To view the console output printed from the RISC-V core, open the Terminal view and select &lt;code>COM&lt;/code> port (on Windows) or &lt;code>/dev/ttyUSBx&lt;/code> port (on Linux) with the following connection settings.&lt;/p>
&lt;p>The output message on the serial terminal will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>
_ _ _ ____ ____
| | | |_ _ __| |_ __ __ _/ ___| ___ / ___|
| |_| | | | |/ _` | &amp;#39;__/ _` \___ \ / _ \| |
| _ | |_| | (_| | | | (_| |___) | (_) | |___
|_| |_|\__, |\__,_|_| \__,_|____/ \___/ \____|
|___/
Maximize your SoC design!
(c) Copyright 2020-2023 SoC.One
(c) Copyright 2012-2023 Enjoy-Digital
(c) Copyright 2007-2015 M-Labs
BIOS CRC passed (42b17cce)
HydraCore git sha1: --------
--=============== SoC ==================--
CPU: NEORV32 @ 50MHz
BUS: WISHBONE 32-bit @ 4GiB
CSR: 32-bit data
ROM: 64.0KiB
SRAM: 64.0KiB
SDRAM: 128.0MiB 32-bit @ 50MT/s (CL-2 CWL-2)
MAIN-RAM: 128.0MiB
--========== Initialization ============--
Ethernet init...
Initializing SDRAM @0x40000000...
Switching SDRAM to software control.
Switching SDRAM to hardware control.
Memtest at 0x40000000 (2.0MiB)...
Write: 0x40000000-0x40200000 2.0MiB
Read: 0x40000000-0x40200000 2.0MiB
Memtest OK
Memspeed at 0x40000000 (Sequential, 2.0MiB)...
Write speed: 14.4MiB/s
Read speed: 11.7MiB/s
--============== Boot ==================--
Booting from serial...
Press Q or ESC to abort boot completely.
sL5DdSMmkekro
Timeout
Booting from network...
Local IP: 192.168.1.50
Remote IP: 192.168.1.100
Booting from boot.json...
Booting from boot.bin...
Copying boot.bin to 0x40000000...
Network boot failed.
No boot medium found
--============= Console ================--
litex&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on the DE2-115 board.&lt;/li>
&lt;li>There are two built-in SoC SOFs on XploR Studio to flash DE2-115 for embedded Linux applications:&lt;/li>
&lt;li>One for MII network mode where speed is 10 Mbps&lt;/li>
&lt;li>One for RGMII network mode where speed is 1000Mps&lt;/li>
&lt;li>Development PC IP address: 192.168.1.100&lt;/li>
&lt;li>The TFTP server is running the development PC and serving Linux image&lt;/li>
&lt;/ul>
&lt;h3 id="booting-linux-to-de2-115-board">Booting Linux to DE2-115 board&lt;/h3>
&lt;p>In serial terminal, if you see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> Booting from network...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Local IP: 192.168.1.50
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Remote IP: 192.168.1.100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.json...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.bin...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Copying boot.bin to 0x40000000...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Network boot failed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> No boot medium found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That means the Linux kernel cannot be booted correctly.&lt;/p>
&lt;p>So, please do the follow steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Install &lt;strong>linux-vexriscv-de2115&lt;/strong> blueprint&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start/Restart TFTP server (Linux)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> docker rm -f tftpboot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$HOME&lt;/span>/.xplor/blueprints/linux-vexriscv-de2115/tftpboot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docker run -itd --name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>tftpboot --net&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>host --restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>always -v &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">PWD&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>:/var/tftpboot pghalliday/tftp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Configure IP address for DE2-115 board
&lt;strong>RGMII mode:&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_hardware/24.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Network interface on the host PC connects to &lt;strong>ETHERNET0&lt;/strong> of DE2-115. &lt;strong>The connection could be directly or via router/switches&lt;/strong>.&lt;/li>
&lt;li>On the board, set Jumper JP1 to pins 1 and 2. Itâ€™s default mode (RGMII mode).&lt;/li>
&lt;li>Default IP addresses:
&lt;ul>
&lt;li>DE2-115 board: 192.168.1.50&lt;/li>
&lt;li>TFTP server: 192.168.1.100&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. If users want to use a different subnet, please update the IP of the board.
To update the IP of the board, after flashing FPGA bitstream, open the &lt;code>/dev/ttyUSB*&lt;/code> or &lt;code>COM*&lt;/code> port console to the board and set the IP as:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Command&lt;/th>
&lt;th style="text-align:left">Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">eth_local_ip&lt;/td>
&lt;td style="text-align:left">Set the IP address of the board&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">eth_remote_ip&lt;/td>
&lt;td style="text-align:left">Set the expected IP of the TFTP Server to download kernel/rootfs for network booting&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">netboot&lt;/td>
&lt;td style="text-align:left">Start booting Linux from the network&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="/images_hardware/25.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>MII mode&lt;/strong>:&lt;/p>
&lt;p>&lt;img src="/images_hardware/26.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Network interface on the host PC connects to &lt;strong>port 0&lt;/strong> of DE2-115.&lt;/li>
&lt;li>Connection speed is 10 Mpbs.&lt;/li>
&lt;li>On the board, set Jumper JP1 to pins 2 and 3 (to config Ethernet port 0 to run on MII mode).&lt;/li>
&lt;li>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. The network speed and IP can be set with the following command:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code># Assume that the network interface is enxf8e43b5dd64a
NIC=enxf8e43b5dd64a
sudo ethtool -s $NIC speed 10 duplex full autoneg off
# Double check
ethtool $NIC
# IP needs to be fixed as 192.168.1.100
# Make sure that IPv4 method is manual
sudo ifconfig $NIC 192.168.1.100
&lt;/code>&lt;/pre>&lt;p>&lt;img src="/images_hardware/27.png" alt="example image">&lt;/p>
&lt;p>On the PC, the IP address is set to &lt;strong>192.168.1.100&lt;/strong>. If users want to use a different subnet, please update the IP of the board.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Netboot/Reboot Linux
In some case, you cannot type anything to serial terminal, please use &lt;code>litex_term&lt;/code> to connect the serial port.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$HOME&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git clone https://github.com/enjoy-digital/litex.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python3 -m pip install pyserial
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python3 -m pip install litex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo chmod -R &lt;span style="color:#0000cf;font-weight:bold">777&lt;/span> /dev/ttyUSB0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> litex/litex/tools/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ./litex_term.py /dev/ttyUSB0 --speed &lt;span style="color:#0000cf;font-weight:bold">115200&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, you can see:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> --&lt;span style="color:#ce5c00;font-weight:bold">==============&lt;/span> &lt;span style="color:#000">Boot&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==================&lt;/span>--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from serial...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Press Q or ESC to abort boot completely.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sL5DdSMmkekro
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Timeout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from network...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Local IP: 192.168.1.50
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Remote IP: 192.168.1.100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.json...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Booting from boot.bin...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Copying boot.bin to 0x40000000...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Network boot failed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> No boot medium found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&lt;span style="color:#ce5c00;font-weight:bold">=============&lt;/span> &lt;span style="color:#000">Console&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">================&lt;/span>--
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> litex&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then setup IP address (if needed) and run &lt;code>netboot&lt;/code>. If output as follows, that means Linux be booted properly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> Starting Dropbear SSH server: Waiting &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kernel randomness to be initialised...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> 14.144009&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> random: crng init &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Generating &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> bit rsa key, this may take a &lt;span style="color:#204a87;font-weight:bold">while&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Public key portion is:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCMeX37iv5Hw5MadvVwd+UIVeSIx1QecoV8OiPOt65obbokDxvaol0PsfCHBi0h23zxhhzUHizKDAu9fJ7gQVLWfHjcGKA4x4XuY8O3TasjnzpAntjXgWcBOpw3zpM46skOl65zfJqq6AIH14IzCqs+VDUE2dKjv+4mRbiX3A5Ovw&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> root@de2-115-vexriscv32
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Fingerprint: sha1!! 5a:9f:05:35:11:2c:e2:e1:b8:71:a4:8e:f5:a3:8a:1d:76:b6:f2:ff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropbear.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Rvdn 1.0 de2-115-vexriscv32 /dev/console
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> de2-115-vexriscv32 login:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Login and setup connection to debug&lt;/p>
&lt;ul>
&lt;li>Login by typing &lt;code>root&lt;/code> without password&lt;/li>
&lt;li>Run &lt;code>ifconfig eth0 192.168.1.50 netmask 255.255.255.0&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> Rvdn 1.0 de2-115-vexriscv32 /dev/console
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> de2-115-vexriscv32 login: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> login&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>58&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>: root login on &lt;span style="color:#4e9a06">&amp;#39;console&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root@de2-115-vexriscv32:~# ifconfig eth0 192.168.1.50 netmask 255.255.255.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="debug-application">Debug application&lt;/h3>
&lt;p>Currently, &lt;strong>riscv32-xplor-linux&lt;/strong> is the only toolchain supported. Please change the project settings to use the correct toolchain&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Right click on the project then select properties.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In project settings, select&lt;/p>
&lt;ul>
&lt;li>Architecture: RV32 (-march=rv32i*)&lt;/li>
&lt;li>Floating point: None&lt;/li>
&lt;li>Integer ABI: ILP32 (-mabi=ilp32*)&lt;/li>
&lt;li>Floating point ABI: None&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/linux/43.png" alt="example image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Apply and Close&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>There are some differences when debugging Linux applications, it is necessary to update some config as follows:&lt;/p>
&lt;p>On the Debugger tab, select Intel FPGA Board.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/46.png" alt="example image">&lt;/p>
&lt;p>On the Configuration, select &amp;ldquo;&lt;strong>Advanced Configuration&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/47.png" alt="example image">&lt;/p>
&lt;p>Click the &lt;strong>New&lt;/strong> button to create a new connection configuration, then select &lt;strong>SSH&lt;/strong> as connection type:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/48.png" alt="example image">&lt;/p>
&lt;p>On the &amp;ldquo;New Connection&amp;rdquo; dialog.&lt;/p>
&lt;ul>
&lt;li>Connection name: The name of connection&lt;/li>
&lt;li>Host: 192.168.1.50. This is the default IP address of Linux run on board. If you use a different subnet when booting Linux, please update this IP too.&lt;/li>
&lt;li>User: root&lt;/li>
&lt;li>Use password-based authentication: No password&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/linux/49.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Finish&lt;/strong> to create the connection configuration.&lt;/p>
&lt;p>In the Connections dropdown, select the newly created connection name and set the destination file path to copy the application to the board.&lt;/p>
&lt;p>On the Remote Absolute File Path for C/C++ Application, enter the path of the elf file that is copied to Linux (ex: /tmp/riscv.elf).&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/50.png" alt="example image">&lt;/p>
&lt;p>Click &lt;strong>Debug&lt;/strong> to start debugging.&lt;/p>
&lt;!--
> When starting the first debug session, it will take time for the PC and board to exchange ssh keys.
> If you see this error messagge, please update your project setting to use *riscv64-xplor-linux* as noted above.
![example image](/images_embedded_linux/linux/51.png) -->
&lt;!-- ## &lt;a id="debug-linux-stratix">&lt;span style="color: black">7 Running and Debugging a project with Intel FPGA Stratix 10 GX platform&lt;/span> &lt;/a>
The programming IP core step with Intel FPGA Stratix 10 GX platform is the same as the quick-start project. Please refer to [Running and Debugging project with Intel FPGA Stratix 10 GX platform](../../../getting-started/quick-start/freertos#blinky-debug-stratix) for more information.
!!!info "Note"
- The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on Intel FPGA Stratix 10 GX board.
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
Currently, **riscv64-xplord-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain:
- Right-click on the project then select properties.
- In project settings, select
+ Architecture: RV64(-march=rv64i*)
+ Floating point: None
+ Integer ABI: LP64(-mabi=lp64*)
+ Floating point ABI: Double precision extension (RVFD)
+ Click Apply and Close
The following steps as same as the previous sections. Please refer to [Running and Debugging project with Intel FPGA DE2-115 platform](../../../examples/embedded-linux/Helloworld#debug-linux-de2) for more information. -->
&lt;h2 id="running-and-debugging-project-with-intel-fpga-de2-115-platform-on-windows-10">Running and Debugging project with Intel FPGA DE2-115 platform on Windows 10&lt;/h2>
&lt;h3 id="hardware-and-driver-preparations-1">Hardware and driver preparations&lt;/h3>
&lt;p>Please refer to the &lt;a href="/docs/hardware-environment/#driver-installation">Hardware and Environment Setup&lt;/a> document for more details.&lt;/p>
&lt;h3 id="setup-solartftp-server-on-windows-10">Setup SolarTFTP server on Windows 10&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Prerequisites&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Administrator permission&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SolarWinds TFTP Server&lt;/strong>: To set up a TFTP server, users will have to download the TFTP Server utility such as SolarWinds can be downloaded from &lt;a href="https://www.solarwinds.com/free-tools/free-tftp-server">https://www.solarwinds.com/free-tools/free-tftp-server&lt;/a>. Once the .zip file is downloaded, extract it and go through the straightforward installation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Firewall setup&lt;/strong>: To allow remote access to the TFTP server, users need to open the firewall for TFTP service.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>Start the TFTP Server&lt;/strong>&lt;/p>
&lt;p>Run the &lt;strong>SolarWinds TFTP Server&lt;/strong> utility by going to the &lt;strong>Start Menu&lt;/strong> and searching for &lt;strong>TFTP Server&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_hardware/28.png" alt="example image">&lt;/p>
&lt;p>Once it loads up, copy all the file in &lt;strong>linux-vexriscv-de2115/tftpboot&lt;/strong> folder to &lt;strong>C:\TFTP-Root&lt;/strong> folder.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/59.1.png" alt="example image">&lt;/p>
&lt;h3 id="programming-ip-core-1">Programming IP Core&lt;/h3>
&lt;p>Similar to Linux&lt;/p>
&lt;h3 id="update-ip-of-tftp-server">Update IP of TFTP server&lt;/h3>
&lt;p>Go to *&lt;strong>Network and Internet settings&lt;/strong> by click on &lt;img src="/images_embedded_linux/linux/60.png" alt="example image">:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/61.png" alt="example image">&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/62.png" alt="example image">&lt;/p>
&lt;p>As image, there are 2 networks:
- The &lt;code>Ethernet 3&lt;/code> for connecting to Internet
- The &lt;code>Ethernet&lt;/code> for connecting to DE2-115 Board&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/63.png" alt="example image">&lt;/p>
&lt;p>Click on &lt;strong>Properties&lt;/strong> on &lt;code>Ethernet&lt;/code>:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/64.png" alt="example image">&lt;/p>
&lt;p>Now we need to setup IP manually bt click on &lt;strong>Edit&lt;/strong> button, choose &lt;strong>Manual&lt;/strong> , type as image and &lt;strong>Save&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/65.png" alt="example image">&lt;/p>
&lt;p>After that, restart the SolarTFTP server and programming IP Core again.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/linux/66.png" alt="example image">&lt;/p>
&lt;p>If Serial Terminal stills show &lt;em>Network boot failed&lt;/em>, please try to turn off your Windows Firewall and reprogram IP core.&lt;/p>
&lt;h3 id="debug-application-1">Debug application&lt;/h3>
&lt;p>Create debug configurations and debug are same to Linux.&lt;/p></description></item><item><title>Docs: Kernel debug</title><link>/docs/examples/embedded-linux/debug-kernel/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/examples/embedded-linux/debug-kernel/</guid><description>
&lt;p>This chapter covers the basics of Linux Kernel projects including creating and debugging a &lt;strong>static Kernel&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To build, run and debug Kernel Debugging applications with QEMU emulator, please install the &lt;strong>xplor-studio-kernel&lt;/strong> blueprint first. Please refer to &lt;a href="../../../blueprints/guideline/">&lt;span style="color: blue">Guidelines&lt;/span>&lt;/a> for more information.&lt;/li>
&lt;li>In this release, &lt;strong>Debugging Kernel&lt;/strong> feature is only available on Ubuntu.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="create-a-new-project">Create a new project&lt;/h2>
&lt;p>Select &amp;ldquo;&lt;strong>File &amp;gt; New &amp;gt; C/C++ Project&lt;/strong>&amp;rdquo;, choose &lt;strong>Linux Kernel Project&lt;/strong> and &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/1.png" alt="example image">&lt;/p>
&lt;p>Enter the &lt;em>Project name&lt;/em> and select &lt;strong>Embedded Linux XploR Toolchain for RISC-V&lt;/strong> in the Toolchains box, then click &lt;strong>Next&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/2.png" alt="example image">&lt;/p>
&lt;p>Select &lt;em>Kernel Source Path&lt;/em> then click &lt;strong>Finish&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/3.png" alt="example image">&lt;/p>
&lt;h2 id="update-build-settings">Update build settings&lt;/h2>
&lt;p>With build settings, users can switch from 32 bits to 64 bits as well as different floating point ABI options (except Single Precision). The kernels are specified via those options.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/4.png" alt="example image">&lt;/p>
&lt;p>Please refer to the below table to select the correct options for each target.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Platform&lt;/th>
&lt;th style="text-align:center">Core&lt;/th>
&lt;th style="text-align:center">Architecture&lt;/th>
&lt;th style="text-align:center">Floating Point&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV32&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">QEMU&lt;/td>
&lt;td style="text-align:center">RISC-V emulator&lt;/td>
&lt;td style="text-align:center">RV64&lt;/td>
&lt;td style="text-align:center">RVFD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="build-project">Build project&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Warning:&lt;/strong>
&lt;strong>The Static Kernel project does not need to be built because the XploR Studio uses a pre-build kernel image for debugging.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/5.png" alt="example image">&lt;/p>
&lt;h2 id="debugging-the-kernel-with-qemu-emulator">Debugging the kernel with QEMU emulator&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to &lt;a href="#update-build-settings">Section 2: Update build settings&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>There are two ways to debug the kernel:&lt;/p>
&lt;ul>
&lt;li>On the Project explorer, right-click on the project name and select &lt;strong>Debug as &amp;gt; RISC-V Kernel application with QEMU.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/6.png" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Create the new &lt;strong>RISC-V Kernel Debugging&lt;/strong> configurations: Right-click on the project name then select &lt;strong>Debug As &amp;gt; Debug Configurations.&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/7.png" alt="example image">&lt;/p>
&lt;p>Double-click on &lt;strong>RISC-V Kernel Debugging&lt;/strong>, then click &lt;strong>Debug&lt;/strong> to start the Kernel debugging session.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/8.png" alt="example image">&lt;/p>
&lt;p>When starting kernel debugging, the kernel is suspended in the start_kernel function and the terminal/console pauses at kernel booting.&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/9.png" alt="example image">&lt;/p>
&lt;p>&lt;strong>To debug an &lt;a href="../../../examples/embedded-linux/helloworld">&lt;span style="color: blue">embedded Linux applications&lt;/span>&lt;/a>, the kernel should be booted completely.&lt;/strong>&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note:&lt;/h4>
&lt;p>To switch arch between 32-bit and 64-bit, users should remove the old Debug Kernel Configuration and create a new one to change the kernel (vmlinux).&lt;/p>
&lt;p>Or users can replace vmlinux manually at: &lt;code>~/.xplor/blueprints/rootfs-debug/rv***_debugkernel/vmlinux&lt;/code>&lt;/p>
&lt;p>Sometimes unable to debug Kernel for the first time with information such as follows:&lt;/p>
&lt;p>&lt;img src="/images_embedded_linux/debug-kernel/9-1.png" alt="example image">&lt;/p>
&lt;/div>
&lt;!-- ## Debugging the kernel with Intel FPGA DE2-115 platform
### Hardware and connection preparations
Please refer to the &lt;a href="../../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
!!!info "Note"
- The Ethernet connection is needed only for debugging **Embedded Linux RISC-V applications** on the DE2-115 board.
- There are two built-in SoC SOFs on XploR Studio to flash DE2-115 for embedded Linux applications:
+ One for MII network mode where speed is 10 Mbps
+ One for RGMII network mode where speed is 1000Mps
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
### Programming IP core
To programming RISC-V IP core to the board, click on Flash icon on the toolbar.
![example image](/images_embedded_linux/debug-kernel/10.png)
- In **Vendor**, select: Rocket
- In **Product**, select
- "**rocket64 - DE2-115 (mii)**" for MMI network mode
- "**rocket64 - DE2-115 (rgmii)**" for RGMII network mode
- **Custom IP core** if users use their own RISC-V IP core.
Select the JTAG cable (if the user has multiple boards connected to the development machine).
Click **Finish** to flash Rocket 64 bits RISC-V core.
To view the console output printed from the RISC-V core, please open Terminal view, and select COM port (on Windows) or ttyUSB port (on Linux) with the following connection settings:
![example image](/images_embedded_linux/debug-kernel/11.png)
The Terminal view shows BIOS and Linux boot messages.
![example image](/images_embedded_linux/debug-kernel/12.png)
![example image](/images_embedded_linux/debug-kernel/13.png)
Users can log in to Linux using a "**root**" account **without a password**.
### Update build settings
Currently, **riscv64-ipf-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain.
- Right-click on the project then select properties.
- In project settings, select
- Architecture: RV64(-march=rv64i*)
- Floating point: None
- Integer ABI: LP64(-mabi=lp64*)
- Floating point ABI: None
- Click Apply and Close
### Debugging the Kernel on Intel FPGA DE2-115 platform
!!!info "Note"
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to [Section 2: Update build settings](#2-update-build-settings)
There are two ways to debug the kernel:
- On the Project explorer, right-click on the project name and select **Debug as > RISC-V Kernel application with Hardware** (default is DE2-115)
![example image](/images_embedded_linux/debug-kernel/14.png)
- Create the new **RISC-V Kernel Debugging** configurations: Right-click on the project name then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/15.png)
Double-click on **RISC-V Kernel Debugging**,
![example image](/images_embedded_linux/debug-kernel/16.png)
Selects the Debugger tab to switch the Platform. In the Platform list, select **Terrasic DE2-115 Board** that youâ€™d like to start kernel debugging. Click Apply then Debug to start the Kernel debugging session on the Terrasic DE2-115 board.
![example image](/images_embedded_linux/debug-kernel/17.png)
On hardware, the bootloader is re-loaded, then the HydraSoC booting is restarted from the beginning.
![example image](/images_embedded_linux/debug-kernel/18.png)
## Debugging the kernel with Intel FPGA Stratix 10 GX platform
### Hardware and connection preparations
Please refer to the &lt;a href="../../../hardware-environment/">Hardware and Environment Setup&lt;/a> document for more details.
!!!info "Note"
- The Ethernet connection is needed only for debugging embedded Linux RISC-V applications on the Intel FPGA Stratix 10 GX board.
- Development PC IP address: 192.168.1.100
- The TFTP server is running the development PC and serving boot.bin Linux image
### Programming IP core
To programming RISC-V IP core to the board, click on Flash icon on the toolbar.
![example image](/images_embedded_linux/debug-kernel/19.png)
- In **Vendor**, select: Rocket
- In **Product**, select
- "**rocket64 - Stratix10gx (multicore)**"
- **Custom IP core** if users use their own RISC-V IP core.
Select JTAG cable (if the user has multiple boards connected to the development machine).
Click **Finish** to flash Rocket 64 bits RISC-V core.
To view the console output printed from the RISC-V core, please open Terminal view, and select Local Terminal. Type `jtagconfig -d` to detect the index of the USB-Blaster II cable (Linux OS: User should use the command `source path/to/__PROJECT_SHORTNAME__/bin/environment-setup.sh` first to set the environment of the __PROJECT_SHORTNAME__.
![example image](/images_embedded_linux/debug-kernel/20.png)
Then, type `nios2-terminal -c $index -d 1 -i 0`. In this case, the index is number 2, so the command is `nios2-terminal -c 2 -d 1 -i 0`.
The Terminal view shows BIOS and Linux boot messages.
![example image](/images_embedded_linux/debug-kernel/21.png)
Users can log in to Linux using a "**root**" account **without a password**.
### Update build settings
Currently, **riscv64-ipfd-linux** is the only toolchain supported. Please change the project settings to use the correct toolchain.
- Right-click on the project then select properties.
- In project settings, select
- Architecture: RV64(-march=rv64i*)
- Floating point: None
- Integer ABI: LP64(-mabi=lp64*)
- Floating point ABI: Double precision extension (RVFD)
- Click Apply and Close.
### Debugging the Kernel on Intel FPGA Stratix 10 GX platform
!!!info "Note"
Before debugging the kernel, the users should select the architecture and floating point options. By default, the combine (RV64, None) is selected.
Please refer to [Section 2: Update build settings](#2-update-build-settings)
To debug the kernel on Intel FPGA Stratix 10 GX platform, create the new **RISC-V Kernel Debugging** configurations:
Right-click on the project name then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/22.png)
Double-click on **RISC-V Kernel Debugging**,
![example image](/images_embedded_linux/debug-kernel/23.png)
Selects the Debugger tab to switch the Platform. In the Platform list, select **Intel Stratix 10 GX Board** that youâ€™d like to start kernel debugging. Click Apply then Debug to start the Kernel debugging session on the Intel Stratix 10 GX board.
![example image](/images_embedded_linux/debug-kernel/24.png)
!!!warning "Note"
For **debugging the Kernel with multicores**, the users should select *2. Intel FPGA USB-Blaster II (virtual-jtag, smp-4-cores)* on **Default Configuration**. Otherwise only 1 core is debugged.
On hardware, the bootloader is re-loaded, then the HydraSoC booting is restarted from the beginning.
![example image](/images_embedded_linux/debug-kernel/25.png)
## Debugging the embedded Linux application while debugging the Kernel
!!!info "Note"
- For detailed information regarding basics of Embedded Linux application, please refer to &lt;a href="../../../examples/embedded-linux/Helloworld">**RISC-V Embedded Linux Project**&lt;/a>
- **Make sure the architecture and floating point options of both the Linux Kernel project and the Embedded Linux project are the same**.
Since the kernel is booted on the QEMU emulator or target boards on previous sections, users only need to debug the application via *Remote Target*. Right-click on the embedded Linux project then select **Debug As > Debug Configurations**.
![example image](/images_embedded_linux/debug-kernel/28.png)
Double-click on **RISC-V Debugging** and select "Helloworld Debug".
![example image](/images_embedded_linux/debug-kernel/29.png)
On the *Debugger* tab, please select:
- Platform: *Remote Target*
- Connection: *Default SSH-QEMU/ Default SSH-Hardware* (base on the target platform on which the Kernel is booted)
- Remote Absolute File Path for C/C++ Application: `/tmp/riscv_application.elf`
- Commands execute before application: `killall gdbserver`
![example image](/images_embedded_linux/debug-kernel/30.png)
Select **Apply** then **Debug**, the IDE will change to the debug perspective and automatically sets a breakpoint in the first line of code in the `main()` function.
![example image](/images_embedded_linux/debug-kernel/31.png)
--></description></item></channel></rss>