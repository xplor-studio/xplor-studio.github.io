<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio â€“ Features</title><link>/docs/features/</link><description>Recent content in Features on XploR Studio</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="/docs/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Component Management</title><link>/docs/features/component-management/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/features/component-management/</guid><description/></item><item><title>Docs: Project / Debug views</title><link>/docs/features/project-views/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/features/project-views/</guid><description>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> XploR Studio IDE is based on Eclipse IDE. Therefore, the views and perspectives of XploR Studio IDE are similar to Eclipse IDE. For more information about Eclipse IDE, please refer to &lt;a href="https://help.eclipse.org/latest/nav/0_2">Eclipse Platform User Guide&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="console-view">Console View&lt;/h2>
&lt;p>The Console view displays program output as well as output from the build tools. The Console view is connected to stdin, stdout, and stderr of the compilation process.
An example of Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/9.png" alt="example image">&lt;/p>
&lt;p>The Console view only represents programs that are running on the host, such as compilers and linkers. Programs running on an external target will display their output in other views, such as a terminal emulator window, depending on the type of target.&lt;/p>
&lt;h2 id="register-view">Register View&lt;/h2>
&lt;p>The Register view displays the contents of the CPU registers. The Register view is connected to the GDB server. An example of Register view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/10.png" alt="example image">&lt;/p>
&lt;h2 id="problems-view">Problems View&lt;/h2>
&lt;p>The Problems view displays problems detected by the build tools. The Problems view is connected to the build tools. An example of Problems view output:&lt;/p>
&lt;p>&lt;img src="/images_views/11.png" alt="example image">&lt;/p>
&lt;h2 id="executables-view">Executables View&lt;/h2>
&lt;p>The Executables view displays the executables that are part of the current project. The Executables view is connected to the build tools. An example of Executables view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/12.png" alt="example image">&lt;/p>
&lt;h2 id="terminal-view">Terminal View&lt;/h2>
&lt;p>The Terminal view displays a terminal emulator window. The Terminal view is connected to the host machine. An example of Terminal view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/13.png" alt="example image">&lt;/p>
&lt;p>Users can use this Terminal view to open the shell/bash console of the host machine, remote connection, or serial connection to the target platform. For example, with a serial terminal, users can specify additional parameters such as which device to connect, baud rate, and similar.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/14.png" alt="example image">&lt;/p>
&lt;h2 id="peripheral-registers-view">Peripheral Registers View&lt;/h2>
&lt;p>In the complex application where the peripherals are configured with the RISC-V cores, users can examine the peripherals&amp;rsquo; status such as control register values, and data register values via the Peripheral Registers View.
The Peripherals Registers View lists all peripherals available in the device hardware description .SVD file provided by the silicon vendor.
To active Peripheral registers view, select &lt;strong>Window &amp;gt; Preferences&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/15.png" alt="example image">&lt;/p>
&lt;p>Then select &lt;strong>C/C++ &amp;gt; Debug section&lt;/strong>
Click &lt;strong>Peripheral Registers Page&lt;/strong>. On this page:&lt;/p>
&lt;ul>
&lt;li>Architecture: Select RISC-V&lt;/li>
&lt;li>Vendor: Select QEMU&lt;/li>
&lt;li>Platform: Select Spike or E31mc or E31&lt;/li>
&lt;/ul>
&lt;p>The peripheral registers will be listed on the right-hand side of the page:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/16.png" alt="example image">&lt;/p>
&lt;p>Users can select registers or all registers to check, then click &lt;strong>Apply and Close&lt;/strong> button.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/17.png" alt="example image">&lt;/p>
&lt;p>The Peripheral register views will show all registers and their status.&lt;/p>
&lt;p>&lt;img src="/images_views/basic/18.png" alt="example image">&lt;/p>
&lt;h4 id="adding-peripheral-files-to-peripheral-registers-view">Adding Peripheral files to Peripheral Registers View&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Create a new folder within the XPLOR_HOME directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Include the .metadata file in the newly created folder, using the following sample content:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;?eclipse version=&amp;#34;3.4&amp;#34;?&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;extension
point=&amp;#34;xplor.studio.regview.peripheralData&amp;#34;&amp;gt;
&amp;lt;peripheral
architecture=&amp;#34;RISCV&amp;#34;&amp;gt; &amp;lt;!-- architecture name --&amp;gt;
&amp;lt;vendor
name=&amp;#34;FPGA&amp;#34;&amp;gt; &amp;lt;!-- vendor name --&amp;gt;
&amp;lt;chip
id=&amp;#34;neorv32&amp;#34;
path=&amp;#34;/path_to_svd_file/neorv32.xml&amp;#34;&amp;gt; &amp;lt;!-- The file path must exist --&amp;gt;
&amp;lt;/chip&amp;gt;
&amp;lt;/vendor&amp;gt;
&amp;lt;/peripheral&amp;gt;
&amp;lt;/extension&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Proceed to restart the XploR Studio application.
After the restart, navigate to the &lt;strong>Peripheral Registers Page&lt;/strong> to access the newly available Architecture/Vendor/Platform options.&lt;/li>
&lt;/ul>
&lt;h2 id="debugger-console-view">Debugger Console View&lt;/h2>
&lt;p>The Debugger Console view displays the output from the GDB server. This view is useful for debugging the GDB server itself. The Debugger Console view is connected to stdin, stdout, and stderr of the GDB server process. An example of Debugger Console view output:&lt;/p>
&lt;p>&lt;img src="/images_views/basic/24.png" alt="example image">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
If any of view disappears, users can always restore by clicking *&lt;strong>Window &amp;gt; Show View/NAME_OF_VIEW&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="/images_views/basic/25.png" alt="example image">&lt;/p></description></item><item><title>Docs: RTOS Views</title><link>/docs/features/views/</link><pubDate>Tue, 06 Oct 2020 08:49:15 +0000</pubDate><guid>/docs/features/views/</guid><description/></item></channel></rss>