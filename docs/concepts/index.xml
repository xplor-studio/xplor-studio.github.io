<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XploR Studio â€“ Concepts</title><link>/docs/concepts/</link><description>Recent content in Concepts on XploR Studio</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 Oct 2020 15:21:01 +0200</lastBuildDate><atom:link href="/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Embedded development</title><link>/docs/concepts/cross-platform/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/cross-platform/</guid><description>
&lt;p>In embedded or &lt;strong>cross-platform&lt;/strong> development, the compute architecture of the &lt;strong>host development system&lt;/strong> (i.e. &lt;em>hosts&lt;/em>) is different than the the &lt;strong>target execution platform&lt;/strong> (i.e. &lt;em>targets&lt;/em>). Thus, the &lt;strong>target application(s)&lt;/strong> (i.e. &lt;em>programs&lt;/em>) will not be able to run on the host development system.&lt;/p>
&lt;p>The &lt;strong>communication channel&lt;/strong> between the host and target lets the host software (e.g. XploR Studio) program and control the target hardware behavior and program code.&lt;/p>
&lt;p>Because of the inherent architural differences between the hosts and targets, &lt;strong>XploR Studio&lt;/strong> is integrated with different embedded compiler toolchains, operating systems, hardware designs, and debug &amp;amp; monitoring tools, packaged as &lt;strong>blueprints&lt;/strong> and delivered by the IDE to provide a unified experience to create, build, deploy, test and debug designs for developers.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Cross-platform development
state &amp;#34;Host Development System&amp;#34; as hosts
note left of hosts : where XploR IDE runs
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Execution Platforms&amp;#34; as targets
targets : ARM, RISC-V, or others ISA(s)\nrunning baremetal or with an\nembedded OS
note right of targets : where target applications run
targets -u-&amp;gt; hosts
note left on link
acknowledgement to
host from target
end note
hosts --&amp;gt; targets
note left on link
host commands to
program or debug target
end note
&lt;/code>&lt;/pre>&lt;h2 id="embedded-target">Embedded Target&lt;/h2>
&lt;p>In the post-silicon development flow, the &lt;strong>embedded target&lt;/strong> consists of a CPU and associated peripherals (e.g. USB, Ethernet, I2C, &amp;hellip;). The CPU implements and execute code defined by an Instruction Set Architecture (ISA, e.g. x86, ARM, RISC-V). &lt;strong>JTAG&lt;/strong> is commonly the communication channel between the host and target for programming and debugging, as shown below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Post-silicon embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Target Platform (ASICs)&amp;#34; as targets {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
note bottom of targets : CPU, Memory and Peripherals are\nASIC blocks, not modifable.
state JTAG
note top of JTAG : JTAG used to program target memory\nand control / debug programs on CPU.
hosts -&amp;gt; JTAG
JTAG -&amp;gt; targets
&lt;/code>&lt;/pre>&lt;h2 id="host-software">Host software&lt;/h2>
&lt;p>Some of the most common software components that run on the &lt;em>host computer&lt;/em>.&lt;/p>
&lt;h3 id="ide">IDE&lt;/h3>
&lt;p>XploR Studio has a command line interface as well as a graphical user interface based on the Eclipse IDE. Both are collection of software programs and tools let the developer create programs for the embedded targets.&lt;/p>
&lt;p>The Integrated Development Environment (IDE) is a unified graphical user interface that makes it easy and convenient for developers to write and debug code. The IDE typically includes a source code editor, a source-level debugger, and a build automation tool.&lt;/p>
&lt;p>The XploR Studio IDE is a flexible and highly configurable software environment that is fully integrated with blueprints to accelerate pre and post silicon software development.&lt;/p>
&lt;p>&lt;em>Also see &lt;a href="/about">Why do I need an IDE?&lt;/a>&lt;/em>&lt;/p>
&lt;h3 id="cross-toolchain">Cross toolchain&lt;/h3>
&lt;p>The cross toolchain is the set of tools that compiles program source code, written in C/C++ or assembly language, into executable instructions that run on the target platforms. The cross toolchain consists of compilers, linker, and associated run-time libraries.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Compiler choices:&lt;/strong>
&lt;em>The &lt;b>GNU&lt;/b> compiler (&lt;a href="https://www.gnu.org">www.gnu.org&lt;/a>), and &lt;b>LLVM&lt;/b> are two most popular compilers for cross platform development. GNU GCC is compatible with a wider range of existing open source software, CPU architecture, and operating systems.&lt;/p>
&lt;p>LLVM is a more modern compiler that, while continuously evolving, provides faster compilation speed, better diagnostic, and is modularly designed, making it the popular choice for new and emerging ISA and architecture.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="gdb">GDB&lt;/h3>
&lt;p>GDB is a GNU project command line debugger that allows developers to debug programs written in various languages. It supports many debugging formats and offers many debugging features, including the ability to step through code, set breakpoints, and examine variables. The XploR Studio IDE provides a graphical interface to GDB, making it easier to view different aspects of the running program (e.g. call-stack, variables, registers, and assembly code) from centralized dash-board.&lt;/p>
&lt;h2 id="target-software">Target software&lt;/h2>
&lt;h3 id="bootloader">Bootloader&lt;/h3>
&lt;p>Program code and data of an embedded operating system must be loaded into the target platform working memory during the device start-up. This task is achieved by the &lt;strong>bootloader&lt;/strong>, which is a program launched immediately after the target starts.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>
&lt;em>The &lt;b>U-Boot&lt;/b> bootloader is a popular bootloader available for embedded microarchitecture such as PowerPC and ARM. Recent ISA such as RISC-V takes a more minimalistic approach, such as that supported by &lt;b>BBL&lt;/b> (Berkeley Boot Loader)
&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="real-time-os-rtos">Real-time OS (RTOS)&lt;/h3>
&lt;p>A real-time operating system (RTOS) is an operating system that is designed to provide predictable processing time for critical tasks. An RTOS can respond to an event in a specified time period. This makes it ideal for applications that require high reliability or timing precision.&lt;/p>
&lt;p>RTOS(es) provide real-time task scheduling and basic memory management, along with advanced features such as multi-threading, interrupt handling and power management. Some RTOS(es) such as Zephyr OS are scalable and can be configured to support as many or as few features as needed in order to minimize resource and memory footprint.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>RTOS awareness:&lt;/strong>
&lt;em>The XploR Studio IDE and related blueprints provide support for building and debugging of several popular RTOS(es) including &lt;b>Amazon FreeRTOS&lt;/b>, &lt;b>Zephyr OS&lt;/b>, and &lt;b>embedded Linux&lt;/b>.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Execution platforms</title><link>/docs/concepts/execution-environment/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/execution-environment/</guid><description>
&lt;p>With the advent of open source CPU implementation (e.g. &lt;a href="https://openrisc.io/">openRISC&lt;/a> ), and open ISA (e.g. &lt;a href="http://www.riscv.org">RISC-V&lt;/a>), opportunities exist for developers to innovate on both side of the coin: in both hardware and software (i.e. &lt;strong>software-hardware co-design and development&lt;/strong>)&lt;/p>
&lt;p>To properly supports software-hardware co-design for pre-silicon development, the embedded target must be able to host different hardware designs consisting of different ISA implementation (and sometimes more than one), HW IP(s) and peripherals, and on-chip topology.&lt;/p>
&lt;p>&lt;strong>Target execution platform(s)&lt;/strong> are platform devices with circuits that can be manipulated with hardware description language (HDL) to perform specific functions, including those of a microprocessor or a complete system on chip (SoC).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Examples:&lt;/strong>
&lt;em>&lt;b>FPGA(s)&lt;/b> are common target execution platforms used for prototyping and deployment. &lt;b>Emulators&lt;/b> and arguably cycle-approximate &lt;b>instruction set simulators&lt;/b>, used for verification and early software development, are other examples. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>In the context of pre-silicon development, &lt;em>programming&lt;/em> means:&lt;/p>
&lt;ul>
&lt;li>The manipulation of the device circuits with specific HDL (&lt;em>hardware programming&lt;/em>, or &lt;em>flashing&lt;/em>), or&lt;/li>
&lt;li>The loading and debugging of executable code and data (&lt;em>software programming&lt;/em>, or &lt;em>loading&lt;/em>) into the memory of the microprocessor that is executing on the target execution platform.&lt;/li>
&lt;/ul>
&lt;p>XploR Studio supports both mode of programming support both pre and post silicon software development.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Virtual JTAG:&lt;/strong>
&lt;em>Many &lt;b>XploR blueprints&lt;/b> for execution platforms include builtin &lt;b>virtual JTAG&lt;/b> supporting hardware and software programming, thus obviating the needs for costly and less convenient external JTAG device from third-parties.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">mainframe Target execution platform as the embedded target
state &amp;#34;Host Development System&amp;#34; as hosts
hosts : Linux or Windows on x86 / ia64
state &amp;#34;Pre-silicon target execution platform&amp;#34; as targets {
state JTAG
state &amp;#34;HDL programmable device&amp;#34; as HAPS {
state CPU : x86 or ARM
state Memory : DDR, SRAM, ...
state Peripherals : USB, Ethernet, ...
}
JTAG --&amp;gt; HAPS
}
note bottom of HAPS : CPU, Memory and Peripherals\nare (or can be) programmed with HDL.
state JTAG
note top of JTAG : JTAG used for both hardware\nand software programming
hosts -&amp;gt; JTAG
&lt;/code>&lt;/pre></description></item><item><title>Docs: Blueprints</title><link>/docs/concepts/blueprints/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>/docs/concepts/blueprints/</guid><description>
&lt;p>Blueprints are packages of hardware and/or software IP(s) that are bounded to specific &lt;em>execution platform(s)&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>IP(s) versus blueprints&amp;quot;&lt;/strong>
&lt;em> The HDL implementations of hardware peripherals, accelerator, or ISA such as ARM or RISC-V are &lt;b>IP(s)&lt;/b>. &lt;b>Blueprints&lt;/b> are combination these IP(s) that has been customized, configured, and built to execute on specific target execution platforms, such as FPGA(s) from AMD or Intel. &lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Blueprints are fully integrated with XploR Studio, and can be installed and used by themselves or in combination with other blueprints.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Benefits:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Blueprints provide clear and concise purposes&lt;/strong> - Blueprints serve as a detailed plan or a design that outlines the necessary steps and materials required to construct or create a design.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints act as reference model&lt;/strong> - Blueprints prototype the functional behavior of the design, and can be used as a reference or golden model to help to ensure that the finished product is consistent with the original design and meets the expectations and requirements of our customers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints enable early software development&lt;/strong> - Together with XploR Studio IDE, blueprints enable developers to design, test, and debug software in pre-silicon phase in order to identify and address potential issues beforehand.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blueprints promote reusability&lt;/strong> - In many cases, HW and SW IP(s) in blueprints are hardened and reused for in-silicon and post-silicon deployment.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item></channel></rss>